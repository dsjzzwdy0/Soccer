[INFO] [2019-02-01 11:22:51][com.loris.soccer.net.App]FF60
[INFO] [2019-02-01 11:23:06][com.loris.soccer.net.App]Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0
[WARN] [2019-02-01 11:34:13][org.apache.commons.httpclient.HttpMethodBase]Cookie rejected: "$Version=0; _javaeye_cookie_id_=1548992053853434; $Path=/; $Domain=iteye.com". Domain attribute "iteye.com" violates RFC 2109: domain must start with a dot
[WARN] [2019-02-01 11:34:59][org.apache.commons.httpclient.HttpMethodBase]Cookie rejected: "$Version=0; _javaeye_cookie_id_=1548992099530243; $Path=/; $Domain=iteye.com". Domain attribute "iteye.com" violates RFC 2109: domain must start with a dot
[INFO] [2019-02-01 11:34:59][com.loris.soccer.net.App]<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-CN" dir="ltr">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  <title>
    HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析 - 科技改变生活 - ITeye博客
  </title>
  <meta name="description" content="  为了更好的提供文章，我已经将博客迁移到了自建的博客网站上，我将更多的从源码分析的角度入手，为大家带来更多的深度文章，请大家继续关注我~！  博客地址：www.liuinsect.com      _______________________________________________________________________________     MultiThreadedHttp ..." />
  <meta name="keywords" content=" HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析" />
  <link rel="shortcut icon" href="/images/favicon.ico" type="image/x-icon" />
  <link rel="search" type="application/opensearchdescription+xml" href="/open_search.xml" title="ITeye" />
  <link href="/rss" rel="alternate" title="科技改变生活" type="application/rss+xml" />
  <link href="https://www.iteye.com/stylesheets/blog.css?1543400233" media="screen" rel="stylesheet" type="text/css" />
<link href="https://www.iteye.com/stylesheets/themes/blog/orange.css?1543400233" media="screen" rel="stylesheet" type="text/css" />
  <script src="https://www.iteye.com/javascripts/application.js?1544695478" type="text/javascript"></script>
  <script>
    var _hmt = _hmt || [];
    (function() {
        var hm = document.createElement("script");
        hm.src = "//hm.baidu.com/hm.js?e19a8b00cf63f716d774540875007664";
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(hm, s);
    })();
</script>
<style>
/* 折叠效果 */
.hide-main-content{
    position: relative;
}
.hide-article-box {
    display: none;
    position: absolute;
    z-index: 9999;
    bottom: -1px;
    width: 100%;
    padding-top: 160px;
    background-image: -webkit-gradient(linear,left top, left bottom,from(rgba(255,255,255,0)),color-stop(70%, #fff));
    background-image: linear-gradient(-180deg,rgba(255,255,255,0) 0%,#fff 70%);
}
.hide-article-box #btn-readmore{
    color: #ca0c16;
    border: 1px solid #ca0c16;
    margin: 10px auto;
    padding: 0 8px;
    display: block;
    font-size: 14px;
    border-radius: 4px;
    text-align: center;
    background-color: transparent;
    height: 34px;
    width: 74px;
    line-height: 32px;
    min-width: 72px;
    cursor: pointer;
}
.hide-article-box #btn-readmore:hover{
    background: #ca0c16;
    color:#fff;
    text-decoration: none;
}
</style>
<!-- 因INS广告原因 需要提前引入jquery -->
<script src="//csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js" type="text/javascript"></script>
<script type="text/javascript">var jQuery = jQuery.noConflict();// 解决jq与prototype.js命名空间冲突的问题</script>
<script src="https://g.csdnimg.cn/fixed-sidebar/1.1.1/fixed-sidebar.js" type="text/javascript"></script>

    <link href="https://www.iteye.com/javascripts/syntaxhighlighter/SyntaxHighlighter.css?1448702469" media="screen" rel="stylesheet" type="text/css" />
  <script src="https://www.iteye.com/javascripts/syntaxhighlighter/shCoreCommon.js?1448702469" type="text/javascript"></script>
<script src="https://www.iteye.com/javascripts/hotkey.js?1448702469" type="text/javascript"></script>
  <script src="https://www.iteye.com/javascripts/code_favorites.js?1448702469" type="text/javascript"></script>
<script src="https://www.iteye.com/javascripts/weiboshare.js?1448702469" type="text/javascript"></script>

  <!-- 请置于所有广告位代码之前 -->
  <script src="https://dup.baidustatic.com/js/ds.js"></script>
  <link ref="canonical" href="http://liuinsect.iteye.com/blog/1886237">
  <script src="//msite.baidu.com/sdk/c.js?appid=1563894916825412"></script>
  <script src="https://g.csdnimg.cn/recommend/1.3.0/recommend.js"></script>
</head>

<body>
  <div id="header">
    <div id="blog_site_nav">
  <a href="https://www.iteye.com/" class="homepage">首页</a>
  <a href="https://www.iteye.com/news">资讯</a>
  <a href="https://www.iteye.com/magazines">精华</a>
  <a href="https://www.iteye.com/forums">论坛</a>
  <a href="https://www.iteye.com/ask">问答</a>
  <a href="https://www.iteye.com/blogs">博客</a>
  <a href="https://www.iteye.com/blogs/subjects">专栏</a>
  <a href="https://www.iteye.com/groups">群组</a>
<!--  <a href="#" onclick="return false;" id="msna"><u>更多</u> <small>▼</small></a>-->
<!--  <div class="quick_menu" style="display:none;">-->
<!--    <a target="_blank" href="https://job.iteye.com/iteye">知识库</a>-->
<!--    <a href="https:///search">搜索</a>-->
<!--  </div>-->
</div>

    <div id="user_nav">

      <a href="/login" class="welcome" title="登录">您还未登录 !</a>
    <a href="/login">登录</a>
    <!--<a href="/signup" class="nobg">注册</a>-->
    <!--<a href="https://passport.csdn.net/account/mobileregister?from=https://www.iteye.com">注册</a>-->
  </div>


  </div>

  <div id="page">
<!--    <div id="branding" class="clearfix">-->
<!--      <div id="blog_name">-->
<!--        <h1><a href="/">-->
<!--            </a></h1>-->
<!--      </div>-->
<!--      <div id='fd'></div>-->
<!--      <div id="blog_navbar">-->
<!--        <ul>-->
          
          
          
          
          
          
<!--        </ul>-->

<!--        <div class="search">-->
<!--          <form action="/blog/search" method="get">-->
<!--            <input class="search_text" id="query" name="query" style="margin-left: 10px;width: 110px;" type="text"-->
<!--              value="" />-->
<!--            <input class="submit_search" type="submit" value="" />-->
<!--          </form>-->
<!--        </div>-->
<!--        <div id="fd"></div>-->
<!--      </div>-->
<!--    </div>-->
    `
    <div id="content" class="clearfix">
      <div id="local">
        <div class="local_top"></div>
        <div id="blog_owner">
  <div id="blog_owner_logo"><a href='https://liuinsect.iteye.com'><img alt="liuInsect的博客" class="logo" src="https://www.iteye.com/images/user-logo.gif?1448702469" title="liuInsect的博客: 科技改变生活" width="" /></a></div>
  <div id="blog_owner_name">liuInsect</div>
</div>

        <div id="blog_actions">
          <ul>
            <li>浏览:
              112762 次</li>
            
            <li>性别:
              <img alt="Icon_minigender_1" src="https://www.iteye.com/images/icon_minigender_1.gif?1448702469" title="男" />
            </li>
            
            
            <li>
              <img src='/images/status/offline.gif'/>
            </li>
            
          </ul>
        </div>

        <div id="user_visits" class="clearfix">
          <h5>最近访客 <span style='font-weight:normal;font-size:12px;padding-left:30px;'>
              <a href="/blog/user_visits">更多访客&gt;&gt;</a></span></h5>
          
          <div class="user_visit">
            <div class="logo"><a href='https://tweifeng.iteye.com' target='_blank'><img alt="tweifeng的博客" class="logo" src="https://www.iteye.com/images/user-logo-thumb.gif?1448702469" title="tweifeng的博客: tweifeng" width="48px" /></a></div>
            <div class="left">
              <a href='https://tweifeng.iteye.com' target='_blank' title='tweifeng'>tweifeng</a>
            </div>
          </div>
          
          <div class="user_visit">
            <div class="logo"><a href='https://alock1.iteye.com' target='_blank'><img alt="aLOCK1的博客" class="logo" src="https://www.iteye.com/images/user-logo-thumb.gif?1448702469" title="aLOCK1的博客: " width="48px" /></a></div>
            <div class="left">
              <a href='https://alock1.iteye.com' target='_blank' title='aLOCK1'>aLOCK1</a>
            </div>
          </div>
          
          <div class="user_visit">
            <div class="logo"><a href='https://zhouxf.iteye.com' target='_blank'><img alt="zhouxf的博客" class="logo" src="https://www.iteye.com/images/user-logo-thumb.gif?1448702469" title="zhouxf的博客: " width="48px" /></a></div>
            <div class="left">
              <a href='https://zhouxf.iteye.com' target='_blank' title='zhouxf'>zhouxf</a>
            </div>
          </div>
          
          <div class="user_visit">
            <div class="logo"><a href='https://stayhome.iteye.com' target='_blank'><img alt="StayHome的博客" class="logo" src="https://www.iteye.com/images/user-logo-thumb.gif?1448702469" title="StayHome的博客: " width="48px" /></a></div>
            <div class="left">
              <a href='https://stayhome.iteye.com' target='_blank' title='StayHome'>StayHome</a>
            </div>
          </div>
          
        </div>

        <div id="user_title_list" class="clearfix">
          <h5>博主相关</h5>
          <li>
            <a href="https://liuinsect.iteye.com">博客</a>
          </li>

          <li>
            <a href="/weibo">微博</a>
          </li>

          <li>
            <a href="/album">相册</a>
          </li>

          <li>
            <a href="/link">收藏</a>
          </li>

          <li>
            <a href="/blog/guest_book">留言</a>
          </li>

          <li>
            <a href="/blog/profile">关于我</a>
          </li>
        </div>

        

                <div id="blog_menu">
          <h5>文章分类</h5>
          <ul>
            <li>
              <a href="/">全部博客 (25)</a>
            </li>
            
            <li>
              <a href="/category/202219">struts2 (2)</a>
              </li>
              
            <li>
              <a href="/category/202576">ubuntu (1)</a>
              </li>
              
            <li>
              <a href="/category/202577">linux (1)</a>
              </li>
              
            <li>
              <a href="/category/202578">os (1)</a>
              </li>
              
            <li>
              <a href="/category/205165">lucene (2)</a>
              </li>
              
            <li>
              <a href="/category/211352">代码管理 (1)</a>
              </li>
              
            <li>
              <a href="/category/212908">spring (2)</a>
              </li>
              
            <li>
              <a href="/category/223162">mysql (1)</a>
              </li>
              
            <li>
              <a href="/category/234735">JIANG (0)</a>
              </li>
              
            <li>
              <a href="/category/239314">java6道面试题 (0)</a>
              </li>
              
            <li>
              <a href="/category/243548">synchronized (0)</a>
              </li>
              
            <li>
              <a href="/category/243840">java Synchronized (1)</a>
              </li>
              
            <li>
              <a href="/category/247007">二分匹配算法 (0)</a>
              </li>
              
            <li>
              <a href="/category/250625">降级论 (0)</a>
              </li>
              
            <li>
              <a href="/category/252087">380167616@qq.com (0)</a>
              </li>
              
            <li>
              <a href="/category/266729">乱码 (0)</a>
              </li>
              
            <li>
              <a href="/category/266818">java (4)</a>
              </li>
              
            <li>
              <a href="/category/266819">static (1)</a>
              </li>
              
            <li>
              <a href="/category/266832">乱码，DoGet (1)</a>
              </li>
              
            <li>
              <a href="/category/266836">CXF (1)</a>
              </li>
              
            <li>
              <a href="/category/300247">多线程 (2)</a>
              </li>
              
          </ul>
        </div>
        <div id='month_blogs'>
          <h5>社区版块</h5>
          <ul>
            <li>
              <a href="/blog/news">我的资讯</a> (
              0)</li>
            <li>
              <a href="/blog/post">我的论坛</a> (
              2)
            </li>
            <li>
              <a href="/blog/answered_problems">我的问答</a> (
              0)</li>
          </ul>
        </div>
        <div id="month_blogs">
          <h5>存档分类</h5>
          <ul>
            
            <li>
              <a href="/blog/monthblog/2014-11">2014-11</a>
              (
              1)</li>
            
            <li>
              <a href="/blog/monthblog/2013-12">2013-12</a>
              (
              3)</li>
            
            <li>
              <a href="/blog/monthblog/2013-08">2013-08</a>
              (
              2)</li>
            
            <li>
              <a href="/blog/monthblog_more">更多存档...</a>
            </li>
          </ul>
        </div>
        
        

        <div id="guest_books">
          <h5>最新评论</h5>
          <ul>
            
            <li>
              <a href='https://panamera.iteye.com' target='_blank' title='panamera'>panamera</a>：
              楼主有没有测试过，没有发你说什么锁不成功，都不知道你想表达什么 ...<br />
              <a href="/blog/1662839#bc2399998">JAVA Synchronized 关键字锁实例和锁CLASS对象的区别</a>
            </li>
            
            <li>
              <a href='https://ouchuquan.iteye.com' target='_blank' title='ouchuquan'>ouchuquan</a>：
              Prototype creates a brand new i ...<br />
              <a href="/blog/1462062#bc2389320">spring 中prototype 和 reqeust的区别</a>
            </li>
            
            <li>
              <a href='https://ljn799498049.iteye.com' target='_blank' title='ljn799498049'>ljn799498049</a>：
              请问倒数第2个线程栈的调用顺序的图是用什么画的啊 ，还是ecl ...<br />
              <a href="/blog/1791958#bc2389115">Spring编程式事务与声明式事务源码分析</a>
            </li>
            
            <li>
              <a href='https://hxwabc.iteye.com' target='_blank' title='hxwabc'>hxwabc</a>：
              其实没有必要这么麻烦，只要ThreadLocal是static ...<br />
              <a href="/blog/1827012#bc2385802">ThreadLocal内存泄露分析</a>
            </li>
            
            <li>
              <a href='https://china2010pan.iteye.com' target='_blank' title='China2010pan'>China2010pan</a>：
               ...<br />
              <a href="/blog/1994831#bc2375610">FutureTask 源码解析</a>
            </li>
            
          </ul>
        </div>

        <div class="local_bottom"></div>
        
        <div id="nav_show_top_stop">
            <div>
              <!-- 广告位：PC端-iteye博客详情页左侧Button1-200*200 -->
              
              <!-- Ads ID 423 -->
              
            </div>
            <div>
              <!-- 广告位：PC端-iteye博客详情页左侧Button2-200*200 -->
              
              <!-- Ads ID 424 -->
              
            </div>
          </div>
      </div>
      
      <div id="main" class="">
        



        


<div class="h-entry" style='display:none'>
  <a href="https://liuinsect.iteye.com" class="p-author" target="_blank">liuInsect</a>
</div>


<div class="blog_main">
  <script type="application/ld+json">
    {
        "@context": "https://zhanzhang.baidu.com/contexts/cambrian.jsonld",
        "@id": "http://liuinsect.iteye.com/blog/1886237",
        "title": "HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析",
        "images": [],
        "description": "",
        "pubDate": "2013-06-13T16:35:10"
    }
  </script>
  <div class="blog_title">
    <h3>
      <a href="/blog/1886237">HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析</a>
      <em class="actions">      </em>
    </h3>
    
        <div class='news_tag'>&nbsp;</div>
  </div>

  <div id="blog_content" class="hide-main-content">
    <div class="hide-article-box text-center">
      <a class="btn" id="btn-readmore">阅读更多</a>
    </div>
    <div style="font-size: 14px;" class="iteye-blog-content-contain">
<div>为了更好的提供文章，我已经将博客迁移到了自建的博客网站上，我将更多的从源码分析的角度入手，为大家带来更多的深度文章，请大家继续关注我~！  博客地址：<a style="color: #e9650e; text-decoration: underline;" href="http://www.liuinsect.com/" target="_self">www.liuinsect.com</a>
</div>
<p class="MsoNormal"> </p>
<div>_______________________________________________________________________________</div>
<p class="MsoNormal"> </p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">MultiThreadedHttpConnectionManager </span>是<span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">HTTP Client</span>中用来复用连接的连接管理类<span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">,</span>可以通过</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">   </span></span></p>
<pre class="java" name="code">   MultiThreadedHttpConnectionManager n =  new MultiThreadedHttpConnectionManager();
   HttpClient client = new HttpClient(n);</pre>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"> </span></span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">这样的方式去 创建一个<span>Client </span>实例，</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">创建后，每当执行</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>int statusCode = client.executeMethod(postMethod);</span>时<span> </span></span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>http client </span>委托<span>ConnectionManager</span>创建连接，其实是先委托<span>HttpMethodDirector </span>执行<span>excute</span>方法，</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">再通过它委托<span>ConnectionManager </span>创建连接，<span>HttpMethodDirector </span>中包含了一下<span>host,</span>请求参数等信息。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">在创建连接时，<span>HttpMethodDirector </span>中有如下代码：</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">         </span></span></p>
<pre class="java" name="code">      if ( this.conn == null) {
          this.conn = connectionManager.getConnectionWithTimeout(
              hostConfiguration,
              this.params.getConnectionManagerTimeout()
           );
          ......
       }</pre>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"> </span></span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>ConnectionManager </span>使用了常用的多态的方式将连接的获取交给子类完成。 增强其扩展性。</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>ConnectionManager </span>有三个子类：</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> <img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7120/ab632cac-39f0-348a-a3be-0701a05b4d9b.png"><br> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">对应于：</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>1. </span>一次性的连接：</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"><img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7122/9cfed9b5-26af-3018-a9ad-7d97c959a3ba.png"><br> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span> </span><span>2. </span><span>线程池中获取连接：</span></span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> <br><img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7124/69529ef4-dde5-3b2e-a3e9-aca64a25c49d.png"><br> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>3. </span>复用当前<span>SimpleHttpConnectionManager</span>中的一个成员变量，策略是没有则创建，有则覆盖后返回</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> <br><img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7126/62ef3d88-d5b5-3b02-b04f-c1d8f3fef1ce.png"><br> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;"><strong>重点说下<span>MultiThreadedHttpConnectionManager   </span>中连接的获取</strong><strong>：</strong></span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">在使用<span> MultiThreadedHttpConnectionManager  </span>获取连接的时候，<span>MultiThreadedHttpConnectionManager  </span>使用了连接池的概念针对每个<span><br> HostConfiguration </span>做了连接的管理，即<span> HostConfiguration </span>作为<span>Key </span>，连接池（<span>HostConnectionPool</span>）作为<span>value</span>去管理当前<span>host</span>下的所有连接，<span><br> HostConfiguration</span>的实例如下：<span> HostConfiguration[host=http://www.taobao.com]</span></span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>HostConnectionPool </span>中使用<strong>链表</strong><span> </span>管理了 空闲的连接和等待连接的线程队列。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">每次获取连接的时候 根据参数（后面会提到）决定是直接从池中获取一个空闲连接<span>,</span>创建一个连接，还是计算出一个等待时间后 将当前线程沉睡这么久。而后再检查。</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span><br> Http Client </span>通过协议对应的<span>ProtocolSocketFactory</span>去创建一个<span>socket</span>连接来发送请求和接受响应</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">使用注意事项：</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>1. MultiThreadedHttpConnectionManager  </span>中有以下两个变量，分别解释：</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>     a. </span>每个<span>host</span>最大同时可以获取的连接数， 大于这个数字后， （<span>1,2</span>号线程正在使用连接）<span>3</span>号线程会<span>wait </span>沉睡住 直到到达时间或者被打断或者<span>1,2</span>号中有人<span>release</span>这个<span>connection</span>，抛出异常。</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>          </span>注意，如果是<span>HTTP client </span>来调用接口的话 这个例如（<span>http://www.taobao.com </span>那他的<span>host</span>是<span> www.taobao.com</span>） 这个值应该设置大一点 否则很多线程调用这个接口的时候会阻塞住。</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>     b. </span>同一时间<span>MultiThreadedHttpConnectionManager  </span>允许的最大连接数，超过这个数字，连接的建立将会阻塞。直到有空闲连接释放。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> <br><img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7128/e9cd0779-310e-3bcd-83ae-61ab59c6387b.png"><br> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">使用注意事项测试代码：<span>  </span>下划线的两个方法可以调整后观察结果</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><strong><span> </span></strong></span></p>
<pre class="java" name="code">public static void main(String[] sadfasd) throws HttpException, IOException, InterruptedException{
             final String url= "http://www.taobao.com" ;
             final HttpClient client = new HttpClient();
             final MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();
             connectionManager.setMaxTotalConnections (1);//总的连接数
             connectionManager.setMaxConnectionsPerHost (2);//每个host的最大连接数
            client.setHttpConnectionManager( connectionManager );
            
            Runnable r = new Runnable(){
                   public  void run(){
                         int statusCode=0;
                        PostMethod postMethod = new PostMethod(url);
                         try {
                              statusCode = client.executeMethod(postMethod);
                              System. out.println( "sleep" + statusCode );
                              Thread. sleep(3000);//10s
                              postMethod.releaseConnection();
                        } catch (HttpException e) {
                              e.printStackTrace();
                        } catch (IOException e) {
                              e.printStackTrace();
                        } catch (InterruptedException e) {
                              e.printStackTrace();
                        }
                  };
            };
            Runnable r1 = new Runnable(){
                   public  void run(){
                         int statusCode=0;
                        PostMethod postMethod = new PostMethod(url);
                         try {
                              statusCode = client.executeMethod(postMethod);
                        } catch (HttpException e) {
                              e.printStackTrace();
                        } catch (IOException e) {
                              e.printStackTrace();
                        }
                        System. out.println( statusCode );
                        postMethod.releaseConnection();
                  };
            };
            Runnable r2 = new Runnable(){
                   public  void run(){
                         int statusCode=0;
                        PostMethod postMethod = new PostMethod(url);
                         try {
                              statusCode = client.executeMethod(postMethod);
                        } catch (HttpException e) {
                              e.printStackTrace();
                        } catch (IOException e) {
                              e.printStackTrace();
                        }
                        System. out.println( statusCode );
                        postMethod.releaseConnection();
                  };
            };
            Runnable r3 = new Runnable(){
                   public  void run(){
                         int statusCode=0;
                        PostMethod postMethod = new PostMethod(url);
                         try {
                              statusCode = client.executeMethod(postMethod);
                        } catch (HttpException e) {
                              e.printStackTrace();
                        } catch (IOException e) {
                              e.printStackTrace();
                        }
                        System. out.println( statusCode );
                        postMethod.releaseConnection();
                  };
            };
             new Thread(r).start();
            Thread. sleep(1000);
             new Thread(r1).start();
             new Thread(r2).start();
             new Thread(r3).start();
            
      }</pre>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><strong><span> </span></strong></span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;"><strong>释放连接：</strong></span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">在我们调用<span>postMethod.releaseConnection()</span>时， 会调用<span>connectionManager</span>的<span>releaseConnection</span>方法。<span><br></span>注意：进入这个方法后会首先同步整个<span>connectionPool</span>（连接池）对象，这意味着，在多连接复用的时候频繁的释放连接，也是会有性能损耗的，同步整个<span>connectionPool</span>后连接的创建都会受影响。<span><br></span>然后开始归还连接，归还的方式很清晰：</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>1. </span>将<span>Connection</span>放到基于<span>host</span>的连接池的空闲链表中<span><br>     hostPool. freeConnections .add(conn);<br> 2.</span>将<span>Connection</span>放到整个全局的<span>connectionPool</span>的空闲链表中<span><br> 3. </span>将<span>Connection</span>从<span>Reference Map</span>中移除（<span>Reference Map </span>后面单独讲解）<span><br> 4. </span>将<span>Connection</span>加入到超时管理中去。<span><br> 5. </span>将<span>hostPool</span>（<span>host</span>连接池）里等待队列的头元素拿出来 发送<span>interrupt</span>的信号量。目的是 唤醒等待连接的线程。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">到目前为止，有两个点可以详细说下<span><br> 1. Reference Map</span>的作用。<span><br> 2.  </span>等待连接的线程的处理方式。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">首先说<strong><span style="color: #ff0000;">Reference Map</span></strong><span>,</span>这个名字是我自己取的。它在<span>MultiThreadedHttpConnectionManager  </span>中的名字叫做：</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"><img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7130/d20fbff5-c6a0-3a3c-8421-bb79be056176.png"><br> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">在每次获取连接和释放连接的时候会将<span>”</span>连接<span>“</span>存入和移除。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"><strong><span style="color: #ff0000;">注意： 这里的<span>”</span>连接<span>“ </span>已经不是<span>Connection </span>而是用<span> WeakReference</span>包装过的<span>Connection</span>。</span></strong></span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">为什么用<span>WeakReference</span>？</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">这里的概念和<span>ThreadLocal </span>中用<span>WeakReference </span>包装<span>ThreadLocalMap</span>中的<span>Key</span>一样。<span> </span></span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">目的是为了 在连接丢失时，<span>HTTP client </span>失去了对<span>“</span>连接<span>”</span>（<span>Connection</span>）的强引用，该连接对象变成了弱引用对象，可以被<span>GC</span>掉。</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">所以，每次在获取连接的时候 要将连接用<span>WeakReference </span>包装后放到<em><span>REFERENCE_TO_CONNECTION_SOURCE </span></em>这个<span>Map</span>中<span>,</span></span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">每次释放连接时，将它从<em><span>REFERENCE_TO_CONNECTION_SOURCE </span></em>中移除<span>,</span>因为这个时候连接的管理由线程池使用强引用管理。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">再说，<span style="color: #ff0000;"><strong>等待连接的线程的处理方式</strong></span></span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">先看<span> </span><span style="color: #ff0000;"><strong>获取连接时的代码 和注释</strong></span><span>  </span>大部分代码被精简了。 所以逻辑不通，看流程即可。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<pre class="java" name="code">  synchronized (connectionPool) {
          while (connection == null) {
              if (hostPool.freeConnections.size() &gt; 0) { 
                    //有线程池中有空闲的连接
                  connection = connectionPool.getFreeConnection(hostConfiguration);
 
              } else if ((hostPool.numConnections &lt; maxHostConnections) &amp;&amp; (connectionPool.numConnections &lt; maxTotalConnections)) {
                    //没有空闲连接，但是满足前文的两个条件 可以创建新的连接
                  connection = connectionPool.createConnection(hostConfiguration); 
 
              } else if ((hostPool.numConnections &lt; maxHostConnections) &amp;&amp; (connectionPool.freeConnections.size() &gt; 0)) {
 
                    //整个连接数 没有到达最大，并且有空闲连接（其他host池中） 则删除掉其他host中的连接，并且在当前host池子中创建新连接
                  connectionPool.deleteLeastUsedConnection();
                  connection = connectionPool.createConnection(hostConfiguration);
              } else {
                  //以上条件都不满足， 只能将当前线程睡眠
                  try { 
                    waitingThread = new WaitingThread();//创建一个线程包装类
                    waitingThread.hostConnectionPool = hostPool;//指定所属的host连接池
                    waitingThread.thread = Thread.currentThread();//将当前线程赋值           
                    startWait = System.currentTimeMillis ();
                     
                      hostPool.waitingThreads.addLast(waitingThread);//将线程包装类 添加到host连接池的 等待列表中
                      connectionPool.waitingThreads.addLast(waitingThread);//将线程包装类 添加到全局连接池的 等待列表中
                      connectionPool.wait(timeToWait);//沉睡
                  } catch (InterruptedException e) {
                         //被打断是检查 布尔变量interruptedByConnectionPool 确定是 HTTP 释放连接后 主动打断的，还是其他异常原因打断
                         //是自己打断的 catch住异常后什么也不做，重新进入while循环中，尝试获取连接
                           if (!waitingThread.interruptedByConnectionPool) {
                               throw new IllegalThreadStateException("Interrupted while waiting in MultiThreadedHttpConnectionManager");
                           }
                  } finally {
                      if (!waitingThread.interruptedByConnectionPool) {
                          hostPool.waitingThreads.remove(waitingThread);
                          connectionPool.waitingThreads.remove(waitingThread);
                      }
                      if (useTimeout) {
                          endWait = System.currentTimeMillis ();
                          timeToWait -= (endWait - startWait);
                      }
                  }
              }
          }
      }</pre>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;"><strong>释放连接时</strong></span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">调用<span>notifyWaitingThread </span>方法，结合上面的代码看：</span></p>
<p class="MsoNormal"> </p>
<pre class="java" name="code"> public synchronized void notifyWaitingThread(HostConnectionPool hostPool) {
 
         // find the thread we are going to notify, we want to ensure that each
         // waiting thread is only interrupted once so we will remove it from
         // all wait queues before interrupting it
         WaitingThread waitingThread = null;
         // 取出 等待的线程后发送     interrupt 信号量，
        
         if (hostPool.waitingThreads.size() &gt; 0) {
            
             waitingThread = ( WaitingThread) hostPool.waitingThreads.removeFirst();
             waitingThreads.remove(waitingThread);
         } else if (waitingThreads .size() &gt; 0) {
            
             waitingThread = ( WaitingThread) waitingThreads.removeFirst();
             waitingThread.hostConnectionPool.waitingThreads.remove(waitingThread);
         }
         // 导致 获取连接的那个方法中 捕获异常
         // 注：interrupt 信号量是一定会引起 interruptException的
         // 将interruptedByConnectionPool 设置为true 好标明 是 HTTP client 手动打断的。 这是HTTP client对于等待线程唤醒方式的核心思路
         if (waitingThread != null) {
             waitingThread.interruptedByConnectionPool = true;
             waitingThread.thread.interrupt();
         }
     }</pre>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><strong><span> <br></span></strong></span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">上面两端代码主要思路就是<span>: </span>有空连接就直接用，没有则沉睡等待唤醒。</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">其实用<span>interrupt</span>信号量 会引起<span>interruptException</span>异常，通过<span>catch</span>住异常来处理，是比较粗暴的。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">优雅的用<span> wait and notify</span>的方式 就不需要<span>catch</span>异常，同样能达到唤醒线程效果，而且很优雅。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;"><strong><span>MultiThreadedHttpConnectionManager  </span></strong><strong>中对弱引用的使用</strong></span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>MultiThreadedHttpConnectionManager  </span>类中 还有一个<span> ReferenceQueueThread</span>类 是用来配合<span>HttpConnectionWithReference</span>（将连接用弱引用包裹后的对象）使用的</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"><img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7132/d18cec7b-bd12-3c3e-932a-ca98b0233a52.png"><br> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">使用的方式是这样：</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>1. </span>创建连接时，用弱引用包裹住<span>Connection</span>对象放到<em><span>REFERENCE_TO_CONNECTION_SOURCE  </span></em>中，目的是防止在连接丢失的时候<span>Map</span>中的这个<span>HttpConnectionWithReference </span>对象变成弱引用，</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>     </span>在<span>GC</span>回收时会被回收掉，防止内存泄露。</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>2. </span>首先明确的是，<span>JVM</span>会在<span>HttpConnectionWithReference </span>被回收的时候，将他加入到<span>REFERENCE_QUEUE </span>中。这是<span>JAVA</span>对于弱引用的规则。</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>3. </span>同时，在将<span>HttpConnectionWithReference  </span>放入<span>Map</span>时，启动一个子线程<span> ReferenceQueueThread  </span>去监听 这个<span>REFERENCE_QUEUE </span>，只要这个<span>REFERENCE_QUEUE  </span>有值（被<span>GC</span>回收的时候）</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>     </span>立马被取出来，将线程池可用连接的大小<span> -1 </span>。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>MultiThreadedHttpConnectionManager  </span>使用弱引用 确保了</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>1. connection</span>对象丢失时 内存的及时回收。</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>2. </span>搭配队列和子线程确保，连接丢失后线程池中可用连接数的次数可以修改。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">说到这里，<span>HTTP Client</span>的<span>MultiThreadedHttpConnectionManager  </span>类的绝大部分分方法已经解释完毕了。其中主要是省略掉了，发送和读取<span>HTTP </span>报文的代码，没有太多技巧，以规则解析出来即可。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;"><strong>总结：</strong></span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>1. </span>在单纯的发送请求的场景下，使用<span>MultiThreadedHttpConnectionManager </span>来代替<span>SimpleHTTPConnectionManger</span>是可行的，并且<span>MultiThreadedHttpConnectionManager </span>的连接池机制也会提高发送请求的效率，</span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"><span>2. </span>但是觉得不符合分布式应用间的借口调用，原因很简单，对每个<span>host</span>做了连接池，在一定情况下，这个限制是致命的，直接影响了接口的调用效率。严重影响调用的并发数。所以，在分布式应用的调用中不适合使用<span>MultiThreadedHttpConnectionManager </span>。</span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;"><strong><span>MultiThreadedHttpConnectionManager</span></strong><strong>类中几个值得注意的点：</strong></span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;"><strong><span>1. </span></strong><strong>连接的管理，特别是使用<span>WeakReference</span>包装<span>Connection</span>对象，然后结合一个子线程和<span>Queque</span>去确保对象被回收时，可以连接数的增加。</strong></span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;"><strong><span>2. </span></strong><strong>对于没有连接可用时，使用使当前线程睡眠的，在释放连接时 使用<span> </span></strong><strong><span>interrupt</span></strong><strong>信号量 是等待线程恢复的处理方式</strong></span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;"> </span></p>
<p class="MsoNormal"><span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;"> </span></p>
</div>

  

  <div>
    <!-- 广告位：PC端-iteye博客详情页底部banner2-728*90 -->
    <script>
      (function() {
          var s = "_" + Math.random().toString(36).slice(2);
          document.write('<div id="' + s + '"></div>');
          (window.slotbydup=window.slotbydup || []).push({
              id: '4774193',
              container: s,
              size: '728,90',
              display: 'inlay-fix'
          });
      })();
      jQuery(function(){
        window.csdn.recommendSide({
          contentBox: "recommend",
          postBox: jQuery(".news-right-side"),
          query:'HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析',
          popu:'725'
        })
      });
    </script>
  </div>



  <div id="bottoms" class="clearfix">
    
    <div id="share_weibo">分享到：
      <a data-type='sina' href="javascript:;" title="分享到新浪微博"><img src="/images/sina.jpg"></a>
      <a data-type='qq' href="javascript:;" title="分享到腾讯微博"><img src="/images/tec.jpg"></a>
    </div>
  </div>

  <div class="blog_nav">
    <div class="pre_next">
      <a href="/blog/1917545" class="next" title="Mysql主从同步配置">Mysql主从同步配置</a>
      |
      <a href="/blog/1662857" class="pre" title="java中wait 信号量和notify信号量的使用">java中wait 信号量和notify信号量的使用</a>
    </div>
  </div>
  <div class="blog_bottom">
    <ul>
      <li>2013-06-13 16:35</li>
      <li>浏览 29526</li>
      <li><a href="#comments">评论(4)</a></li>
      
      
      <li>分类:<a href="https://www.iteye.com/blogs/category/opensource">开源软件</a></li>      
      <li class='last'><a href="https://www.iteye.com/wiki/blog/1886237" target="_blank" class="more">查看更多</a></li>
    </ul>    
  </div>
    
  <div class="blog_comment">
    <h5>评论</h5>
    <a id="comments" name="comments"></a>
    <div id="bc2315317">
  <div class="comment_title">
    4 楼
    <a href='https://liuinsect.iteye.com' target='_blank' title='liuInsect'>liuInsect</a>
    2013-06-15&nbsp;&nbsp;
    
    
  </div>
  <div class="comment_content"><div class="quote_title">ziwuzu 写道</div><div class="quote_div"><div class="quote_title">liuInsect 写道</div><div class="quote_div"><div class="quote_title">ziwuzu 写道</div><div class="quote_div">为什么不适合分布式应用？有什么效率问题？</div><br /><br />在没有一个统一的 远程调用框架的时候 用HTTP Client 是可以的，或者说只能用HTTP Client<br /><br />但是使用这种连接池的Manager 不合适的原因是 它的连接池 是基于Host的。同一个Host的最大请求量受连接池大小限制。 你说适合分布式环境么？<br /><br /><br /></div><br />如果是连接池大小的问题，可以修改连接池的大小。</div><br /><br /><br />但是它低连接数的时候几十个，高并发的时候 峰值成百上千个，怎么搞？<br />是不是都因为设置的这个值阻塞在这里了~？<br /></div>
</div>

<div id="bc2315302">
  <div class="comment_title">
    3 楼
    <a href='https://ziwuzu.iteye.com' target='_blank' title='ziwuzu'>ziwuzu</a>
    2013-06-15&nbsp;&nbsp;
    
    
  </div>
  <div class="comment_content"><div class="quote_title">liuInsect 写道</div><div class="quote_div"><div class="quote_title">ziwuzu 写道</div><div class="quote_div">为什么不适合分布式应用？有什么效率问题？</div><br /><br />在没有一个统一的 远程调用框架的时候 用HTTP Client 是可以的，或者说只能用HTTP Client<br /><br />但是使用这种连接池的Manager 不合适的原因是 它的连接池 是基于Host的。同一个Host的最大请求量受连接池大小限制。 你说适合分布式环境么？<br /><br /><br /></div><br />如果是连接池大小的问题，可以修改连接池的大小。</div>
</div>

<div id="bc2315161">
  <div class="comment_title">
    2 楼
    <a href='https://liuinsect.iteye.com' target='_blank' title='liuInsect'>liuInsect</a>
    2013-06-14&nbsp;&nbsp;
    
    
  </div>
  <div class="comment_content"><div class="quote_title">ziwuzu 写道</div><div class="quote_div">为什么不适合分布式应用？有什么效率问题？</div><br /><br />在没有一个统一的 远程调用框架的时候 用HTTP Client 是可以的，或者说只能用HTTP Client<br /><br />但是使用这种连接池的Manager 不合适的原因是 它的连接池 是基于Host的。同一个Host的最大请求量受连接池大小限制。 你说适合分布式环境么？<br /><br /><br /></div>
</div>

<div id="bc2315157">
  <div class="comment_title">
    1 楼
    <a href='https://ziwuzu.iteye.com' target='_blank' title='ziwuzu'>ziwuzu</a>
    2013-06-14&nbsp;&nbsp;
    
    
  </div>
  <div class="comment_content">为什么不适合分布式应用？有什么效率问题？</div>
</div>


    
    
  </div>

  <div class="blog_comment">
    <h5>发表评论</h5>
            <p style="text-align:center; margin-top:30px;margin-bottom:0px;"><a href="/login" style="background-color:white;"> <img src="/images/login_icon.png" style="vertical-align:middle; margin-right: 10px;" /></a><a href="/login">  您还没有登录,请您登录后再发表评论 </a></p>
      </div>
  </div>
  
      
<div class="boutique-curr-box blog_comment">
	  <div class="boutique-curr clearfix" id="album_detail_wrap">
	    <h5 class="h3titles">相关资源推荐</h5>
			<ul style="margin-top: 8px" class="clearfix">
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/kobejayandy/article/details/16921265" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/kobejayandy/article/details/16921265,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/kobejayandy/article/details/16921265,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient多线程并发问题"><em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>多线程并发问题</a>
              <p>
                这篇文章概括了怎样在多线程环境下安全的使用<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>。
建立<em class='related_suggestion_highlight'>连接</em>

在<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>中使用多线程的一个主要原因是可以一次执行多个方法。在执行期间，每一个方法都使用一个<em class='related_suggestion_highlight'>Http</em>Connection实例。由于在同一时间多个<em class='related_suggestion_highlight'>连接</em>只能安全地用于单一线程和方法和有限的资源，我们就必须确保<em class='related_suggestion_highlight'>连接</em>分配给正确的方法。而<em class='related_suggestion_highlight'>MultiThreadedHttpConnectionManager</em>完全可以
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/hitustc/article/details/4843670" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/hitustc/article/details/4843670,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/hitustc/article/details/4843670,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="[转载]HTTPCLIENT性能调优">[转载]<em class='related_suggestion_highlight'>HTTP</em><em class='related_suggestion_highlight'>CLIENT</em>性能调优</a>
              <p>
                 <em class='related_suggestion_highlight'>http</em><em class='related_suggestion_highlight'>client</em>的默认配置提供了最大的可靠性和标准的遵守，而不是性能。（哪个标准？难道是指<em class='related_suggestion_highlight'>HTTP</em>协议规范？）有几个配置选项和优化技术，可以显着提高<em class='related_suggestion_highlight'>http</em><em class='related_suggestion_highlight'>client</em> 的性能表现。 本文档给出了对<em class='related_suggestion_highlight'>http</em><em class='related_suggestion_highlight'>client</em>如何调优的大纲。1.重用<em class='related_suggestion_highlight'>HTTP</em><em class='related_suggestion_highlight'>CLIENT</em>实例。          一般说来，建议一个通讯组件，甚至说一个应用软件就始终维持一个<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>对象实例存在。
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/u011402596/article/details/44619443" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/u011402596/article/details/44619443,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/u011402596/article/details/44619443,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient 多线程处理"><em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em> 多线程处理</a>
              <p>
                为什么要使用单例<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>？在发出<em class='related_suggestion_highlight'>HTTP</em>请求前，我们先创建了一个<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>对象。那么，在实际项目中，我们很可能在多处需要进行<em class='related_suggestion_highlight'>HTTP</em>通信，这时候我们不需要为每个请求都创建一个新的<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>。因为<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>就像一个小型的浏览器，对于整个应用，我们只需要一个<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>就够了。看到这里，一定有人心里想，这有什么难的，用单例啊！！那么，哪里不对劲呢？或者说
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/genius5200/article/details/7875334" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/genius5200/article/details/7875334,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/genius5200/article/details/7875334,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="Httpclient默认连接数导致性能瓶颈问题"><em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>client</em>默认<em class='related_suggestion_highlight'>连接</em>数导致性能瓶颈问题</a>
              <p>
                <em class='related_suggestion_highlight'>Http</em>ConnectionManager <em class='related_suggestion_highlight'>http</em>ConnectionManager = new <em class='related_suggestion_highlight'>MultiThreadedHttpConnectionManager</em>();
        <em class='related_suggestion_highlight'>Http</em>ConnectionManagerParams params = <em class='related_suggestion_highlight'>http</em>ConnectionManager.getParams();
        params.setConnectionTi
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/chuchus/article/details/50594664" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/chuchus/article/details/50594664,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/chuchus/article/details/50594664,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpComponents 之客户端连接池"><em class='related_suggestion_highlight'>Http</em>Components 之客户端<em class='related_suggestion_highlight'>连接</em>池</a>
              <p>
                1.配置参数
org.apache.<em class='related_suggestion_highlight'>http</em>.impl.conn.Pooling<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>ConnectionManager
类。用于管理<em class='related_suggestion_highlight'>http</em><em class='related_suggestion_highlight'>Client</em><em class='related_suggestion_highlight'>连接</em>池。调用默认构造函数即可得到。
org.apache.<em class='related_suggestion_highlight'>http</em>.impl.conn.Pooling<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>ConnectionManager.setMaxTotal(int max)

设置最大的<em class='related_suggestion_highlight'>连接</em>数，即
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/qq_30366667/article/details/81675644" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_30366667/article/details/81675644,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_30366667/article/details/81675644,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="SparkSession 内部原理就简单解析">SparkSession 内部原理就简单<em class='related_suggestion_highlight'>解析</em></a>
              <p>
                自己下一个<em class='related_suggestion_highlight'>源码</em>看到导的包就知道里面包含了很多内容

import java.io.Closeable
import java.util.concurrent.atomic.AtomicReference

import scala.collection.JavaConverters._
import scala.reflect.runtime.universe.TypeTag
import sca...
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/qijiqiguai/article/details/76034847" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76034847,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76034847,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient源码解析系列：第二篇：极简版实现"><em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em><em class='related_suggestion_highlight'>源码</em><em class='related_suggestion_highlight'>解析</em>系列：第二篇：极简版实现</a>
              <p>
                从Minimal<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>从名字可以看出，是一个极简可以用的版本，是核心设计的原初模型。所以我们就从最精简的开始分析。
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/dwater/article/details/1811414" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/dwater/article/details/1811414,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/dwater/article/details/1811414,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="解读开源软件的七种盈利模式">解读<em class='related_suggestion_highlight'>开源软件</em>的七种盈利模式</a>
              <p>
                法律条款都公开，但律师照样赚钱! 医学知识都公开，但医生照样赚钱! 软件行业由于其技术的特殊性，软件存在源代码与二进制代码之分，存在编译过程。导致源代码一直成为盈利的一个新卖点。但任何行业都一样，都存在一个发展和变迁的过程。软件行业也是如此。如今<em class='related_suggestion_highlight'>开源软件</em>已经在全球范围内迅猛发展。开源产品已经完全可以替代现有商业软件。包括操作系统Linux，浏览器FireFox，开源ERP/CRM信息化方案，服
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/u012469740/article/details/59191309" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/u012469740/article/details/59191309,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/u012469740/article/details/59191309,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="CobarClient源码分析">Cobar<em class='related_suggestion_highlight'>Client</em><em class='related_suggestion_highlight'>源码</em>分析</a>
              <p>
                前言
Cobar <em class='related_suggestion_highlight'>Client</em>是一个阿里开源的轻量级分布式数据访问层，基于Ibatis和Spring框架。
最近公司的项目在分表分库时使用此框架，起初不明白为什么使用这么老，没人维护的开源框架。后来想想是根据现有代码，迁移起来简单吧。

既然用了，就还是仔细看下，深入的了解一下Cobar<em class='related_suggestion_highlight'>Client</em>的原理吧。


正文
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/qijiqiguai/article/details/76213018" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76213018,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76213018,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient源码解析系列：第三篇：发送-接收的底层过程"><em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em><em class='related_suggestion_highlight'>源码</em><em class='related_suggestion_highlight'>解析</em>系列：第三篇：发送-接收的底层过程</a>
              <p>
                DefaultB<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>Connection，而它又是继承自B<em class='related_suggestion_highlight'>Http</em>ConnectionBase 来看 <em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em> 的Socket交互流程<em class='related_suggestion_highlight'>源码</em>。
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/aiqing0119/article/details/48468215" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/aiqing0119/article/details/48468215,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/aiqing0119/article/details/48468215,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="﻿﻿http连接池使用">﻿﻿<em class='related_suggestion_highlight'>http</em><em class='related_suggestion_highlight'>连接</em>池使用</a>
              <p>
                <em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>4.X 升级 入门 + <em class='related_suggestion_highlight'>http</em><em class='related_suggestion_highlight'>连接</em>池使用



<em class='related_suggestion_highlight'>http</em>://blog.csdn.net/shootyou/article/details/6415248






在一次服务器异常的排查过程当中（服务器异常排查的过程我会另起文章），我们决定使用<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>4.X替代<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>3.X或者<em class='related_suggestion_highlight'>Http</em>Connection。
为什么使用Ht
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/phantom_111/article/details/76688252" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/phantom_111/article/details/76688252,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/phantom_111/article/details/76688252,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="gRPC-transport包源码分析">gRPC-transport包<em class='related_suggestion_highlight'>源码</em>分析</a>
              <p>
                gRPC是基于<em class='related_suggestion_highlight'>HTTP</em>/2标准和proto协议开发的，gRPC的很多特性都依赖于<em class='related_suggestion_highlight'>HTTP</em>/2标准提供。gRPC设计的四种模式是基于底层<em class='related_suggestion_highlight'>HTTP</em>/2的流的概念。transport包是基于<em class='related_suggestion_highlight'>HTTP</em>/2标准的实现，提供了流控等特性。流控transport提供基于connection和stream的两级流控。-------------------------------------gRPC流控默认值----
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/qijiqiguai/article/details/76034767" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76034767,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76034767,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient源码解析系列：第一篇：总览"><em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em><em class='related_suggestion_highlight'>源码</em><em class='related_suggestion_highlight'>解析</em>系列：第一篇：总览</a>
              <p>
                <em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em><em class='related_suggestion_highlight'>源码</em><em class='related_suggestion_highlight'>解析</em>系列：第一篇：总览。
最最核心的<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>接口。
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/cpzhong/article/details/7417336" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/cpzhong/article/details/7417336,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/cpzhong/article/details/7417336,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="Httpclient的会话保持引起的线程安全问题"><em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>client</em>的会话保持引起的<em class='related_suggestion_highlight'>线程安全</em>问题</a>
              <p>
                这两天线上出现一个问题，通过<em class='related_suggestion_highlight'>http</em><em class='related_suggestion_highlight'>client</em>来抓取页面，服务端在页面渲染的时候出现了串号现象。
首先看下代码，controller中代码如下：
request.getSession().setAttribute(&quot;sid&quot;, id);
vm页面再通过$!request.session.getAttribute(&quot;sid&quot;)获取参数值，这代码很常见，看起来单线程和多线程并发都不会有问题，因
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/yi_master/article/details/80511767" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/yi_master/article/details/80511767,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/yi_master/article/details/80511767,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="彻底掌握网络通信（四）Android源码中HttpClient的发送框架解析">彻底掌握网络通信（四）Android<em class='related_suggestion_highlight'>源码</em>中<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>的发送框架<em class='related_suggestion_highlight'>解析</em></a>
              <p>
                前面简单说了下<em class='related_suggestion_highlight'>http</em><em class='related_suggestion_highlight'>client</em>在不同android版本的配置，这篇主要介绍下Android中<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>的执行全流程
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/fishmai/article/details/51786291" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/fishmai/article/details/51786291,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/fishmai/article/details/51786291,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="开源软件架构－GDB"><em class='related_suggestion_highlight'>开源软件</em>架构－GDB</a>
              <p>
                GDB，即GNU调试器(GNU Debugger)。它诞生自<em class='related_suggestion_highlight'>开源软件</em>基金会 (Free Software Foundation)成立之初的第一批程序，并一直是免费和<em class='related_suggestion_highlight'>开源软件</em>系统中的主要成员。最初GDB只是 Unix 系统上一个简单的<em class='related_suggestion_highlight'>源码</em>层次的调试器，代码量不过数千行 C 代码，后来逐步发展壮大，拓展到包括嵌入式系统在内多个平台，代码量也达到了上百万行。


原文地址：<em class='related_suggestion_highlight'>http</em>://aosab
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/yan8024/article/details/46456375" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/yan8024/article/details/46456375,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/yan8024/article/details/46456375,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="使用线程安全的单例模式HttpClient，及HttpClient和Application的融合">使用<em class='related_suggestion_highlight'>线程安全</em>的单例模式<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>，及<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>和Application的融合</a>
              <p>
                上文简单介绍了<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>和Tomcat服务器的交互，主角是<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>,然后它跟服务器交互有两种方式即get和post。所以这个<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>就类似于电脑上用的浏览器。当我打开多个网页的时候，并不需要开一个网页就开一个浏览器，而是一个浏览器上面开了好几个网页。对应于<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>，即无需<em class='related_suggestion_highlight'>连接</em>一次就new一个<em class='related_suggestion_highlight'>Http</em><em class='related_suggestion_highlight'>Client</em>。一般，我们希望一个应用里就一个<em class='related_suggestion_highlight'>Http</em>C
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/kifile/article/details/57572258" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/kifile/article/details/57572258,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/kifile/article/details/57572258,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="ZooKeeper源码学习笔记(1)--client端解析">ZooKeeper<em class='related_suggestion_highlight'>源码</em>学习笔记(1)--<em class='related_suggestion_highlight'>client</em>端<em class='related_suggestion_highlight'>解析</em></a>
              <p>
                ZooKeeper <em class='related_suggestion_highlight'>源码</em>学习笔记(1)  <em class='related_suggestion_highlight'>client</em>
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/xgjianstart/article/details/70143365" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/xgjianstart/article/details/70143365,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/xgjianstart/article/details/70143365,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="elasticsearch源码分析之Rest/RPC 接口解析(八)">elasticsearch<em class='related_suggestion_highlight'>源码</em>分析之Rest/RPC 接口<em class='related_suggestion_highlight'>解析</em>(八)</a>
              <p>
                一些基础知识

早先ES的<em class='related_suggestion_highlight'>HTTP</em>协议支持还是依赖Jetty的,现在不管是Rest还是RPC都是直接基于Netty了。

另外值得一提的是，ES 是使用Google的Guice 进行模块管理，所以了解Guice的基本使用方式有助于你了解ES的代码组织。

ES 的启动类是 org.elasticsearch.bootstrap.Bootstrap。在这里进行一些配置和环境初始化后会启动
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/flying_panda/article/details/45045881" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/flying_panda/article/details/45045881,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/flying_panda/article/details/45045881,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="zookeeper进阶（一）客户端建立连接及相应的源码分析">zookeeper进阶（一）客户端建立<em class='related_suggestion_highlight'>连接</em>及相应的<em class='related_suggestion_highlight'>源码</em>分析</a>
              <p>
                目录
zookeeper创建node 一个简单的实现 
对应<em class='related_suggestion_highlight'>源码</em>分析
zookeeper客户端建立<em class='related_suggestion_highlight'>连接</em>package zk;
import java.io.IOException;
import java.util.concurrent.CountDownLatch;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookee
              </p>
						</li>
				
			</ul>
	  </div>
</div>

    

</div>


<script type="text/javascript">
  dp.SyntaxHighlighter.HighlightAll('code', true, true);

  $$('#main .blog_content pre[name=code]').each(function(pre, index){ // blog content
    var post_id = 1886237;
    var location = window.location;
    source_url = location.protocol + "//" + location.host + location.pathname + location.search;
    pre.writeAttribute('codeable_id', post_id);
    pre.writeAttribute('codeable_type', "Blog");
    pre.writeAttribute('source_url', source_url);
    pre.writeAttribute('pre_index', index);
    pre.writeAttribute('title', 'HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析');
  });

  fix_image_size($$('div.blog_content img'), 700);

  function processComment() {
    $$('#main .blog_comment > div').each(function(comment){// comment
      var post_id = comment.id.substr(2);
      $$("#"+comment.id+" pre[name=code]").each(function(pre, index){
        var location = window.location;
        source_url = location.protocol + "//" + location.host + location.pathname + location.search;
        source_url += "#" + comment.id;
        pre.writeAttribute('codeable_id', post_id);
        pre.writeAttribute('codeable_type', "BlogComment");
        pre.writeAttribute('source_url', source_url);
        pre.writeAttribute('pre_index', index);
        pre.writeAttribute('title', 'HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析');
      });
    });
  }

  function quote_comment(id) {
    new Ajax.Request('/editor/quote', {
      parameters: {'id':id, 'type':'BlogComment'},
      onSuccess:function(response){editor.bbcode_editor.textarea.insertAfterSelection(response.responseText);
        Element.scrollTo(editor.bbcode_editor.textarea.element);}
    });
  }

  code_favorites_init();
  processComment();
  new WeiboShare({share_buttons: $('share_weibo'), img_scope: $('blog_content')});
</script>




      </div>
      
        <div class="blog-sidebar">
          <div class="blog-sidebar-fixed">
            <div class="news-right-side">

            </div>
            <div class="persion_article">

            </div>
          </div>
        </div>
            <script>
        setTimeout(function () {
          var naviga_offsetTop = 0;

          function onload_function() {
            naviga_offsetTop = jQuery("#nav_show_top_stop").position().top;
            jQuery(window).bind("scroll", naviga_stay_top);
            jQuery(window).bind("mousewheel", naviga_stay_top);
            jQuery(document).bind("scroll", naviga_stay_top);
            jQuery(document).bind("mousewheel", naviga_stay_top);
          }

          function naviga_stay_top() {

            var scrollTop = jQuery(document).scrollTop();
            if (scrollTop > (naviga_offsetTop + 250)) {
              jQuery("#nav_show_top_stop").css({
                "position": "fixed"
              });
              jQuery("#nav_show_top_stop").css({
                "top": "0px"
              });
            } else {
              jQuery("#nav_show_top_stop").css({
                "position": "fixed"
              });
              jQuery("#nav_show_top_stop").css({
                "top": naviga_offsetTop + 250 - scrollTop + "px"
              });
            }
          }
          jQuery(document).ready(onload_function());
        }, 200);
      </script>
    </div>
          <script>
          setTimeout(function () {
              not_loading = true;
              pageNum = 3;
              oList = jQuery("#album_detail_wrap");
              jQuery(window).scroll(function() {
                  var scrollTop = jQuery(this).scrollTop();
                  var scrollHeight = jQuery(document).height() ;
                  var windowHeight = jQuery(this).height();
                  if (scrollTop + windowHeight >= scrollHeight) {
                      if(not_loading){
                          refreshMore();
                          setTimeout(function(){
                              getMore();
                          },100);
                      }else{
                          jQuery(".dl_more").remove();
                      }
                  }
              });

              function getMore(){
                  not_loading = false;
                  console.log("getMore......");
                  jQuery.ajax({
                      type: 'get',
                      url: "/blog/ajax_get_blog_recommends/1886237",
                      data:{
                          page:pageNum
                      },
                      //async: false,
                      dataType: 'json',
                      success: function (resobj) {
                          var totalNum = resobj.total_pages;
                          if(pageNum <= totalNum && resobj.oHtml != '' ){
                              jQuery(".dl_more").remove();
                              oList.find('ul').append(resobj.oHtml);
                              refreshMore();
                              not_loading = true;
                              pageNum++;
                          }else{
                              not_loading = false;
                              noMore();
                          }
                      },
                      error: function (err) {
                          console.log(err);
                      }
                  });
              }

              function noMore(){
                  jQuery(".dl_more").remove();
                  if(oList.find(".dl_no_more").length ==0){
                      oList.append('<div class="dl_no_more" style="font-size:14px; color:#0F8AC6; text-align:center;padding-top:10px; ">我们是很有底线的</div>');
                  }
              }

              function refreshMore(){
                  if(oList.find(".dl_more").length ==0){
                      oList.append('<div class="dl_more" style="font-size:14px; color:#0F8AC6; text-align:center;padding-top:10px;">上滑加载更多</div>');
                  }
              }
          }, 200);
      </script>
  
    <div id="footer" class="clearfix">
      <!-- <div id="copyright">
        <hr />
        声明：ITeye文章版权属于作者，受法律保护。没有作者书面许可不得转载。若作者同意转载，必须以超链接形式标明文章原始出处和作者。<br />
        &copy; 2003-
        2019 ITeye.com. All rights reserved. [ 京ICP证110151号 京公网安备110105010620 ]
      </div> -->
      <div id="ad_pop">
        <div class="J_adv" data-view="true" data-mod="ad_popu_64" data-mtp="62" data-order="21" data-con="ad_content_2070">
          <script id="popuLayer_js_q" src="https://ads.csdn.net/js/popuLayer.js" defer="" type="text/javascript"></script>
          <!-- 广告位：PC端-iteye博客详情右侧弹窗-300*250 -->
          
          
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript">
  document.write("<img src='https://stat.iteye.com/?url="+ encodeURIComponent(document.location.href) + "&referrer=" + encodeURIComponent(document.referrer) + "&user_id=' width='0' height='0' />");
</script>



   Global site tag (gtag.js) - Google Analytics
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-127895514-6"></script>
  <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'UA-127895514-6');
  </script>

  
  
  <link href="//csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css" rel="stylesheet" >
<script src="//csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js" type="text/javascript"></script>
<script src="https://csdnimg.cn/pubfooter/js/publib_footer-1.0.3.js" data-isfootertrack="false" type="text/javascript"></script>
<script id="csdn-toolbar-id" btnId="header_notice_num" wrapId="note1" count="5" subCount="5" type="text/javascript" src="//csdnimg.cn/public/common/toolbar/js/content_toolbar.js"></script>
<script src="//csdnimg.cn/asdf/tracking-1.0.1.js" type="text/javascript"></script>
<script language="javascript" type="text/javascript" src="//csdnimg.cn/asdf/async-1.0.1.js"></script>
<script type="text/javascript" charset="utf-8" src="https://g.csdnimg.cn/track/1.2.2/track.js"></script>
<style>
  .userinfo {display: none !important;}
  .persion_article h3{
    background: none !important;
    border-bottom: none!important;
    padding: 0!important;
    margin-bottom: 0!important;
    line-height: 1!important;
  }
  .persion_article .right_box{
    margin-top: 0!important;
  }
  .persion_article .footer_box .feed_new_tit span{
    padding-left: 0!important;
  }
</style>
<script>
(function($){
  var windowHeight = $(window).height(),
      contentHeight = $(".hide-main-content").height()
      windowHeight = windowHeight * 1.2 //获得可视区域高度
      if(contentHeight > windowHeight){
        $(".hide-article-box").show()
        $(".hide-main-content").css({'height': windowHeight,'overflow':'hidden'})
        $(".hide-article-box").find("#btn-readmore").click(function(){
          $(this).parents('.hide-main-content').removeAttr('style')
          $(this).parent().hide()
        })
      }
})(jQuery)
</script>
<script type="text/javascript">var $csdn_iteye_jq = jQuery.noConflict();// 解决jq与prototype.js命名空间冲突的问题</script>
  
  
  <script src="https://www.iteye.com/javascripts/web-storage-cache.min.js?1461122670" type="text/javascript"></script>
  <script src="https://www.iteye.com/javascripts/replace.min.js?1517972556" type="text/javascript"></script>
  

</body>
<script>
  var jQuery = jQuery.noConflict();
  setTimeout(function($){
    window.csdn.fixedSidebar({
        targetBox: $('.persion_article'), //判断到达底部的div,公共footer可选 $('.persion_article'),$('.public_pc_right_footer2018')
        mainBox: $("#main"), //侧边栏旁边的主体div,默认 $("main")
        sidebar: $(".blog-sidebar-fixed"), //侧边栏,默认 $("aside")
        direction: 'right', //侧边栏浮动方向,可选'right','left',
        position: 'fixed',//定位方式
        bottom: 0,
        zIndex: 99,
        sidebarRightMargin: 8,//direction为left,侧边栏距离mainbox的右边距
        sidebarLeftMargin: 37,//direction为right,侧边栏距离mainbox的左边距
    })
  },200,jQuery)
  </script>
</html>

[INFO] [2019-02-01 11:34:59][com.loris.soccer.net.App]Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0
[WARN] [2019-02-01 11:38:40][org.apache.commons.httpclient.HttpMethodBase]Cookie rejected: "$Version=0; _javaeye_cookie_id_=1548992320669528; $Path=/; $Domain=iteye.com". Domain attribute "iteye.com" violates RFC 2109: domain must start with a dot
[INFO] [2019-02-01 11:38:40][com.loris.soccer.net.App]Success to download: https://liuinsect.iteye.com/blog/1886237
[INFO] [2019-02-01 11:40:39][com.loris.client.fetcher.impl.AbstractWebFetcher]Initializing the WebFetcher...
[WARN] [2019-02-01 11:40:39][org.apache.commons.httpclient.HttpMethodBase]Cookie rejected: "$Version=0; _javaeye_cookie_id_=1548992439662748; $Path=/; $Domain=iteye.com". Domain attribute "iteye.com" violates RFC 2109: domain must start with a dot
[INFO] [2019-02-01 11:40:39][com.loris.soccer.net.App]Success to download: https://liuinsect.iteye.com/blog/1886237
[WARN] [2019-02-01 11:41:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:41:03][com.gargoylesoftware.htmlunit.javascript.host.dom.Document]Nothing done for execCommand(BackgroundImageCache, ...) (feature not implemented)
[WARN] [2019-02-01 11:41:03][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:41:03][com.gargoylesoftware.htmlunit.javascript.host.css.CSSStyleSheet]Unhandled CSS condition type 'PREFIX_ATTRIBUTE_CONDITION'. Accepting it silently.
[ERROR] [2019-02-01 11:41:03][com.gargoylesoftware.htmlunit.javascript.StrictErrorReporter]runtimeError: message=[An invalid or illegal selector was specified (selector: '*,:x' error: Invalid selector: *:x).] sourceName=[https://csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js] line=[2] lineSource=[null] lineOffset=[0]
[WARN] [2019-02-01 11:41:03][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:41:03][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:41:03][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:41:03][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:41:03][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:41:03][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:41:03][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:41:03][com.gargoylesoftware.htmlunit.html.HtmlScript]Script is not JavaScript (type: application/ld+json, language: ). Skipping execution.
[WARN] [2019-02-01 11:41:04][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:41:04][com.gargoylesoftware.htmlunit.javascript.host.css.CSSStyleSheet]Unhandled CSS condition type 'PREFIX_ATTRIBUTE_CONDITION'. Accepting it silently.
[ERROR] [2019-02-01 11:41:04][com.gargoylesoftware.htmlunit.javascript.StrictErrorReporter]runtimeError: message=[An invalid or illegal selector was specified (selector: '*,:x' error: Invalid selector: *:x).] sourceName=[https://csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js] line=[2] lineSource=[null] lineOffset=[0]
[WARN] [2019-02-01 11:41:04][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:41:04][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:41:04][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:41:04][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 11:41:04][com.gargoylesoftware.htmlunit.NicelyResynchronizingAjaxController]Re-synchronized call to https://pv.csdn.net/csdnbi
[WARN] [2019-02-01 11:41:05][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:41:05][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:41:05][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 11:41:05][com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine]Caught script exception
======= EXCEPTION START ========
EcmaError: lineNumber=[1] column=[0] lineSource=[<no source>] name=[TypeError] sourceName=[https://csdnimg.cn/search/baidu_opensug-1.0.0.js] message=[TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)]
com.gargoylesoftware.htmlunit.ScriptException: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:892)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:772)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:748)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.loadExternalJavaScriptFile(HtmlPage.java:995)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:371)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:47)
	at com.loris.soccer.net.App.main(App.java:25)
Caused by: net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.notFunctionError(ScriptRuntime.java:4369)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2597)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.exec(InterpretedFunction.java:123)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$2.doRun(JavaScriptEngine.java:763)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	... 34 more
Enclosed exception: 
net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.notFunctionError(ScriptRuntime.java:4369)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2597)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at script.i(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script.a(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.exec(InterpretedFunction.java:123)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$2.doRun(JavaScriptEngine.java:763)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:772)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:748)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.loadExternalJavaScriptFile(HtmlPage.java:995)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:371)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:47)
	at com.loris.soccer.net.App.main(App.java:25)
======= EXCEPTION END ========
[INFO] [2019-02-01 11:41:05][com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine]Caught script exception
======= EXCEPTION START ========
EcmaError: lineNumber=[889] column=[0] lineSource=[null] name=[TypeError] sourceName=[https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js] message=[TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)]
com.gargoylesoftware.htmlunit.ScriptException: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:892)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.executeEventLocally(EventTarget.java:101)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeEvent(HtmlScript.java:412)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:378)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:47)
	at com.loris.soccer.net.App.main(App.java:25)
Caused by: net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.undefCallError(ScriptRuntime.java:4312)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2586)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$3.doRun(JavaScriptEngine.java:814)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	... 38 more
Enclosed exception: 
net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.undefCallError(ScriptRuntime.java:4312)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2586)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at script(https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js:889)
	at script(https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js:881)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$3.doRun(JavaScriptEngine.java:814)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.executeEventLocally(EventTarget.java:101)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeEvent(HtmlScript.java:412)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:378)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:47)
	at com.loris.soccer.net.App.main(App.java:25)
== CALLING JAVASCRIPT ==
  function () {
      callback();
  }
======= EXCEPTION END ========
[WARN] [2019-02-01 11:41:05][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:41:05][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 11:41:05][com.loris.soccer.net.App]Success to download: https://liuinsect.iteye.com/blog/1886237
[WARN] [2019-02-01 11:42:59][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:43:00][com.gargoylesoftware.htmlunit.javascript.host.dom.Document]Nothing done for execCommand(BackgroundImageCache, ...) (feature not implemented)
[WARN] [2019-02-01 11:43:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:43:00][com.gargoylesoftware.htmlunit.javascript.host.css.CSSStyleSheet]Unhandled CSS condition type 'PREFIX_ATTRIBUTE_CONDITION'. Accepting it silently.
[ERROR] [2019-02-01 11:43:00][com.gargoylesoftware.htmlunit.javascript.StrictErrorReporter]runtimeError: message=[An invalid or illegal selector was specified (selector: '*,:x' error: Invalid selector: *:x).] sourceName=[https://csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js] line=[2] lineSource=[null] lineOffset=[0]
[WARN] [2019-02-01 11:43:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:43:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:43:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:43:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:43:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:43:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:43:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:43:01][com.gargoylesoftware.htmlunit.html.HtmlScript]Script is not JavaScript (type: application/ld+json, language: ). Skipping execution.
[WARN] [2019-02-01 11:43:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:43:01][com.gargoylesoftware.htmlunit.javascript.host.css.CSSStyleSheet]Unhandled CSS condition type 'PREFIX_ATTRIBUTE_CONDITION'. Accepting it silently.
[ERROR] [2019-02-01 11:43:01][com.gargoylesoftware.htmlunit.javascript.StrictErrorReporter]runtimeError: message=[An invalid or illegal selector was specified (selector: '*,:x' error: Invalid selector: *:x).] sourceName=[https://csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js] line=[2] lineSource=[null] lineOffset=[0]
[WARN] [2019-02-01 11:43:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:43:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:43:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:43:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 11:43:01][com.gargoylesoftware.htmlunit.NicelyResynchronizingAjaxController]Re-synchronized call to https://pv.csdn.net/csdnbi
[WARN] [2019-02-01 11:43:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:43:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:43:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 11:43:02][com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine]Caught script exception
======= EXCEPTION START ========
EcmaError: lineNumber=[1] column=[0] lineSource=[<no source>] name=[TypeError] sourceName=[https://csdnimg.cn/search/baidu_opensug-1.0.0.js] message=[TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)]
com.gargoylesoftware.htmlunit.ScriptException: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:892)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:772)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:748)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.loadExternalJavaScriptFile(HtmlPage.java:995)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:371)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:46)
	at com.loris.soccer.net.App.main(App.java:24)
Caused by: net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.notFunctionError(ScriptRuntime.java:4369)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2597)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.exec(InterpretedFunction.java:123)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$2.doRun(JavaScriptEngine.java:763)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	... 34 more
Enclosed exception: 
net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.notFunctionError(ScriptRuntime.java:4369)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2597)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at script.i(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script.a(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.exec(InterpretedFunction.java:123)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$2.doRun(JavaScriptEngine.java:763)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:772)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:748)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.loadExternalJavaScriptFile(HtmlPage.java:995)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:371)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:46)
	at com.loris.soccer.net.App.main(App.java:24)
======= EXCEPTION END ========
[INFO] [2019-02-01 11:43:02][com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine]Caught script exception
======= EXCEPTION START ========
EcmaError: lineNumber=[889] column=[0] lineSource=[null] name=[TypeError] sourceName=[https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js] message=[TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)]
com.gargoylesoftware.htmlunit.ScriptException: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:892)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.executeEventLocally(EventTarget.java:101)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeEvent(HtmlScript.java:412)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:378)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:46)
	at com.loris.soccer.net.App.main(App.java:24)
Caused by: net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.undefCallError(ScriptRuntime.java:4312)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2586)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$3.doRun(JavaScriptEngine.java:814)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	... 38 more
Enclosed exception: 
net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.undefCallError(ScriptRuntime.java:4312)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2586)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at script(https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js:889)
	at script(https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js:881)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$3.doRun(JavaScriptEngine.java:814)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.executeEventLocally(EventTarget.java:101)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeEvent(HtmlScript.java:412)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:378)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:46)
	at com.loris.soccer.net.App.main(App.java:24)
== CALLING JAVASCRIPT ==
  function () {
      callback();
  }
======= EXCEPTION END ========
[WARN] [2019-02-01 11:43:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:43:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 11:43:02][com.loris.soccer.net.App]<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-CN" dir="ltr">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <title>
      
    HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析 - 科技改变生活 - ITeye博客
  
    </title>
    <meta name="description" content="  为了更好的提供文章，我已经将博客迁移到了自建的博客网站上，我将更多的从源码分析的角度入手，为大家带来更多的深度文章，请大家继续关注我~！  博客地址：www.liuinsect.com      _______________________________________________________________________________     MultiThreadedHttp ..."/>
    <meta name="keywords" content=" HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析"/>
    <link rel="shortcut icon" href="/images/favicon.ico" type="image/x-icon"/>
    <link rel="search" type="application/opensearchdescription+xml" href="/open_search.xml" title="ITeye"/>
    <link href="/rss" rel="alternate" title="科技改变生活" type="application/rss+xml"/>
    <link href="https://www.iteye.com/stylesheets/blog.css?1543400199" media="screen" rel="stylesheet" type="text/css"/>
    <link href="https://www.iteye.com/stylesheets/themes/blog/orange.css?1543400199" media="screen" rel="stylesheet" type="text/css"/>
    <script src="https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac">
    </script>
    <script src="//hm.baidu.com/hm.js?e19a8b00cf63f716d774540875007664">
    </script>
    <script src="https://www.iteye.com/javascripts/application.js?1544695506" type="text/javascript">
    </script>
    <script>
//<![CDATA[

    var _hmt = _hmt || [];
    (function() {
        var hm = document.createElement("script");
        hm.src = "//hm.baidu.com/hm.js?e19a8b00cf63f716d774540875007664";
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(hm, s);
    })();

//]]>
    </script>
    <style>
      
/* 折叠效果 */
.hide-main-content{
    position: relative;
}
.hide-article-box {
    display: none;
    position: absolute;
    z-index: 9999;
    bottom: -1px;
    width: 100%;
    padding-top: 160px;
    background-image: -webkit-gradient(linear,left top, left bottom,from(rgba(255,255,255,0)),color-stop(70%, #fff));
    background-image: linear-gradient(-180deg,rgba(255,255,255,0) 0%,#fff 70%);
}
.hide-article-box #btn-readmore{
    color: #ca0c16;
    border: 1px solid #ca0c16;
    margin: 10px auto;
    padding: 0 8px;
    display: block;
    font-size: 14px;
    border-radius: 4px;
    text-align: center;
    background-color: transparent;
    height: 34px;
    width: 74px;
    line-height: 32px;
    min-width: 72px;
    cursor: pointer;
}
.hide-article-box #btn-readmore:hover{
    background: #ca0c16;
    color:#fff;
    text-decoration: none;
}

    </style>
    <!-- 因INS广告原因 需要提前引入jquery -->    <script src="//csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js" type="text/javascript">
    </script>
    <script type="text/javascript">
//<![CDATA[
var jQuery = jQuery.noConflict();// 解决jq与prototype.js命名空间冲突的问题
//]]>
    </script>
    <script src="https://g.csdnimg.cn/fixed-sidebar/1.1.1/fixed-sidebar.js" type="text/javascript">
    </script>
    <link href="https://www.iteye.com/javascripts/syntaxhighlighter/SyntaxHighlighter.css?1448702469" media="screen" rel="stylesheet" type="text/css"/>
    <script src="https://www.iteye.com/javascripts/syntaxhighlighter/shCoreCommon.js?1448702469" type="text/javascript">
    </script>
    <script src="https://www.iteye.com/javascripts/hotkey.js?1448702469" type="text/javascript">
    </script>
    <script src="https://www.iteye.com/javascripts/code_favorites.js?1448702469" type="text/javascript">
    </script>
    <script src="https://www.iteye.com/javascripts/weiboshare.js?1448702469" type="text/javascript">
    </script>
    <!-- 请置于所有广告位代码之前 -->    <script src="https://dup.baidustatic.com/js/ds.js">
    </script>
    <link ref="canonical" href="http://liuinsect.iteye.com/blog/1886237"/>
    <script src="//msite.baidu.com/sdk/c.js?appid=1563894916825412">
    </script>
    <style type="text/css">
      .dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }
    </style>
    <style type="text/css">
      .dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }
    </style>
    <style type="text/css">
      .dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }
    </style>
    <style type="text/css">
      .dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }
    </style>
    <style type="text/css">
      .dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }
    </style>
    <link rel="stylesheet" type="text/css" href="https://g.csdnimg.cn/recommend/1.3.0/css/recommend.css"/>
    <link rel="stylesheet" type="text/css" href="https://g.csdnimg.cn/recommend/1.3.0/css/iconfont.css"/>
    <script type="text/javascript" src="//csdnimg.cn/search/baidu_opensug-1.0.0.js">
    </script>
    <style type="text/css">
    </style>
  </head>
  <body>
    <div id="BAIDU_DUP_fp_wrapper" style="position: absolute; left: -1px; bottom: -1px; z-index: 0; width: 0px; height: 0px; overflow: hidden; visibility: hidden; display: none;">
      <iframe id="BAIDU_DUP_fp_iframe" src="https://pos.baidu.com/wh/o.htm?ltr=" style="width: 0px; height: 0px; visibility: hidden; display: none;">
      </iframe>
    </div>
    <svg aria-hidden="true" style="position: absolute; width: 0px; height: 0px; overflow: hidden;">
      <symbol id="fanyi" viewbox="0 0 1084 1024">
        <path d="M602.416429 647.439059v75.390494h120.470588v-120.470588h-75.029082l195.493647-193.939577V481.882353h180.597459c33.322165 0 60.289506 26.967341 60.289506 60.235294 0 0.722824-0.012047 1.439624-0.036141 2.1504v236.640377c0.024094 0.710776 0.036141 1.427576 0.036141 2.1504 0 33.261929-26.967341 60.235294-60.235294 60.235294H843.357606v120.470588c0 33.261929-26.967341 60.229271-60.235294 60.22927s-60.235294-26.967341-60.235295-60.235294v-120.470588H542.090782c-33.267953 0-60.235294-26.967341-60.235294-60.235294l0.006024-16.022588 120.554917-119.597177z m240.935153-45.080094v120.470588h120.380235v-120.470588h-120.380235z m-403.534306-46.585977l-27.732329-67.861082H186.479676l-70.716235 167.936c-12.9024 30.659765-48.224376 45.056-78.884141 32.141553-30.659765-12.908424-45.049976-48.2304-32.141553-78.890165l240.941176-572.223247A60.253365 60.253365 0 0 1 301.782076 0.006024a60.253365 60.253365 0 0 1 56.380236 37.466352l174.242635 426.429742 352.798117-350.033318c23.612235-23.431529 61.7472-23.280941 85.17873 0.331294 23.431529 23.612235 23.280941 61.753224-0.331294 85.184753L200.394029 963.029835c-23.612235 23.431529-61.753224 23.280941-85.184753-0.331294-23.431529-23.612235-23.280941-61.753224 0.337318-85.184753l324.270682-321.7408z m-138.842353-339.787294L237.209841 367.441318H362.860664L300.974923 215.979671z"/>
      </symbol>
      <symbol id="shouji" viewbox="0 0 1024 1024">
        <path d="M768 670.72V102.4H256v568.32h512z m0 51.2H256v199.68h512v-199.68z m102.4-619.52v819.2c0 56.55552-45.84448 102.4-102.4 102.4H256c-56.55552 0-102.4-45.84448-102.4-102.4V102.4C153.6 45.84448 199.44448 0 256 0h512c56.55552 0 102.4 45.84448 102.4 102.4zM512 870.4c-28.27776 0-51.2-22.92224-51.2-51.2s22.92224-51.2 51.2-51.2 51.2 22.92224 51.2 51.2-22.92224 51.2-51.2 51.2z"/>
      </symbol>
      <symbol id="yuedushu" viewbox="0 0 1462 1024">
        <path d="M731.428571 1024c-259.320686 0-495.879314-146.753829-709.668571-440.246857-29.015771-39.840914-29.015771-103.665371 0-143.506286C235.556571 146.761143 472.107886 0 731.428571 0c259.320686 0 495.879314 146.753829 709.668572 440.246857 29.015771 39.840914 29.015771 103.665371 0 143.506286C1227.300571 877.238857 990.749257 1024 731.428571 1024z m0-841.142857c-195.2256 0-375.632457 107.132343-545.865142 329.142857 170.232686 222.010514 350.639543 329.142857 545.865142 329.142857 195.2256 0 375.632457-107.132343 545.865143-329.142857C1107.053714 289.989486 926.646857 182.857143 731.428571 182.857143z m0 621.714286c-161.579886 0-292.571429-130.991543-292.571428-292.571429s130.991543-292.571429 292.571428-292.571429 292.571429 130.991543 292.571429 292.571429-130.991543 292.571429-292.571429 292.571429z m0-182.857143c60.591543 0 109.714286-49.122743 109.714286-109.714286 0-60.591543-49.122743-109.714286-109.714286-109.714286-60.591543 0-109.714286 49.122743-109.714285 109.714286 0 60.591543 49.122743 109.714286 109.714285 109.714286z"/>
      </symbol>
    </svg>
    <div id="csdn-toolbar" class="csdn-toolbar tb_disnone ">
      <div class="container row center-block ">
        <ul class="pull-left left-menu clearfix" id="nav-left-menu">
          <li>
            <a href="https://www.csdn.net" title="csdn-spring">
              <img src="//csdnimg.cn/cdn/content-toolbar/spring-logo.png"/>
            </a>
          </li>
          <li>
            <a href="//www.csdn.net/" class="toolbar_to_feed" title="首页" style="margin-left:8px">
              首页
            </a>
          </li>
          <li>
            <a href="//blog.csdn.net/" class="toolbar_to_feed" title="博客">
              博客
            </a>
          </li>
          <li>
            <a href="//edu.csdn.net" title="学院">
              学院
            </a>
          </li>
          <li>
            <a href="//download.csdn.net" title="下载">
              下载
            </a>
          </li>
          <li>
            <a href="https://gitchat.csdn.net/?utm_source=csdn_toolbar" title="图文课">
              图文课
            </a>
          </li>
          <li>
            <a href="//bbs.csdn.net" title="论坛">
              论坛
            </a>
          </li>
          <li class="app-btn">
            <a href="https://www.csdn.net/app/" title="APP">
              APP
            </a>
            <div class="appControl">
              <span>
                <img src="https://csdnimg.cn/public/common/toolbar/images/csdnqr@2x.png"/>
                <em>
                  CSDN
                </em>
              </span>
              <span class="eduwx">
                <img src="https://csdnimg.cn/public/common/toolbar/images/eduwxfix.png"/>
                <em>
                  CSDN学院
                </em>
              </span>
            </div>
          </li>
          <li>
            <a href="//ask.csdn.net" title="问答">
              问答
            </a>
          </li>
          <li>
            <a href="//mall.csdn.net" title="商城">
              商城
            </a>
          </li>
          <li class="vip-caise">
            <a href="https://mall.csdn.net/vip_code" title="VIP会员">
              VIP会员
            </a>
          </li>
          <li>
            <a href="//huiyi.csdn.net/" title="活动">
              活动
            </a>
          </li>
          <li>
            <a href="http://job.csdn.net" title="招聘">
              招聘
            </a>
          </li>
          <li>
            <a href="http://www.iteye.com" title="ITeye">
              ITeye
            </a>
          </li>
          <li>
            <a href="https://gitbook.cn/?ref=csdn" title="GitChat">
              GitChat
            </a>
          </li>
        </ul>
        <div class="pull-right login-wrap unlogin">
          <ul class="btns">
            <li class="toolbar-tracking csdn-tracking-statistics tracking-click" data-mod="popu_369">
              <a href="#" style="padding:0">
              </a>
            </li>
            <li>
              <div class="search_bar csdn-tracking-statistics tracking-click" data-mod="popu_366">
                <input type="text" class="input_search" name="" id="toolber-keyword" placeholder="搜CSDN"/>
                <a href="//so.csdn.net/so/" target="_blank" class="btn-nobg-noborder btn-search">
                  <svg class="toolbar-icon" aria-hidden="true">
                    <use xlink:href="#sousuo"/>
                  </svg>
                </a>
              </div>
            </li>
            <li class="write-bolg-btn csdn-tracking-statistics tracking-click gitChat" data-mod="popu_370">
              <a class="" href="//mp.csdn.net/postedit" target="_blank">
                <img src="https://csdnimg.cn/public/common/toolbar/images/spring/xieboke.png" alt="" class="money"/>
                <span>
                  写博客
                </span>
              </a>
            </li>
            <li class="gitChat">
              <a class="" href="//gitbook.cn/new/gitchat/activity?utm_source=csdnblog1" target="_blank">
                <img src="https://csdnimg.cn/public/common/toolbar/images/spring/money.png" alt="" class="money"/>
                <span>
                  赚零钱
                </span>
              </a>
            </li>
            <li class="gitChat upload">
              <a target="_blank" class="" href="//i.csdn.net/#/msg/index">
                <img src="https://csdnimg.cn/public/common/toolbar/images/spring/message-icon.png" alt="" class="message"/>
                <span>
                  消息
                </span>
                <div class="toolbar-circle" id="msg-circle">
                </div>
              </a>
            </li>
            <li class="userinfo">
              <a href="https://passport.csdn.net/account/login" target="_blank">
                登录
              </a>
              <span>
              </span>
              <a href="https://passport.csdn.net/account/login" target="_blank">
                注册
              </a>
            </li>
            <li class="userLogin">
              <div class="loginCenter">
                <a href="//i.csdn.net" target="_blank">
                  <img class="login_img" src="//csdnimg.cn/public/common/toolbar/images/100x100.jpg"/>
                </a>
              </div>
              <div class="userControl">
                <div class="bord">
                  <div>
                    <i class="pull_icon pull_icon1">
                    </i>
                    <a href="https://www.csdn.net/nav/watchers" target="_blank">
                      我的关注
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon2">
                    </i>
                    <a href="https://i.csdn.net/#/uc/favorite-list" target="_blank">
                      我的收藏
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon4">
                    </i>
                    <a href="https://i.csdn.net/#/uc/profile" target="_blank">
                      个人中心
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon7">
                    </i>
                    <a href="https://i.csdn.net/#/account/index" target="_blank">
                      帐号设置
                    </a>
                  </div>
                </div>
                <div class="bord">
                  <div>
                    <i class="pull_icon pull_icon5">
                    </i>
                    <a href="https://blog.csdn.net/" target="_blank">
                      我的博客
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon6">
                    </i>
                    <a href="https://mp.csdn.net/" target="_blank">
                      管理博客
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon12">
                    </i>
                    <a href="https://edu.csdn.net/mycollege" target="_blank">
                      我的学院
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon13">
                    </i>
                    <a href="https://download.csdn.net/my/downloads" target="_blank">
                      我的下载
                    </a>
                  </div>
                </div>
                <div class="bord">
                  <div>
                    <i class="pull_icon pull_icon8">
                    </i>
                    <a href="https://my.csdn.net/my/score" target="_blank">
                      我的C币
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon9">
                    </i>
                    <a href="https://order.csdn.net/myorder" target="_blank">
                      订单中心
                    </a>
                  </div>
                </div>
                <div class="bord">
                  <div>
                    <i class="pull_icon pull_icon10">
                    </i>
                    <a href="https://blog.csdn.net/home/help.html" target="_blank">
                      帮助
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon11">
                    </i>
                    <a href="javascript:void(0);" class="logout">
                      退出
                    </a>
                  </div>
                </div>
              </div>
              <div class="guo_tip_box" style="display: none;">
                关注和收藏在这里
              </div>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <script onload="window['cambrian_sync_loader_success1548992581058618']()" onerror="window['cambrian_sync_loader_fail_1548992581058618']()" src="https://ae.bdstatic.com/xz/msite/static/sdk/main.8b2bc869.js">
    </script>
    <script src="https://g.csdnimg.cn/recommend/1.3.0/recommend.js">
    </script>
    <script language="javascript" src="https://g.csdnimg.cn/recommend/1.3.0/iconfont.js">
    </script>
    <div id="header">
      <div id="blog_site_nav">
        <a href="https://www.iteye.com/" class="homepage">
          首页
        </a>
        <a href="https://www.iteye.com/news">
          资讯
        </a>
        <a href="https://www.iteye.com/magazines">
          精华
        </a>
        <a href="https://www.iteye.com/forums">
          论坛
        </a>
        <a href="https://www.iteye.com/ask">
          问答
        </a>
        <a href="https://www.iteye.com/blogs">
          博客
        </a>
        <a href="https://www.iteye.com/blogs/subjects">
          专栏
        </a>
        <a href="https://www.iteye.com/groups">
          群组
        </a>
        <!--  <a href="#" onclick="return false;" id="msna"><u>更多</u> <small>▼</small></a>-->        <!--  <div class="quick_menu" style="display:none;">-->        <!--    <a target="_blank" href="https://job.iteye.com/iteye">知识库</a>-->        <!--    <a href="https:///search">搜索</a>-->        <!--  </div>-->      </div>
      <div id="user_nav">
        <a href="/login" class="welcome" title="登录">
          您还未登录 !
        </a>
        <a href="/login">
          登录
        </a>
        <!--<a href="/signup" class="nobg">注册</a>-->        <!--<a href="https://passport.csdn.net/account/mobileregister?from=https://www.iteye.com">注册</a>-->      </div>
    </div>
    <div id="page">
      <!--    <div id="branding" class="clearfix">-->      <!--      <div id="blog_name">-->      <!--        <h1><a href="/">-->      <!--            </a></h1>-->      <!--      </div>-->      <!--      <div id='fd'></div>-->      <!--      <div id="blog_navbar">-->      <!--        <ul>-->      <!--        </ul>-->      <!--        <div class="search">-->      <!--          <form action="/blog/search" method="get">-->      <!--            <input class="search_text" id="query" name="query" style="margin-left: 10px;width: 110px;" type="text"-->      <!--              value="" />-->      <!--            <input class="submit_search" type="submit" value="" />-->      <!--          </form>-->      <!--        </div>-->      <!--        <div id="fd"></div>-->      <!--      </div>-->      <!--    </div>-->      
    `
    
      <div id="content" class="clearfix">
        <div id="local">
          <div class="local_top">
          </div>
          <div id="blog_owner">
            <div id="blog_owner_logo">
              <a href="https://liuinsect.iteye.com">
                <img alt="liuInsect的博客" class="logo" src="https://www.iteye.com/images/user-logo.gif?1448702469" title="liuInsect的博客: 科技改变生活" width=""/>
              </a>
            </div>
            <div id="blog_owner_name">
              liuInsect
            </div>
          </div>
          <div id="blog_actions">
            <ul>
              <li>
                浏览:
              112766 次
              </li>
              <li>
                性别:
              
                <img alt="Icon_minigender_1" src="https://www.iteye.com/images/icon_minigender_1.gif?1448702469" title="男"/>
              </li>
              <li>
                <img src="/images/status/offline.gif"/>
              </li>
            </ul>
          </div>
          <div id="user_visits" class="clearfix">
            <h5>
              最近访客 
              <span style="font-weight:normal;font-size:12px;padding-left:30px;">
                <a href="/blog/user_visits">
                  更多访客&gt;&gt;
                </a>
              </span>
            </h5>
            <div class="user_visit">
              <div class="logo">
                <a href="https://tweifeng.iteye.com" target="_blank">
                  <img alt="tweifeng的博客" class="logo" src="https://www.iteye.com/images/user-logo-thumb.gif?1448702469" title="tweifeng的博客: tweifeng" width="48px"/>
                </a>
              </div>
              <div class="left">
                <a href="https://tweifeng.iteye.com" target="_blank" title="tweifeng">
                  tweifeng
                </a>
              </div>
            </div>
            <div class="user_visit">
              <div class="logo">
                <a href="https://alock1.iteye.com" target="_blank">
                  <img alt="aLOCK1的博客" class="logo" src="https://www.iteye.com/images/user-logo-thumb.gif?1448702469" title="aLOCK1的博客: " width="48px"/>
                </a>
              </div>
              <div class="left">
                <a href="https://alock1.iteye.com" target="_blank" title="aLOCK1">
                  aLOCK1
                </a>
              </div>
            </div>
            <div class="user_visit">
              <div class="logo">
                <a href="https://zhouxf.iteye.com" target="_blank">
                  <img alt="zhouxf的博客" class="logo" src="https://www.iteye.com/images/user-logo-thumb.gif?1448702469" title="zhouxf的博客: " width="48px"/>
                </a>
              </div>
              <div class="left">
                <a href="https://zhouxf.iteye.com" target="_blank" title="zhouxf">
                  zhouxf
                </a>
              </div>
            </div>
            <div class="user_visit">
              <div class="logo">
                <a href="https://stayhome.iteye.com" target="_blank">
                  <img alt="StayHome的博客" class="logo" src="https://www.iteye.com/images/user-logo-thumb.gif?1448702469" title="StayHome的博客: " width="48px"/>
                </a>
              </div>
              <div class="left">
                <a href="https://stayhome.iteye.com" target="_blank" title="StayHome">
                  StayHome
                </a>
              </div>
            </div>
          </div>
          <div id="user_title_list" class="clearfix">
            <h5>
              博主相关
            </h5>
            <li>
              <a href="https://liuinsect.iteye.com">
                博客
              </a>
            </li>
            <li>
              <a href="/weibo">
                微博
              </a>
            </li>
            <li>
              <a href="/album">
                相册
              </a>
            </li>
            <li>
              <a href="/link">
                收藏
              </a>
            </li>
            <li>
              <a href="/blog/guest_book">
                留言
              </a>
            </li>
            <li>
              <a href="/blog/profile">
                关于我
              </a>
            </li>
          </div>
          <div id="blog_menu">
            <h5>
              文章分类
            </h5>
            <ul>
              <li>
                <a href="/">
                  全部博客 (25)
                </a>
              </li>
              <li>
                <a href="/category/202219">
                  struts2 (2)
                </a>
              </li>
              <li>
                <a href="/category/202576">
                  ubuntu (1)
                </a>
              </li>
              <li>
                <a href="/category/202577">
                  linux (1)
                </a>
              </li>
              <li>
                <a href="/category/202578">
                  os (1)
                </a>
              </li>
              <li>
                <a href="/category/205165">
                  lucene (2)
                </a>
              </li>
              <li>
                <a href="/category/211352">
                  代码管理 (1)
                </a>
              </li>
              <li>
                <a href="/category/212908">
                  spring (2)
                </a>
              </li>
              <li>
                <a href="/category/223162">
                  mysql (1)
                </a>
              </li>
              <li>
                <a href="/category/234735">
                  JIANG (0)
                </a>
              </li>
              <li>
                <a href="/category/239314">
                  java6道面试题 (0)
                </a>
              </li>
              <li>
                <a href="/category/243548">
                  synchronized (0)
                </a>
              </li>
              <li>
                <a href="/category/243840">
                  java Synchronized (1)
                </a>
              </li>
              <li>
                <a href="/category/247007">
                  二分匹配算法 (0)
                </a>
              </li>
              <li>
                <a href="/category/250625">
                  降级论 (0)
                </a>
              </li>
              <li>
                <a href="/category/252087">
                  380167616@qq.com (0)
                </a>
              </li>
              <li>
                <a href="/category/266729">
                  乱码 (0)
                </a>
              </li>
              <li>
                <a href="/category/266818">
                  java (4)
                </a>
              </li>
              <li>
                <a href="/category/266819">
                  static (1)
                </a>
              </li>
              <li>
                <a href="/category/266832">
                  乱码，DoGet (1)
                </a>
              </li>
              <li>
                <a href="/category/266836">
                  CXF (1)
                </a>
              </li>
              <li>
                <a href="/category/300247">
                  多线程 (2)
                </a>
              </li>
            </ul>
          </div>
          <div id="month_blogs">
            <h5>
              社区版块
            </h5>
            <ul>
              <li>
                <a href="/blog/news">
                  我的资讯
                </a>
                 (
              0)
              </li>
              <li>
                <a href="/blog/post">
                  我的论坛
                </a>
                 (
              2)
            
              </li>
              <li>
                <a href="/blog/answered_problems">
                  我的问答
                </a>
                 (
              0)
              </li>
            </ul>
          </div>
          <div id="month_blogs">
            <h5>
              存档分类
            </h5>
            <ul>
              <li>
                <a href="/blog/monthblog/2014-11">
                  2014-11
                </a>
                
              (
              1)
              </li>
              <li>
                <a href="/blog/monthblog/2013-12">
                  2013-12
                </a>
                
              (
              3)
              </li>
              <li>
                <a href="/blog/monthblog/2013-08">
                  2013-08
                </a>
                
              (
              2)
              </li>
              <li>
                <a href="/blog/monthblog_more">
                  更多存档...
                </a>
              </li>
            </ul>
          </div>
          <div id="guest_books">
            <h5>
              最新评论
            </h5>
            <ul>
              <li>
                <a href="https://panamera.iteye.com" target="_blank" title="panamera">
                  panamera
                </a>
                ：
              楼主有没有测试过，没有发你说什么锁不成功，都不知道你想表达什么 ...
                <br/>
                <a href="/blog/1662839#bc2399998">
                  JAVA Synchronized 关键字锁实例和锁CLASS对象的区别
                </a>
              </li>
              <li>
                <a href="https://ouchuquan.iteye.com" target="_blank" title="ouchuquan">
                  ouchuquan
                </a>
                ：
              Prototype creates a brand new i ...
                <br/>
                <a href="/blog/1462062#bc2389320">
                  spring 中prototype 和 reqeust的区别
                </a>
              </li>
              <li>
                <a href="https://ljn799498049.iteye.com" target="_blank" title="ljn799498049">
                  ljn799498049
                </a>
                ：
              请问倒数第2个线程栈的调用顺序的图是用什么画的啊 ，还是ecl ...
                <br/>
                <a href="/blog/1791958#bc2389115">
                  Spring编程式事务与声明式事务源码分析
                </a>
              </li>
              <li>
                <a href="https://hxwabc.iteye.com" target="_blank" title="hxwabc">
                  hxwabc
                </a>
                ：
              其实没有必要这么麻烦，只要ThreadLocal是static ...
                <br/>
                <a href="/blog/1827012#bc2385802">
                  ThreadLocal内存泄露分析
                </a>
              </li>
              <li>
                <a href="https://china2010pan.iteye.com" target="_blank" title="China2010pan">
                  China2010pan
                </a>
                ：
               ...
                <br/>
                <a href="/blog/1994831#bc2375610">
                  FutureTask 源码解析
                </a>
              </li>
            </ul>
          </div>
          <div class="local_bottom">
          </div>
          <div id="nav_show_top_stop">
            <div>
              <!-- 广告位：PC端-iteye博客详情页左侧Button1-200*200 -->              <!-- Ads ID 423 -->            </div>
            <div>
              <!-- 广告位：PC端-iteye博客详情页左侧Button2-200*200 -->              <!-- Ads ID 424 -->            </div>
          </div>
        </div>
        <div id="main" class="">
          <div class="h-entry" style="display:none">
            <a href="https://liuinsect.iteye.com" class="p-author" target="_blank">
              liuInsect
            </a>
          </div>
          <div class="blog_main">
            <script type="application/ld+json">
//<![CDATA[

    {
        "@context": "https://zhanzhang.baidu.com/contexts/cambrian.jsonld",
        "@id": "http://liuinsect.iteye.com/blog/1886237",
        "title": "HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析",
        "images": [],
        "description": "",
        "pubDate": "2013-06-13T16:35:10"
    }
  
//]]>
            </script>
            <div class="blog_title">
              <h3>
                <a href="/blog/1886237">
                  HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析
                </a>
                <em class="actions">
                </em>
              </h3>
              <div class="news_tag">
                 
              </div>
            </div>
            <div id="blog_content" class="hide-main-content" style="height: 726px; overflow: hidden;">
              <div class="hide-article-box text-center">
                <a class="btn" id="btn-readmore">
                  阅读更多
                </a>
              </div>
              <div class="iteye-blog-content-contain" style="font-size: 14px;">
                <div>
                  为了更好的提供文章，我已经将博客迁移到了自建的博客网站上，我将更多的从源码分析的角度入手，为大家带来更多的深度文章，请大家继续关注我~！  博客地址：
                  <a target="_self" style="color: #e9650e; text-decoration: underline;" href="http://www.liuinsect.com/">
                    www.liuinsect.com
                  </a>
                </div>
                <p class="MsoNormal">
                   
                </p>
                <div>
                  _______________________________________________________________________________
                </div>
                <p class="MsoNormal">
                   
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                      MultiThreadedHttpConnectionManager 
                    </span>
                    是
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                      HTTP Client
                    </span>
                    中用来复用连接的连接管理类
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                      ,
                    </span>
                    可以通过
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                         
                    </span>
                  </span>
                </p>
                <div class="dp-highlighter" id="">
                  <div class="bar">
                    <div class="tools">
                      Java代码 
                      <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=%20%20%20MultiThreadedHttpConnectionManager%20n%20%3D%20%20new%20MultiThreadedHttpConnectionManager()%3B%0A%20%20%20HttpClient%20client%20%3D%20new%20HttpClient(n)%3B" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"/>
                       
                      <a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;">
                        <img class="star" src="/images/icon_star.png" alt="收藏代码"/>
                        <img class="spinner" src="/images/spinner.gif" style="display:none"/>
                      </a>
                    </div>
                  </div>
                  <ol class="dp-j">
                    <li>
                      <span>
                        <span>
                          MultiThreadedHttpConnectionManager n =  
                        </span>
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           MultiThreadedHttpConnectionManager();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                        HttpClient client = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           HttpClient(n);  
                        </span>
                      </span>
                    </li>
                  </ol>
                </div>
                <pre class="java" name="code" style="display: none;">
                     MultiThreadedHttpConnectionManager n =  new MultiThreadedHttpConnectionManager();
   HttpClient client = new HttpClient(n);
                </pre>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                       
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    这样的方式去 创建一个
                    <span>
                      Client 
                    </span>
                    实例，
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    创建后，每当执行
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      int statusCode = client.executeMethod(postMethod);
                    </span>
                    时
                    <span>
                       
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      http client 
                    </span>
                    委托
                    <span>
                      ConnectionManager
                    </span>
                    创建连接，其实是先委托
                    <span>
                      HttpMethodDirector 
                    </span>
                    执行
                    <span>
                      excute
                    </span>
                    方法，
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    再通过它委托
                    <span>
                      ConnectionManager 
                    </span>
                    创建连接，
                    <span>
                      HttpMethodDirector 
                    </span>
                    中包含了一下
                    <span>
                      host,
                    </span>
                    请求参数等信息。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    在创建连接时，
                    <span>
                      HttpMethodDirector 
                    </span>
                    中有如下代码：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                               
                    </span>
                  </span>
                </p>
                <div class="dp-highlighter" id="">
                  <div class="bar">
                    <div class="tools">
                      Java代码 
                      <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=%20%20%20%20%20%20if%20(%20this.conn%20%3D%3D%20null)%20%7B%0A%20%20%20%20%20%20%20%20%20%20this.conn%20%3D%20connectionManager.getConnectionWithTimeout(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20hostConfiguration%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.params.getConnectionManagerTimeout()%0A%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%20%20%20%20......%0A%20%20%20%20%20%20%20%7D" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"/>
                       
                      <a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;">
                        <img class="star" src="/images/icon_star.png" alt="收藏代码"/>
                        <img class="spinner" src="/images/spinner.gif" style="display:none"/>
                      </a>
                    </div>
                  </div>
                  <ol class="dp-j">
                    <li>
                      <span>
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           ( 
                        </span>
                        <span class="keyword">
                          this
                        </span>
                        <span>
                          .conn == 
                        </span>
                        <span class="keyword">
                          null
                        </span>
                        <span>
                          ) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                            
                        <span class="keyword">
                          this
                        </span>
                        <span>
                          .conn = connectionManager.getConnectionWithTimeout(  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                hostConfiguration,  
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="keyword">
                          this
                        </span>
                        <span>
                          .params.getConnectionManagerTimeout()  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                             );  
                      </span>
                    </li>
                    <li>
                      <span>
                            ......  
                      </span>
                    </li>
                    <li>
                      <span>
                         }  
                      </span>
                    </li>
                  </ol>
                </div>
                <pre class="java" name="code" style="display: none;">
                        if ( this.conn == null) {
          this.conn = connectionManager.getConnectionWithTimeout(
              hostConfiguration,
              this.params.getConnectionManagerTimeout()
           );
          ......
       }
                </pre>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                       
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      ConnectionManager 
                    </span>
                    使用了常用的多态的方式将连接的获取交给子类完成。 增强其扩展性。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      ConnectionManager 
                    </span>
                    有三个子类：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                    <img src="http://dl2.iteye.com/upload/attachment/0085/7120/ab632cac-39f0-348a-a3be-0701a05b4d9b.png" alt=""/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    对应于：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      1. 
                    </span>
                    一次性的连接：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    <img src="http://dl2.iteye.com/upload/attachment/0085/7122/9cfed9b5-26af-3018-a9ad-7d97c959a3ba.png" alt=""/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                       
                    </span>
                    <span>
                      2. 
                    </span>
                    <span>
                      线程池中获取连接：
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                    <br/>
                    <img src="http://dl2.iteye.com/upload/attachment/0085/7124/69529ef4-dde5-3b2e-a3e9-aca64a25c49d.png" alt=""/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      3. 
                    </span>
                    复用当前
                    <span>
                      SimpleHttpConnectionManager
                    </span>
                    中的一个成员变量，策略是没有则创建，有则覆盖后返回
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                    <br/>
                    <img src="http://dl2.iteye.com/upload/attachment/0085/7126/62ef3d88-d5b5-3b02-b04f-c1d8f3fef1ce.png" alt=""/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      重点说下
                      <span>
                        MultiThreadedHttpConnectionManager   
                      </span>
                      中连接的获取
                    </strong>
                    <strong>
                      ：
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    在使用
                    <span>
                       MultiThreadedHttpConnectionManager  
                    </span>
                    获取连接的时候，
                    <span>
                      MultiThreadedHttpConnectionManager  
                    </span>
                    使用了连接池的概念针对每个
                    <span>
                      <br/>
                       HostConfiguration 
                    </span>
                    做了连接的管理，即
                    <span>
                       HostConfiguration 
                    </span>
                    作为
                    <span>
                      Key 
                    </span>
                    ，连接池（
                    <span>
                      HostConnectionPool
                    </span>
                    ）作为
                    <span>
                      value
                    </span>
                    去管理当前
                    <span>
                      host
                    </span>
                    下的所有连接，
                    <span>
                      <br/>
                       HostConfiguration
                    </span>
                    的实例如下：
                    <span>
                       HostConfiguration[host=http://www.taobao.com]
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      HostConnectionPool 
                    </span>
                    中使用
                    <strong>
                      链表
                    </strong>
                    <span>
                       
                    </span>
                    管理了 空闲的连接和等待连接的线程队列。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    每次获取连接的时候 根据参数（后面会提到）决定是直接从池中获取一个空闲连接
                    <span>
                      ,
                    </span>
                    创建一个连接，还是计算出一个等待时间后 将当前线程沉睡这么久。而后再检查。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      <br/>
                       Http Client 
                    </span>
                    通过协议对应的
                    <span>
                      ProtocolSocketFactory
                    </span>
                    去创建一个
                    <span>
                      socket
                    </span>
                    连接来发送请求和接受响应
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    使用注意事项：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      1. MultiThreadedHttpConnectionManager  
                    </span>
                    中有以下两个变量，分别解释：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                           a. 
                    </span>
                    每个
                    <span>
                      host
                    </span>
                    最大同时可以获取的连接数， 大于这个数字后， （
                    <span>
                      1,2
                    </span>
                    号线程正在使用连接）
                    <span>
                      3
                    </span>
                    号线程会
                    <span>
                      wait 
                    </span>
                    沉睡住 直到到达时间或者被打断或者
                    <span>
                      1,2
                    </span>
                    号中有人
                    <span>
                      release
                    </span>
                    这个
                    <span>
                      connection
                    </span>
                    ，抛出异常。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                                
                    </span>
                    注意，如果是
                    <span>
                      HTTP client 
                    </span>
                    来调用接口的话 这个例如（
                    <span>
                      http://www.taobao.com 
                    </span>
                    那他的
                    <span>
                      host
                    </span>
                    是
                    <span>
                       www.taobao.com
                    </span>
                    ） 这个值应该设置大一点 否则很多线程调用这个接口的时候会阻塞住。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                           b. 
                    </span>
                    同一时间
                    <span>
                      MultiThreadedHttpConnectionManager  
                    </span>
                    允许的最大连接数，超过这个数字，连接的建立将会阻塞。直到有空闲连接释放。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                    <br/>
                    <img src="http://dl2.iteye.com/upload/attachment/0085/7128/e9cd0779-310e-3bcd-83ae-61ab59c6387b.png" alt=""/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    使用注意事项测试代码：
                    <span>
                        
                    </span>
                    下划线的两个方法可以调整后观察结果
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <strong>
                      <span>
                         
                      </span>
                    </strong>
                  </span>
                </p>
                <div class="dp-highlighter" id="">
                  <div class="bar">
                    <div class="tools">
                      Java代码 
                      <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=public%20static%20void%20main(String%5B%5D%20sadfasd)%20throws%20HttpException%2C%20IOException%2C%20InterruptedException%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20final%20String%20url%3D%20%22http%3A%2F%2Fwww.taobao.com%22%20%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20final%20HttpClient%20client%20%3D%20new%20HttpClient()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20final%20MultiThreadedHttpConnectionManager%20connectionManager%20%3D%20new%20MultiThreadedHttpConnectionManager()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20connectionManager.setMaxTotalConnections%20(1)%3B%2F%2F%E6%80%BB%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%95%B0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20connectionManager.setMaxConnectionsPerHost%20(2)%3B%2F%2F%E6%AF%8F%E4%B8%AAhost%E7%9A%84%E6%9C%80%E5%A4%A7%E8%BF%9E%E6%8E%A5%E6%95%B0%0A%20%20%20%20%20%20%20%20%20%20%20%20client.setHttpConnectionManager(%20connectionManager%20)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20Runnable%20r%20%3D%20new%20Runnable()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20public%20%20void%20run()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20statusCode%3D0%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20PostMethod%20postMethod%20%3D%20new%20PostMethod(url)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20statusCode%20%3D%20client.executeMethod(postMethod)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.%20out.println(%20%22sleep%22%20%2B%20statusCode%20)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Thread.%20sleep(3000)%3B%2F%2F10s%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20postMethod.releaseConnection()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(HttpException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(InterruptedException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20Runnable%20r1%20%3D%20new%20Runnable()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20public%20%20void%20run()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20statusCode%3D0%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20PostMethod%20postMethod%20%3D%20new%20PostMethod(url)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20statusCode%20%3D%20client.executeMethod(postMethod)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(HttpException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.%20out.println(%20statusCode%20)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20postMethod.releaseConnection()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20Runnable%20r2%20%3D%20new%20Runnable()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20public%20%20void%20run()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20statusCode%3D0%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20PostMethod%20postMethod%20%3D%20new%20PostMethod(url)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20statusCode%20%3D%20client.executeMethod(postMethod)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(HttpException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.%20out.println(%20statusCode%20)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20postMethod.releaseConnection()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20Runnable%20r3%20%3D%20new%20Runnable()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20public%20%20void%20run()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20statusCode%3D0%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20PostMethod%20postMethod%20%3D%20new%20PostMethod(url)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20statusCode%20%3D%20client.executeMethod(postMethod)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(HttpException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.%20out.println(%20statusCode%20)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20postMethod.releaseConnection()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20new%20Thread(r).start()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20Thread.%20sleep(1000)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20new%20Thread(r1).start()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20new%20Thread(r2).start()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20new%20Thread(r3).start()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%7D" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"/>
                       
                      <a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;">
                        <img class="star" src="/images/icon_star.png" alt="收藏代码"/>
                        <img class="spinner" src="/images/spinner.gif" style="display:none"/>
                      </a>
                    </div>
                  </div>
                  <ol class="dp-j">
                    <li>
                      <span>
                        <span class="keyword">
                          public
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          static
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          void
                        </span>
                        <span>
                           main(String[] sadfasd) 
                        </span>
                        <span class="keyword">
                          throws
                        </span>
                        <span>
                           HttpException, IOException, InterruptedException{  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          final
                        </span>
                        <span>
                           String url= 
                        </span>
                        <span class="string">
                          "http://www.taobao.com"
                        </span>
                        <span>
                           ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          final
                        </span>
                        <span>
                           HttpClient client = 
                        </span>
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           HttpClient();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          final
                        </span>
                        <span>
                           MultiThreadedHttpConnectionManager connectionManager = 
                        </span>
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           MultiThreadedHttpConnectionManager();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     connectionManager.setMaxTotalConnections (
                        <span class="number">
                          1
                        </span>
                        <span>
                          );
                        </span>
                        <span class="comment">
                          //总的连接数
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     connectionManager.setMaxConnectionsPerHost (
                        <span class="number">
                          2
                        </span>
                        <span>
                          );
                        </span>
                        <span class="comment">
                          //每个host的最大连接数
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                    client.setHttpConnectionManager( connectionManager );  
                      </span>
                    </li>
                    <li>
                      <span>
                                      
                      </span>
                    </li>
                    <li>
                      <span>
                                    Runnable r = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Runnable(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                           
                        <span class="keyword">
                          public
                        </span>
                        <span>
                            
                        </span>
                        <span class="keyword">
                          void
                        </span>
                        <span>
                           run(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          int
                        </span>
                        <span>
                           statusCode=
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                PostMethod postMethod = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           PostMethod(url);  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          try
                        </span>
                        <span>
                           {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      statusCode = client.executeMethod(postMethod);  
                      </span>
                    </li>
                    <li>
                      <span>
                                                      System. out.println( 
                        <span class="string">
                          "sleep"
                        </span>
                        <span>
                           + statusCode );  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      Thread. sleep(
                        <span class="number">
                          3000
                        </span>
                        <span>
                          );
                        </span>
                        <span class="comment">
                          //10s
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      postMethod.releaseConnection();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (HttpException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (IOException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (InterruptedException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                                          };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    Runnable r1 = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Runnable(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                           
                        <span class="keyword">
                          public
                        </span>
                        <span>
                            
                        </span>
                        <span class="keyword">
                          void
                        </span>
                        <span>
                           run(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          int
                        </span>
                        <span>
                           statusCode=
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                PostMethod postMethod = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           PostMethod(url);  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          try
                        </span>
                        <span>
                           {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      statusCode = client.executeMethod(postMethod);  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (HttpException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (IOException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                                                System. out.println( statusCode );  
                      </span>
                    </li>
                    <li>
                      <span>
                                                postMethod.releaseConnection();  
                      </span>
                    </li>
                    <li>
                      <span>
                                          };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    Runnable r2 = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Runnable(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                           
                        <span class="keyword">
                          public
                        </span>
                        <span>
                            
                        </span>
                        <span class="keyword">
                          void
                        </span>
                        <span>
                           run(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          int
                        </span>
                        <span>
                           statusCode=
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                PostMethod postMethod = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           PostMethod(url);  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          try
                        </span>
                        <span>
                           {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      statusCode = client.executeMethod(postMethod);  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (HttpException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (IOException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                                                System. out.println( statusCode );  
                      </span>
                    </li>
                    <li>
                      <span>
                                                postMethod.releaseConnection();  
                      </span>
                    </li>
                    <li>
                      <span>
                                          };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    Runnable r3 = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Runnable(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                           
                        <span class="keyword">
                          public
                        </span>
                        <span>
                            
                        </span>
                        <span class="keyword">
                          void
                        </span>
                        <span>
                           run(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          int
                        </span>
                        <span>
                           statusCode=
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                PostMethod postMethod = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           PostMethod(url);  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          try
                        </span>
                        <span>
                           {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      statusCode = client.executeMethod(postMethod);  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (HttpException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (IOException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                                                System. out.println( statusCode );  
                      </span>
                    </li>
                    <li>
                      <span>
                                                postMethod.releaseConnection();  
                      </span>
                    </li>
                    <li>
                      <span>
                                          };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    };  
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Thread(r).start();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                    Thread. sleep(
                        <span class="number">
                          1000
                        </span>
                        <span>
                          );  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Thread(r1).start();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Thread(r2).start();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Thread(r3).start();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                      
                      </span>
                    </li>
                    <li>
                      <span>
                              }  
                      </span>
                    </li>
                  </ol>
                </div>
                <pre class="java" name="code" style="display: none;">
                  public static void main(String[] sadfasd) throws HttpException, IOException, InterruptedException{
             final String url= "http://www.taobao.com" ;
             final HttpClient client = new HttpClient();
             final MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();
             connectionManager.setMaxTotalConnections (1);//总的连接数
             connectionManager.setMaxConnectionsPerHost (2);//每个host的最大连接数
            client.setHttpConnectionManager( connectionManager );
            
            Runnable r = new Runnable(){
                   public  void run(){
                         int statusCode=0;
                        PostMethod postMethod = new PostMethod(url);
                         try {
                              statusCode = client.executeMethod(postMethod);
                              System. out.println( "sleep" + statusCode );
                              Thread. sleep(3000);//10s
                              postMethod.releaseConnection();
                        } catch (HttpException e) {
                              e.printStackTrace();
                        } catch (IOException e) {
                              e.printStackTrace();
                        } catch (InterruptedException e) {
                              e.printStackTrace();
                        }
                  };
            };
            Runnable r1 = new Runnable(){
                   public  void run(){
                         int statusCode=0;
                        PostMethod postMethod = new PostMethod(url);
                         try {
                              statusCode = client.executeMethod(postMethod);
                        } catch (HttpException e) {
                              e.printStackTrace();
                        } catch (IOException e) {
                              e.printStackTrace();
                        }
                        System. out.println( statusCode );
                        postMethod.releaseConnection();
                  };
            };
            Runnable r2 = new Runnable(){
                   public  void run(){
                         int statusCode=0;
                        PostMethod postMethod = new PostMethod(url);
                         try {
                              statusCode = client.executeMethod(postMethod);
                        } catch (HttpException e) {
                              e.printStackTrace();
                        } catch (IOException e) {
                              e.printStackTrace();
                        }
                        System. out.println( statusCode );
                        postMethod.releaseConnection();
                  };
            };
            Runnable r3 = new Runnable(){
                   public  void run(){
                         int statusCode=0;
                        PostMethod postMethod = new PostMethod(url);
                         try {
                              statusCode = client.executeMethod(postMethod);
                        } catch (HttpException e) {
                              e.printStackTrace();
                        } catch (IOException e) {
                              e.printStackTrace();
                        }
                        System. out.println( statusCode );
                        postMethod.releaseConnection();
                  };
            };
             new Thread(r).start();
            Thread. sleep(1000);
             new Thread(r1).start();
             new Thread(r2).start();
             new Thread(r3).start();
            
      }
                </pre>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <strong>
                      <span>
                         
                      </span>
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      释放连接：
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    在我们调用
                    <span>
                      postMethod.releaseConnection()
                    </span>
                    时， 会调用
                    <span>
                      connectionManager
                    </span>
                    的
                    <span>
                      releaseConnection
                    </span>
                    方法。
                    <span>
                      <br/>
                    </span>
                    注意：进入这个方法后会首先同步整个
                    <span>
                      connectionPool
                    </span>
                    （连接池）对象，这意味着，在多连接复用的时候频繁的释放连接，也是会有性能损耗的，同步整个
                    <span>
                      connectionPool
                    </span>
                    后连接的创建都会受影响。
                    <span>
                      <br/>
                    </span>
                    然后开始归还连接，归还的方式很清晰：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      1. 
                    </span>
                    将
                    <span>
                      Connection
                    </span>
                    放到基于
                    <span>
                      host
                    </span>
                    的连接池的空闲链表中
                    <span>
                      <br/>
                           hostPool. freeConnections .add(conn);
                      <br/>
                       2.
                    </span>
                    将
                    <span>
                      Connection
                    </span>
                    放到整个全局的
                    <span>
                      connectionPool
                    </span>
                    的空闲链表中
                    <span>
                      <br/>
                       3. 
                    </span>
                    将
                    <span>
                      Connection
                    </span>
                    从
                    <span>
                      Reference Map
                    </span>
                    中移除（
                    <span>
                      Reference Map 
                    </span>
                    后面单独讲解）
                    <span>
                      <br/>
                       4. 
                    </span>
                    将
                    <span>
                      Connection
                    </span>
                    加入到超时管理中去。
                    <span>
                      <br/>
                       5. 
                    </span>
                    将
                    <span>
                      hostPool
                    </span>
                    （
                    <span>
                      host
                    </span>
                    连接池）里等待队列的头元素拿出来 发送
                    <span>
                      interrupt
                    </span>
                    的信号量。目的是 唤醒等待连接的线程。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    到目前为止，有两个点可以详细说下
                    <span>
                      <br/>
                       1. Reference Map
                    </span>
                    的作用。
                    <span>
                      <br/>
                       2.  
                    </span>
                    等待连接的线程的处理方式。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    首先说
                    <strong>
                      <span style="color: #ff0000;">
                        Reference Map
                      </span>
                    </strong>
                    <span>
                      ,
                    </span>
                    这个名字是我自己取的。它在
                    <span>
                      MultiThreadedHttpConnectionManager  
                    </span>
                    中的名字叫做：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    <img src="http://dl2.iteye.com/upload/attachment/0085/7130/d20fbff5-c6a0-3a3c-8421-bb79be056176.png" alt=""/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    在每次获取连接和释放连接的时候会将
                    <span>
                      ”
                    </span>
                    连接
                    <span>
                      “
                    </span>
                    存入和移除。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    <strong>
                      <span style="color: #ff0000;">
                        注意： 这里的
                        <span>
                          ”
                        </span>
                        连接
                        <span>
                          “ 
                        </span>
                        已经不是
                        <span>
                          Connection 
                        </span>
                        而是用
                        <span>
                           WeakReference
                        </span>
                        包装过的
                        <span>
                          Connection
                        </span>
                        。
                      </span>
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    为什么用
                    <span>
                      WeakReference
                    </span>
                    ？
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    这里的概念和
                    <span>
                      ThreadLocal 
                    </span>
                    中用
                    <span>
                      WeakReference 
                    </span>
                    包装
                    <span>
                      ThreadLocalMap
                    </span>
                    中的
                    <span>
                      Key
                    </span>
                    一样。
                    <span>
                       
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    目的是为了 在连接丢失时，
                    <span>
                      HTTP client 
                    </span>
                    失去了对
                    <span>
                      “
                    </span>
                    连接
                    <span>
                      ”
                    </span>
                    （
                    <span>
                      Connection
                    </span>
                    ）的强引用，该连接对象变成了弱引用对象，可以被
                    <span>
                      GC
                    </span>
                    掉。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    所以，每次在获取连接的时候 要将连接用
                    <span>
                      WeakReference 
                    </span>
                    包装后放到
                    <em>
                      <span>
                        REFERENCE_TO_CONNECTION_SOURCE 
                      </span>
                    </em>
                    这个
                    <span>
                      Map
                    </span>
                    中
                    <span>
                      ,
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    每次释放连接时，将它从
                    <em>
                      <span>
                        REFERENCE_TO_CONNECTION_SOURCE 
                      </span>
                    </em>
                    中移除
                    <span>
                      ,
                    </span>
                    因为这个时候连接的管理由线程池使用强引用管理。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    再说，
                    <span style="color: #ff0000;">
                      <strong>
                        等待连接的线程的处理方式
                      </strong>
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    先看
                    <span>
                       
                    </span>
                    <span style="color: #ff0000;">
                      <strong>
                        获取连接时的代码 和注释
                      </strong>
                    </span>
                    <span>
                        
                    </span>
                    大部分代码被精简了。 所以逻辑不通，看流程即可。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <div class="dp-highlighter" id="">
                  <div class="bar">
                    <div class="tools">
                      Java代码 
                      <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=%20%20synchronized%20(connectionPool)%20%7B%0A%20%20%20%20%20%20%20%20%20%20while%20(connection%20%3D%3D%20null)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(hostPool.freeConnections.size()%20%3E%200)%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%9C%89%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%AD%E6%9C%89%E7%A9%BA%E9%97%B2%E7%9A%84%E8%BF%9E%E6%8E%A5%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connection%20%3D%20connectionPool.getFreeConnection(hostConfiguration)%3B%0A%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if%20((hostPool.numConnections%20%3C%20maxHostConnections)%20%26%26%20(connectionPool.numConnections%20%3C%20maxTotalConnections))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%B2%A1%E6%9C%89%E7%A9%BA%E9%97%B2%E8%BF%9E%E6%8E%A5%EF%BC%8C%E4%BD%86%E6%98%AF%E6%BB%A1%E8%B6%B3%E5%89%8D%E6%96%87%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%9D%A1%E4%BB%B6%20%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E8%BF%9E%E6%8E%A5%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connection%20%3D%20connectionPool.createConnection(hostConfiguration)%3B%20%0A%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if%20((hostPool.numConnections%20%3C%20maxHostConnections)%20%26%26%20(connectionPool.freeConnections.size()%20%3E%200))%20%7B%0A%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%95%B4%E4%B8%AA%E8%BF%9E%E6%8E%A5%E6%95%B0%20%E6%B2%A1%E6%9C%89%E5%88%B0%E8%BE%BE%E6%9C%80%E5%A4%A7%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%9C%89%E7%A9%BA%E9%97%B2%E8%BF%9E%E6%8E%A5%EF%BC%88%E5%85%B6%E4%BB%96host%E6%B1%A0%E4%B8%AD%EF%BC%89%20%E5%88%99%E5%88%A0%E9%99%A4%E6%8E%89%E5%85%B6%E4%BB%96host%E4%B8%AD%E7%9A%84%E8%BF%9E%E6%8E%A5%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%9C%A8%E5%BD%93%E5%89%8Dhost%E6%B1%A0%E5%AD%90%E4%B8%AD%E5%88%9B%E5%BB%BA%E6%96%B0%E8%BF%9E%E6%8E%A5%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connectionPool.deleteLeastUsedConnection()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connection%20%3D%20connectionPool.createConnection(hostConfiguration)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E4%BB%A5%E4%B8%8A%E6%9D%A1%E4%BB%B6%E9%83%BD%E4%B8%8D%E6%BB%A1%E8%B6%B3%EF%BC%8C%20%E5%8F%AA%E8%83%BD%E5%B0%86%E5%BD%93%E5%89%8D%E7%BA%BF%E7%A8%8B%E7%9D%A1%E7%9C%A0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread%20%3D%20new%20WaitingThread()%3B%2F%2F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%8C%85%E8%A3%85%E7%B1%BB%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread.hostConnectionPool%20%3D%20hostPool%3B%2F%2F%E6%8C%87%E5%AE%9A%E6%89%80%E5%B1%9E%E7%9A%84host%E8%BF%9E%E6%8E%A5%E6%B1%A0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread.thread%20%3D%20Thread.currentThread()%3B%2F%2F%E5%B0%86%E5%BD%93%E5%89%8D%E7%BA%BF%E7%A8%8B%E8%B5%8B%E5%80%BC%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20startWait%20%3D%20System.currentTimeMillis%20()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20hostPool.waitingThreads.addLast(waitingThread)%3B%2F%2F%E5%B0%86%E7%BA%BF%E7%A8%8B%E5%8C%85%E8%A3%85%E7%B1%BB%20%E6%B7%BB%E5%8A%A0%E5%88%B0host%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%20%E7%AD%89%E5%BE%85%E5%88%97%E8%A1%A8%E4%B8%AD%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connectionPool.waitingThreads.addLast(waitingThread)%3B%2F%2F%E5%B0%86%E7%BA%BF%E7%A8%8B%E5%8C%85%E8%A3%85%E7%B1%BB%20%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%85%A8%E5%B1%80%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%20%E7%AD%89%E5%BE%85%E5%88%97%E8%A1%A8%E4%B8%AD%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connectionPool.wait(timeToWait)%3B%2F%2F%E6%B2%89%E7%9D%A1%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(InterruptedException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%A2%AB%E6%89%93%E6%96%AD%E6%98%AF%E6%A3%80%E6%9F%A5%20%E5%B8%83%E5%B0%94%E5%8F%98%E9%87%8FinterruptedByConnectionPool%20%E7%A1%AE%E5%AE%9A%E6%98%AF%20HTTP%20%E9%87%8A%E6%94%BE%E8%BF%9E%E6%8E%A5%E5%90%8E%20%E4%B8%BB%E5%8A%A8%E6%89%93%E6%96%AD%E7%9A%84%EF%BC%8C%E8%BF%98%E6%98%AF%E5%85%B6%E4%BB%96%E5%BC%82%E5%B8%B8%E5%8E%9F%E5%9B%A0%E6%89%93%E6%96%AD%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%98%AF%E8%87%AA%E5%B7%B1%E6%89%93%E6%96%AD%E7%9A%84%20catch%E4%BD%8F%E5%BC%82%E5%B8%B8%E5%90%8E%E4%BB%80%E4%B9%88%E4%B9%9F%E4%B8%8D%E5%81%9A%EF%BC%8C%E9%87%8D%E6%96%B0%E8%BF%9B%E5%85%A5while%E5%BE%AA%E7%8E%AF%E4%B8%AD%EF%BC%8C%E5%B0%9D%E8%AF%95%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(!waitingThread.interruptedByConnectionPool)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20IllegalThreadStateException(%22Interrupted%20while%20waiting%20in%20MultiThreadedHttpConnectionManager%22)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20finally%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(!waitingThread.interruptedByConnectionPool)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20hostPool.waitingThreads.remove(waitingThread)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connectionPool.waitingThreads.remove(waitingThread)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(useTimeout)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20endWait%20%3D%20System.currentTimeMillis%20()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20timeToWait%20-%3D%20(endWait%20-%20startWait)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"/>
                       
                      <a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;">
                        <img class="star" src="/images/icon_star.png" alt="收藏代码"/>
                        <img class="spinner" src="/images/spinner.gif" style="display:none"/>
                      </a>
                    </div>
                  </div>
                  <ol class="dp-j">
                    <li>
                      <span>
                        <span class="keyword">
                          synchronized
                        </span>
                        <span>
                           (connectionPool) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="keyword">
                          while
                        </span>
                        <span>
                           (connection == 
                        </span>
                        <span class="keyword">
                          null
                        </span>
                        <span>
                          ) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                    
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (hostPool.freeConnections.size() &gt; 
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ) {   
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                          
                        <span class="comment">
                          //有线程池中有空闲的连接
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                        connection = connectionPool.getFreeConnection(hostConfiguration);  
                      </span>
                    </li>
                    <li>
                      <span>
                          
                      </span>
                    </li>
                    <li>
                      <span>
                                    } 
                        <span class="keyword">
                          else
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           ((hostPool.numConnections &lt; maxHostConnections) &amp;&amp; (connectionPool.numConnections &lt; maxTotalConnections)) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                          
                        <span class="comment">
                          //没有空闲连接，但是满足前文的两个条件 可以创建新的连接
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                        connection = connectionPool.createConnection(hostConfiguration);   
                      </span>
                    </li>
                    <li>
                      <span>
                          
                      </span>
                    </li>
                    <li>
                      <span>
                                    } 
                        <span class="keyword">
                          else
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           ((hostPool.numConnections &lt; maxHostConnections) &amp;&amp; (connectionPool.freeConnections.size() &gt; 
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          )) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                          
                      </span>
                    </li>
                    <li>
                      <span>
                                          
                        <span class="comment">
                          //整个连接数 没有到达最大，并且有空闲连接（其他host池中） 则删除掉其他host中的连接，并且在当前host池子中创建新连接
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                        connectionPool.deleteLeastUsedConnection();  
                      </span>
                    </li>
                    <li>
                      <span>
                                        connection = connectionPool.createConnection(hostConfiguration);  
                      </span>
                    </li>
                    <li>
                      <span>
                                    } 
                        <span class="keyword">
                          else
                        </span>
                        <span>
                           {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                        
                        <span class="comment">
                          //以上条件都不满足， 只能将当前线程睡眠
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                        
                        <span class="keyword">
                          try
                        </span>
                        <span>
                           {   
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                          waitingThread = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           WaitingThread();
                        </span>
                        <span class="comment">
                          //创建一个线程包装类
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                          waitingThread.hostConnectionPool = hostPool;
                        <span class="comment">
                          //指定所属的host连接池
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                          waitingThread.thread = Thread.currentThread();
                        <span class="comment">
                          //将当前线程赋值           
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                          startWait = System.currentTimeMillis ();  
                      </span>
                    </li>
                    <li>
                      <span>
                                             
                      </span>
                    </li>
                    <li>
                      <span>
                                            hostPool.waitingThreads.addLast(waitingThread);
                        <span class="comment">
                          //将线程包装类 添加到host连接池的 等待列表中
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                            connectionPool.waitingThreads.addLast(waitingThread);
                        <span class="comment">
                          //将线程包装类 添加到全局连接池的 等待列表中
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                            connectionPool.wait(timeToWait);
                        <span class="comment">
                          //沉睡
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                        } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (InterruptedException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                               
                        <span class="comment">
                          //被打断是检查 布尔变量interruptedByConnectionPool 确定是 HTTP 释放连接后 主动打断的，还是其他异常原因打断
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                               
                        <span class="comment">
                          //是自己打断的 catch住异常后什么也不做，重新进入while循环中，尝试获取连接
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (!waitingThread.interruptedByConnectionPool) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                     
                        <span class="keyword">
                          throw
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           IllegalThreadStateException(
                        </span>
                        <span class="string">
                          "Interrupted while waiting in MultiThreadedHttpConnectionManager"
                        </span>
                        <span>
                          );  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 }  
                      </span>
                    </li>
                    <li>
                      <span>
                                        } 
                        <span class="keyword">
                          finally
                        </span>
                        <span>
                           {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                            
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (!waitingThread.interruptedByConnectionPool) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                hostPool.waitingThreads.remove(waitingThread);  
                      </span>
                    </li>
                    <li>
                      <span>
                                                connectionPool.waitingThreads.remove(waitingThread);  
                      </span>
                    </li>
                    <li>
                      <span>
                                            }  
                      </span>
                    </li>
                    <li>
                      <span>
                                            
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (useTimeout) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                endWait = System.currentTimeMillis ();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                timeToWait -= (endWait - startWait);  
                      </span>
                    </li>
                    <li>
                      <span>
                                            }  
                      </span>
                    </li>
                    <li>
                      <span>
                                        }  
                      </span>
                    </li>
                    <li>
                      <span>
                                    }  
                      </span>
                    </li>
                    <li>
                      <span>
                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                            }  
                      </span>
                    </li>
                  </ol>
                </div>
                <pre class="java" name="code" style="display: none;">
                    synchronized (connectionPool) {
          while (connection == null) {
              if (hostPool.freeConnections.size() &gt; 0) { 
                    //有线程池中有空闲的连接
                  connection = connectionPool.getFreeConnection(hostConfiguration);
 
              } else if ((hostPool.numConnections &lt; maxHostConnections) &amp;&amp; (connectionPool.numConnections &lt; maxTotalConnections)) {
                    //没有空闲连接，但是满足前文的两个条件 可以创建新的连接
                  connection = connectionPool.createConnection(hostConfiguration); 
 
              } else if ((hostPool.numConnections &lt; maxHostConnections) &amp;&amp; (connectionPool.freeConnections.size() &gt; 0)) {
 
                    //整个连接数 没有到达最大，并且有空闲连接（其他host池中） 则删除掉其他host中的连接，并且在当前host池子中创建新连接
                  connectionPool.deleteLeastUsedConnection();
                  connection = connectionPool.createConnection(hostConfiguration);
              } else {
                  //以上条件都不满足， 只能将当前线程睡眠
                  try { 
                    waitingThread = new WaitingThread();//创建一个线程包装类
                    waitingThread.hostConnectionPool = hostPool;//指定所属的host连接池
                    waitingThread.thread = Thread.currentThread();//将当前线程赋值           
                    startWait = System.currentTimeMillis ();
                     
                      hostPool.waitingThreads.addLast(waitingThread);//将线程包装类 添加到host连接池的 等待列表中
                      connectionPool.waitingThreads.addLast(waitingThread);//将线程包装类 添加到全局连接池的 等待列表中
                      connectionPool.wait(timeToWait);//沉睡
                  } catch (InterruptedException e) {
                         //被打断是检查 布尔变量interruptedByConnectionPool 确定是 HTTP 释放连接后 主动打断的，还是其他异常原因打断
                         //是自己打断的 catch住异常后什么也不做，重新进入while循环中，尝试获取连接
                           if (!waitingThread.interruptedByConnectionPool) {
                               throw new IllegalThreadStateException("Interrupted while waiting in MultiThreadedHttpConnectionManager");
                           }
                  } finally {
                      if (!waitingThread.interruptedByConnectionPool) {
                          hostPool.waitingThreads.remove(waitingThread);
                          connectionPool.waitingThreads.remove(waitingThread);
                      }
                      if (useTimeout) {
                          endWait = System.currentTimeMillis ();
                          timeToWait -= (endWait - startWait);
                      }
                  }
              }
          }
      }
                </pre>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      释放连接时
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    调用
                    <span>
                      notifyWaitingThread 
                    </span>
                    方法，结合上面的代码看：
                  </span>
                </p>
                <p class="MsoNormal">
                   
                </p>
                <div class="dp-highlighter" id="">
                  <div class="bar">
                    <div class="tools">
                      Java代码 
                      <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=%20public%20synchronized%20void%20notifyWaitingThread(HostConnectionPool%20hostPool)%20%7B%0A%20%0A%20%20%20%20%20%20%20%20%20%2F%2F%20find%20the%20thread%20we%20are%20going%20to%20notify%2C%20we%20want%20to%20ensure%20that%20each%0A%20%20%20%20%20%20%20%20%20%2F%2F%20waiting%20thread%20is%20only%20interrupted%20once%20so%20we%20will%20remove%20it%20from%0A%20%20%20%20%20%20%20%20%20%2F%2F%20all%20wait%20queues%20before%20interrupting%20it%0A%20%20%20%20%20%20%20%20%20WaitingThread%20waitingThread%20%3D%20null%3B%0A%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%96%E5%87%BA%20%E7%AD%89%E5%BE%85%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%90%8E%E5%8F%91%E9%80%81%20%20%20%20%20interrupt%20%E4%BF%A1%E5%8F%B7%E9%87%8F%EF%BC%8C%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20if%20(hostPool.waitingThreads.size()%20%3E%200)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread%20%3D%20(%20WaitingThread)%20hostPool.waitingThreads.removeFirst()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThreads.remove(waitingThread)%3B%0A%20%20%20%20%20%20%20%20%20%7D%20else%20if%20(waitingThreads%20.size()%20%3E%200)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread%20%3D%20(%20WaitingThread)%20waitingThreads.removeFirst()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread.hostConnectionPool.waitingThreads.remove(waitingThread)%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AF%BC%E8%87%B4%20%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%82%A3%E4%B8%AA%E6%96%B9%E6%B3%95%E4%B8%AD%20%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8%0A%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%EF%BC%9Ainterrupt%20%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%98%AF%E4%B8%80%E5%AE%9A%E4%BC%9A%E5%BC%95%E8%B5%B7%20interruptException%E7%9A%84%0A%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86interruptedByConnectionPool%20%E8%AE%BE%E7%BD%AE%E4%B8%BAtrue%20%E5%A5%BD%E6%A0%87%E6%98%8E%20%E6%98%AF%20HTTP%20client%20%E6%89%8B%E5%8A%A8%E6%89%93%E6%96%AD%E7%9A%84%E3%80%82%20%E8%BF%99%E6%98%AFHTTP%20client%E5%AF%B9%E4%BA%8E%E7%AD%89%E5%BE%85%E7%BA%BF%E7%A8%8B%E5%94%A4%E9%86%92%E6%96%B9%E5%BC%8F%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E8%B7%AF%0A%20%20%20%20%20%20%20%20%20if%20(waitingThread%20!%3D%20null)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread.interruptedByConnectionPool%20%3D%20true%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread.thread.interrupt()%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%7D" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"/>
                       
                      <a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;">
                        <img class="star" src="/images/icon_star.png" alt="收藏代码"/>
                        <img class="spinner" src="/images/spinner.gif" style="display:none"/>
                      </a>
                    </div>
                  </div>
                  <ol class="dp-j">
                    <li>
                      <span>
                        <span class="keyword">
                          public
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          synchronized
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          void
                        </span>
                        <span>
                           notifyWaitingThread(HostConnectionPool hostPool) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                          
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // find the thread we are going to notify, we want to ensure that each
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // waiting thread is only interrupted once so we will remove it from
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // all wait queues before interrupting it
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                WaitingThread waitingThread = 
                        <span class="keyword">
                          null
                        </span>
                        <span>
                          ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // 取出 等待的线程后发送     interrupt 信号量，
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                 
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (hostPool.waitingThreads.size() &gt; 
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                      </span>
                    </li>
                    <li>
                      <span>
                                    waitingThread = ( WaitingThread) hostPool.waitingThreads.removeFirst();  
                      </span>
                    </li>
                    <li>
                      <span>
                                    waitingThreads.remove(waitingThread);  
                      </span>
                    </li>
                    <li>
                      <span>
                                } 
                        <span class="keyword">
                          else
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (waitingThreads .size() &gt; 
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                      </span>
                    </li>
                    <li>
                      <span>
                                    waitingThread = ( WaitingThread) waitingThreads.removeFirst();  
                      </span>
                    </li>
                    <li>
                      <span>
                                    waitingThread.hostConnectionPool.waitingThreads.remove(waitingThread);  
                      </span>
                    </li>
                    <li>
                      <span>
                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // 导致 获取连接的那个方法中 捕获异常
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // 注：interrupt 信号量是一定会引起 interruptException的
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // 将interruptedByConnectionPool 设置为true 好标明 是 HTTP client 手动打断的。 这是HTTP client对于等待线程唤醒方式的核心思路
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (waitingThread != 
                        </span>
                        <span class="keyword">
                          null
                        </span>
                        <span>
                          ) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                    waitingThread.interruptedByConnectionPool = 
                        <span class="keyword">
                          true
                        </span>
                        <span>
                          ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                    waitingThread.thread.interrupt();  
                      </span>
                    </li>
                    <li>
                      <span>
                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                            }  
                      </span>
                    </li>
                  </ol>
                </div>
                <pre class="java" name="code" style="display: none;">
                   public synchronized void notifyWaitingThread(HostConnectionPool hostPool) {
 
         // find the thread we are going to notify, we want to ensure that each
         // waiting thread is only interrupted once so we will remove it from
         // all wait queues before interrupting it
         WaitingThread waitingThread = null;
         // 取出 等待的线程后发送     interrupt 信号量，
        
         if (hostPool.waitingThreads.size() &gt; 0) {
            
             waitingThread = ( WaitingThread) hostPool.waitingThreads.removeFirst();
             waitingThreads.remove(waitingThread);
         } else if (waitingThreads .size() &gt; 0) {
            
             waitingThread = ( WaitingThread) waitingThreads.removeFirst();
             waitingThread.hostConnectionPool.waitingThreads.remove(waitingThread);
         }
         // 导致 获取连接的那个方法中 捕获异常
         // 注：interrupt 信号量是一定会引起 interruptException的
         // 将interruptedByConnectionPool 设置为true 好标明 是 HTTP client 手动打断的。 这是HTTP client对于等待线程唤醒方式的核心思路
         if (waitingThread != null) {
             waitingThread.interruptedByConnectionPool = true;
             waitingThread.thread.interrupt();
         }
     }
                </pre>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <strong>
                      <span>
                         
                        <br/>
                      </span>
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    上面两端代码主要思路就是
                    <span>
                      : 
                    </span>
                    有空连接就直接用，没有则沉睡等待唤醒。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    其实用
                    <span>
                      interrupt
                    </span>
                    信号量 会引起
                    <span>
                      interruptException
                    </span>
                    异常，通过
                    <span>
                      catch
                    </span>
                    住异常来处理，是比较粗暴的。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    优雅的用
                    <span>
                       wait and notify
                    </span>
                    的方式 就不需要
                    <span>
                      catch
                    </span>
                    异常，同样能达到唤醒线程效果，而且很优雅。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      <span>
                        MultiThreadedHttpConnectionManager  
                      </span>
                    </strong>
                    <strong>
                      中对弱引用的使用
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      MultiThreadedHttpConnectionManager  
                    </span>
                    类中 还有一个
                    <span>
                       ReferenceQueueThread
                    </span>
                    类 是用来配合
                    <span>
                      HttpConnectionWithReference
                    </span>
                    （将连接用弱引用包裹后的对象）使用的
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    <img src="http://dl2.iteye.com/upload/attachment/0085/7132/d18cec7b-bd12-3c3e-932a-ca98b0233a52.png" alt=""/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    使用的方式是这样：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      1. 
                    </span>
                    创建连接时，用弱引用包裹住
                    <span>
                      Connection
                    </span>
                    对象放到
                    <em>
                      <span>
                        REFERENCE_TO_CONNECTION_SOURCE  
                      </span>
                    </em>
                    中，目的是防止在连接丢失的时候
                    <span>
                      Map
                    </span>
                    中的这个
                    <span>
                      HttpConnectionWithReference 
                    </span>
                    对象变成弱引用，
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                           
                    </span>
                    在
                    <span>
                      GC
                    </span>
                    回收时会被回收掉，防止内存泄露。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      2. 
                    </span>
                    首先明确的是，
                    <span>
                      JVM
                    </span>
                    会在
                    <span>
                      HttpConnectionWithReference 
                    </span>
                    被回收的时候，将他加入到
                    <span>
                      REFERENCE_QUEUE 
                    </span>
                    中。这是
                    <span>
                      JAVA
                    </span>
                    对于弱引用的规则。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      3. 
                    </span>
                    同时，在将
                    <span>
                      HttpConnectionWithReference  
                    </span>
                    放入
                    <span>
                      Map
                    </span>
                    时，启动一个子线程
                    <span>
                       ReferenceQueueThread  
                    </span>
                    去监听 这个
                    <span>
                      REFERENCE_QUEUE 
                    </span>
                    ，只要这个
                    <span>
                      REFERENCE_QUEUE  
                    </span>
                    有值（被
                    <span>
                      GC
                    </span>
                    回收的时候）
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                           
                    </span>
                    立马被取出来，将线程池可用连接的大小
                    <span>
                       -1 
                    </span>
                    。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      MultiThreadedHttpConnectionManager  
                    </span>
                    使用弱引用 确保了
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      1. connection
                    </span>
                    对象丢失时 内存的及时回收。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      2. 
                    </span>
                    搭配队列和子线程确保，连接丢失后线程池中可用连接数的次数可以修改。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    说到这里，
                    <span>
                      HTTP Client
                    </span>
                    的
                    <span>
                      MultiThreadedHttpConnectionManager  
                    </span>
                    类的绝大部分分方法已经解释完毕了。其中主要是省略掉了，发送和读取
                    <span>
                      HTTP 
                    </span>
                    报文的代码，没有太多技巧，以规则解析出来即可。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      总结：
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      1. 
                    </span>
                    在单纯的发送请求的场景下，使用
                    <span>
                      MultiThreadedHttpConnectionManager 
                    </span>
                    来代替
                    <span>
                      SimpleHTTPConnectionManger
                    </span>
                    是可行的，并且
                    <span>
                      MultiThreadedHttpConnectionManager 
                    </span>
                    的连接池机制也会提高发送请求的效率，
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      2. 
                    </span>
                    但是觉得不符合分布式应用间的借口调用，原因很简单，对每个
                    <span>
                      host
                    </span>
                    做了连接池，在一定情况下，这个限制是致命的，直接影响了接口的调用效率。严重影响调用的并发数。所以，在分布式应用的调用中不适合使用
                    <span>
                      MultiThreadedHttpConnectionManager 
                    </span>
                    。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      <span>
                        MultiThreadedHttpConnectionManager
                      </span>
                    </strong>
                    <strong>
                      类中几个值得注意的点：
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      <span>
                        1. 
                      </span>
                    </strong>
                    <strong>
                      连接的管理，特别是使用
                      <span>
                        WeakReference
                      </span>
                      包装
                      <span>
                        Connection
                      </span>
                      对象，然后结合一个子线程和
                      <span>
                        Queque
                      </span>
                      去确保对象被回收时，可以连接数的增加。
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      <span>
                        2. 
                      </span>
                    </strong>
                    <strong>
                      对于没有连接可用时，使用使当前线程睡眠的，在释放连接时 使用
                      <span>
                         
                      </span>
                    </strong>
                    <strong>
                      <span>
                        interrupt
                      </span>
                    </strong>
                    <strong>
                      信号量 是等待线程恢复的处理方式
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                     
                  </span>
                </p>
              </div>
              <div>
                <!-- 广告位：PC端-iteye博客详情页底部banner2-728*90 -->                <script>
//<![CDATA[

      (function() {
          var s = "_" + Math.random().toString(36).slice(2);
          document.write('<div id="' + s + '"></div>');
          (window.slotbydup=window.slotbydup || []).push({
              id: '4774193',
              container: s,
              size: '728,90',
              display: 'inlay-fix'
          });
      })();
      jQuery(function(){
        window.csdn.recommendSide({
          contentBox: "recommend",
          postBox: jQuery(".news-right-side"),
          query:'HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析',
          popu:'725'
        })
      });
    
//]]>
                </script>
                <div id="_tzfpm1x0jkl">
                </div>
                <script charset="utf-8" src="https://pos.baidu.com/dcsm?psi=4a5a8cb5da451917d8b062be88cc1a0c&amp;di=4774193&amp;dri=0&amp;dis=0&amp;dai=0&amp;ps=2257x18&amp;enu=encoding&amp;dcb=___adblockplus&amp;dtm=SSP_JSONP&amp;dvi=0.0&amp;dci=-1&amp;dpt=none&amp;tsr=0&amp;tpr=1548992581249&amp;ti=HTTP%20Client%20MultiThreadedHttpConnectionManager%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86%E7%B1%BB%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%20&amp;ari=2&amp;dbv=2&amp;drs=1&amp;pcs=1256x605&amp;pss=1256x605&amp;cfv=0&amp;cpl=0&amp;chi=1&amp;cce=true&amp;cec=UTF-8&amp;tlm=1548992579&amp;prot=2&amp;rw=605&amp;ltu=https%3A%2F%2Fliuinsect.iteye.com%2Fblog%2F1886237&amp;ecd=1&amp;uc=1024x768&amp;pis=-1x-1&amp;sr=1024x768&amp;tcn=1548992581&amp;exps=110010">
                </script>
                <a href="http://www.baidu.com/cb.php?c=IgF_pyfqnHmkPjT4P160IZ0qnfK9ujYzrHn1PHTz0Aw-5Hnsn16YnjT0TAq15HfLP1fkrHn0T1YkuWfsm1f4uH6znj7huW-W0AwY5HDdPj64rHcdrjD0IgF_5y9YIZK1rBtEuywdQhP1uA38UhNYQLwETA-WQvG9IhDk5LNYUNq1ULNzmvRqmh78UhNz5LNYUNq1ULNzmvRqmhkEuv-Yug--0ZFb5Hn0mhYqnfKsTWYs0ZNGujYkPHTYn1mk0AqGujYknWb3rjDY0APGujYLn1bdn1n0ULI85H00TZbqnW0v0APzm1YknjTdn0" target="_blank" style="text-decoration:none;">
                  <div style="font-size:17px;color:#f13d3d;font-family: SF Pro Display,Roboto,Noto,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,sans-serif;width:728px;height:25px;font-weight:bold;">
                    2019开年报告：Java坐稳榜首，彻底甩掉C++!
                  </div>
                  <div style="font-size:13px;color:#666;font-family: SF Pro Display,Roboto,Noto,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,sans-serif;height:35px;margin-top:10px;">
                    厉害了，我的java！
                  </div>
                </a>
              </div>
              <div id="bottoms" class="clearfix">
                <div id="share_weibo">
                  分享到：
      
                  <a data-type="sina" href="javascript:;" title="分享到新浪微博">
                    <img src="/images/sina.jpg"/>
                  </a>
                  <a data-type="qq" href="javascript:;" title="分享到腾讯微博">
                    <img src="/images/tec.jpg"/>
                  </a>
                </div>
              </div>
              <div class="blog_nav">
                <div class="pre_next">
                  <a href="/blog/1917545" class="next" title="Mysql主从同步配置">
                    Mysql主从同步配置
                  </a>
                  
      |
      
                  <a href="/blog/1662857" class="pre" title="java中wait 信号量和notify信号量的使用">
                    java中wait 信号量和notify信号量的使用
                  </a>
                </div>
              </div>
              <div class="blog_bottom">
                <ul>
                  <li>
                    2013-06-13 16:35
                  </li>
                  <li>
                    浏览 29530
                  </li>
                  <li>
                    <a href="#comments">
                      评论(4)
                    </a>
                  </li>
                  <li>
                    分类:
                    <a href="https://www.iteye.com/blogs/category/opensource">
                      开源软件
                    </a>
                  </li>
                  <li class="last">
                    <a href="https://www.iteye.com/wiki/blog/1886237" target="_blank" class="more">
                      查看更多
                    </a>
                  </li>
                </ul>
              </div>
              <div class="blog_comment">
                <h5>
                  评论
                </h5>
                <a id="comments" name="comments">
                </a>
                <div id="bc2315317">
                  <div class="comment_title">
                    
    4 楼
    
                    <a href="https://liuinsect.iteye.com" target="_blank" title="liuInsect">
                      liuInsect
                    </a>
                    
    2013-06-15  
    
    
  
                  </div>
                  <div class="comment_content">
                    <div class="quote_title">
                      ziwuzu 写道
                    </div>
                    <div class="quote_div">
                      <div class="quote_title">
                        liuInsect 写道
                      </div>
                      <div class="quote_div">
                        <div class="quote_title">
                          ziwuzu 写道
                        </div>
                        <div class="quote_div">
                          为什么不适合分布式应用？有什么效率问题？
                        </div>
                        <br/>
                        <br/>
                        在没有一个统一的 远程调用框架的时候 用HTTP Client 是可以的，或者说只能用HTTP Client
                        <br/>
                        <br/>
                        但是使用这种连接池的Manager 不合适的原因是 它的连接池 是基于Host的。同一个Host的最大请求量受连接池大小限制。 你说适合分布式环境么？
                        <br/>
                        <br/>
                        <br/>
                      </div>
                      <br/>
                      如果是连接池大小的问题，可以修改连接池的大小。
                    </div>
                    <br/>
                    <br/>
                    <br/>
                    但是它低连接数的时候几十个，高并发的时候 峰值成百上千个，怎么搞？
                    <br/>
                    是不是都因为设置的这个值阻塞在这里了~？
                    <br/>
                  </div>
                </div>
                <div id="bc2315302">
                  <div class="comment_title">
                    
    3 楼
    
                    <a href="https://ziwuzu.iteye.com" target="_blank" title="ziwuzu">
                      ziwuzu
                    </a>
                    
    2013-06-15  
    
    
  
                  </div>
                  <div class="comment_content">
                    <div class="quote_title">
                      liuInsect 写道
                    </div>
                    <div class="quote_div">
                      <div class="quote_title">
                        ziwuzu 写道
                      </div>
                      <div class="quote_div">
                        为什么不适合分布式应用？有什么效率问题？
                      </div>
                      <br/>
                      <br/>
                      在没有一个统一的 远程调用框架的时候 用HTTP Client 是可以的，或者说只能用HTTP Client

                      <br/>
                      <br/>
                      但是使用这种连接池的Manager 不合适的原因是 它的连接池 是基于Host的。同一个Host的最大请求量受连接池大小限制。 你说适合分布式环境么？

                      <br/>
                      <br/>
                      <br/>
                    </div>
                    <br/>
                    如果是连接池大小的问题，可以修改连接池的大小。
                  </div>
                </div>
                <div id="bc2315161">
                  <div class="comment_title">
                    
    2 楼
    
                    <a href="https://liuinsect.iteye.com" target="_blank" title="liuInsect">
                      liuInsect
                    </a>
                    
    2013-06-14  
    
    
  
                  </div>
                  <div class="comment_content">
                    <div class="quote_title">
                      ziwuzu 写道
                    </div>
                    <div class="quote_div">
                      为什么不适合分布式应用？有什么效率问题？
                    </div>
                    <br/>
                    <br/>
                    在没有一个统一的 远程调用框架的时候 用HTTP Client 是可以的，或者说只能用HTTP Client
                    <br/>
                    <br/>
                    但是使用这种连接池的Manager 不合适的原因是 它的连接池 是基于Host的。同一个Host的最大请求量受连接池大小限制。 你说适合分布式环境么？
                    <br/>
                    <br/>
                    <br/>
                  </div>
                </div>
                <div id="bc2315157">
                  <div class="comment_title">
                    
    1 楼
    
                    <a href="https://ziwuzu.iteye.com" target="_blank" title="ziwuzu">
                      ziwuzu
                    </a>
                    
    2013-06-14  
    
    
  
                  </div>
                  <div class="comment_content">
                    为什么不适合分布式应用？有什么效率问题？
                  </div>
                </div>
              </div>
              <div class="blog_comment">
                <h5>
                  发表评论
                </h5>
                <p style="text-align:center; margin-top:30px;margin-bottom:0px;">
                  <a href="/login" style="background-color:white;">
                    <img src="/images/login_icon.png" style="vertical-align:middle; margin-right: 10px;"/>
                  </a>
                  <a href="/login">
                      您还没有登录,请您登录后再发表评论 
                  </a>
                </p>
              </div>
            </div>
            <div class="boutique-curr-box blog_comment">
              <div class="boutique-curr clearfix" id="album_detail_wrap">
                <h5 class="h3titles">
                  相关资源推荐
                </h5>
                <ul style="margin-top: 8px" class="clearfix">
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/kobejayandy/article/details/16921265" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/kobejayandy/article/details/16921265,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/kobejayandy/article/details/16921265,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient多线程并发问题">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      多线程并发问题
                    </a>
                    <p>
                      
                这篇文章概括了怎样在多线程环境下安全的使用
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      。
建立
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      

在
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      中使用多线程的一个主要原因是可以一次执行多个方法。在执行期间，每一个方法都使用一个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      Connection实例。由于在同一时间多个
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      只能安全地用于单一线程和方法和有限的资源，我们就必须确保
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      分配给正确的方法。而
                      <em class="related_suggestion_highlight">
                        MultiThreadedHttpConnectionManager
                      </em>
                      完全可以
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/hitustc/article/details/4843670" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/hitustc/article/details/4843670,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/hitustc/article/details/4843670,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="[转载]HTTPCLIENT性能调优">
                      [转载]
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      <em class="related_suggestion_highlight">
                        CLIENT
                      </em>
                      性能调优
                    </a>
                    <p>
                      
                 
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      的默认配置提供了最大的可靠性和标准的遵守，而不是性能。（哪个标准？难道是指
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      协议规范？）有几个配置选项和优化技术，可以显着提高
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                       的性能表现。 本文档给出了对
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      如何调优的大纲。1.重用
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      <em class="related_suggestion_highlight">
                        CLIENT
                      </em>
                      实例。          一般说来，建议一个通讯组件，甚至说一个应用软件就始终维持一个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      对象实例存在。
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/u011402596/article/details/44619443" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/u011402596/article/details/44619443,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/u011402596/article/details/44619443,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient 多线程处理">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                       多线程处理
                    </a>
                    <p>
                      
                为什么要使用单例
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      ？在发出
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      请求前，我们先创建了一个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      对象。那么，在实际项目中，我们很可能在多处需要进行
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      通信，这时候我们不需要为每个请求都创建一个新的
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      。因为
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      就像一个小型的浏览器，对于整个应用，我们只需要一个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      就够了。看到这里，一定有人心里想，这有什么难的，用单例啊！！那么，哪里不对劲呢？或者说
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/genius5200/article/details/7875334" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/genius5200/article/details/7875334,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/genius5200/article/details/7875334,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="Httpclient默认连接数导致性能瓶颈问题">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      默认
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      数导致性能瓶颈问题
                    </a>
                    <p>
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      ConnectionManager 
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      ConnectionManager = new 
                      <em class="related_suggestion_highlight">
                        MultiThreadedHttpConnectionManager
                      </em>
                      ();
        
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      ConnectionManagerParams params = 
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      ConnectionManager.getParams();
        params.setConnectionTi
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/chuchus/article/details/50594664" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/chuchus/article/details/50594664,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/chuchus/article/details/50594664,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpComponents 之客户端连接池">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      Components 之客户端
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      池
                    </a>
                    <p>
                      
                1.配置参数
org.apache.
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      .impl.conn.Pooling
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      ConnectionManager
类。用于管理
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      池。调用默认构造函数即可得到。
org.apache.
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      .impl.conn.Pooling
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      ConnectionManager.setMaxTotal(int max)

设置最大的
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      数，即
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/qq_30366667/article/details/81675644" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_30366667/article/details/81675644,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_30366667/article/details/81675644,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="SparkSession 内部原理就简单解析">
                      SparkSession 内部原理就简单
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                    </a>
                    <p>
                      
                自己下一个
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      看到导的包就知道里面包含了很多内容

import java.io.Closeable
import java.util.concurrent.atomic.AtomicReference

import scala.collection.JavaConverters._
import scala.reflect.runtime.universe.TypeTag
import sca...
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/qijiqiguai/article/details/76034847" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76034847,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76034847,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient源码解析系列：第二篇：极简版实现">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                      系列：第二篇：极简版实现
                    </a>
                    <p>
                      
                从Minimal
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      从名字可以看出，是一个极简可以用的版本，是核心设计的原初模型。所以我们就从最精简的开始分析。
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/dwater/article/details/1811414" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/dwater/article/details/1811414,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/dwater/article/details/1811414,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="解读开源软件的七种盈利模式">
                      解读
                      <em class="related_suggestion_highlight">
                        开源软件
                      </em>
                      的七种盈利模式
                    </a>
                    <p>
                      
                法律条款都公开，但律师照样赚钱! 医学知识都公开，但医生照样赚钱! 软件行业由于其技术的特殊性，软件存在源代码与二进制代码之分，存在编译过程。导致源代码一直成为盈利的一个新卖点。但任何行业都一样，都存在一个发展和变迁的过程。软件行业也是如此。如今
                      <em class="related_suggestion_highlight">
                        开源软件
                      </em>
                      已经在全球范围内迅猛发展。开源产品已经完全可以替代现有商业软件。包括操作系统Linux，浏览器FireFox，开源ERP/CRM信息化方案，服
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/u012469740/article/details/59191309" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/u012469740/article/details/59191309,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/u012469740/article/details/59191309,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="CobarClient源码分析">
                      Cobar
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      分析
                    </a>
                    <p>
                      
                前言
Cobar 
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      是一个阿里开源的轻量级分布式数据访问层，基于Ibatis和Spring框架。
最近公司的项目在分表分库时使用此框架，起初不明白为什么使用这么老，没人维护的开源框架。后来想想是根据现有代码，迁移起来简单吧。

既然用了，就还是仔细看下，深入的了解一下Cobar
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      的原理吧。


正文
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/qijiqiguai/article/details/76213018" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76213018,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76213018,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient源码解析系列：第三篇：发送-接收的底层过程">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                      系列：第三篇：发送-接收的底层过程
                    </a>
                    <p>
                      
                DefaultB
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      Connection，而它又是继承自B
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      ConnectionBase 来看 
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                       的Socket交互流程
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      。
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/aiqing0119/article/details/48468215" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/aiqing0119/article/details/48468215,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/aiqing0119/article/details/48468215,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="﻿﻿http连接池使用">
                      ﻿﻿
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      池使用
                    </a>
                    <p>
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      4.X 升级 入门 + 
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      池使用




                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      ://blog.csdn.net/shootyou/article/details/6415248






在一次服务器异常的排查过程当中（服务器异常排查的过程我会另起文章），我们决定使用
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      4.X替代
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      3.X或者
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      Connection。
为什么使用Ht
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/phantom_111/article/details/76688252" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/phantom_111/article/details/76688252,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/phantom_111/article/details/76688252,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="gRPC-transport包源码分析">
                      gRPC-transport包
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      分析
                    </a>
                    <p>
                      
                gRPC是基于
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      /2标准和proto协议开发的，gRPC的很多特性都依赖于
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      /2标准提供。gRPC设计的四种模式是基于底层
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      /2的流的概念。transport包是基于
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      /2标准的实现，提供了流控等特性。流控transport提供基于connection和stream的两级流控。-------------------------------------gRPC流控默认值----
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/qijiqiguai/article/details/76034767" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76034767,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76034767,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient源码解析系列：第一篇：总览">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                      系列：第一篇：总览
                    </a>
                    <p>
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                      系列：第一篇：总览。
最最核心的
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      接口。
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/cpzhong/article/details/7417336" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/cpzhong/article/details/7417336,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/cpzhong/article/details/7417336,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="Httpclient的会话保持引起的线程安全问题">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      的会话保持引起的
                      <em class="related_suggestion_highlight">
                        线程安全
                      </em>
                      问题
                    </a>
                    <p>
                      
                这两天线上出现一个问题，通过
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      来抓取页面，服务端在页面渲染的时候出现了串号现象。
首先看下代码，controller中代码如下：
request.getSession().setAttribute("sid", id);
vm页面再通过$!request.session.getAttribute("sid")获取参数值，这代码很常见，看起来单线程和多线程并发都不会有问题，因
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/yi_master/article/details/80511767" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/yi_master/article/details/80511767,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/yi_master/article/details/80511767,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="彻底掌握网络通信（四）Android源码中HttpClient的发送框架解析">
                      彻底掌握网络通信（四）Android
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      中
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      的发送框架
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                    </a>
                    <p>
                      
                前面简单说了下
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      在不同android版本的配置，这篇主要介绍下Android中
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      的执行全流程
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/fishmai/article/details/51786291" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/fishmai/article/details/51786291,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/fishmai/article/details/51786291,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="开源软件架构－GDB">
                      <em class="related_suggestion_highlight">
                        开源软件
                      </em>
                      架构－GDB
                    </a>
                    <p>
                      
                GDB，即GNU调试器(GNU Debugger)。它诞生自
                      <em class="related_suggestion_highlight">
                        开源软件
                      </em>
                      基金会 (Free Software Foundation)成立之初的第一批程序，并一直是免费和
                      <em class="related_suggestion_highlight">
                        开源软件
                      </em>
                      系统中的主要成员。最初GDB只是 Unix 系统上一个简单的
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      层次的调试器，代码量不过数千行 C 代码，后来逐步发展壮大，拓展到包括嵌入式系统在内多个平台，代码量也达到了上百万行。


原文地址：
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      ://aosab
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/yan8024/article/details/46456375" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/yan8024/article/details/46456375,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/yan8024/article/details/46456375,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="使用线程安全的单例模式HttpClient，及HttpClient和Application的融合">
                      使用
                      <em class="related_suggestion_highlight">
                        线程安全
                      </em>
                      的单例模式
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      ，及
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      和Application的融合
                    </a>
                    <p>
                      
                上文简单介绍了
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      和Tomcat服务器的交互，主角是
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      ,然后它跟服务器交互有两种方式即get和post。所以这个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      就类似于电脑上用的浏览器。当我打开多个网页的时候，并不需要开一个网页就开一个浏览器，而是一个浏览器上面开了好几个网页。对应于
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      ，即无需
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      一次就new一个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      。一般，我们希望一个应用里就一个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      C
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/kifile/article/details/57572258" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/kifile/article/details/57572258,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/kifile/article/details/57572258,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="ZooKeeper源码学习笔记(1)--client端解析">
                      ZooKeeper
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      学习笔记(1)--
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      端
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                    </a>
                    <p>
                      
                ZooKeeper 
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      学习笔记(1)  
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/xgjianstart/article/details/70143365" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/xgjianstart/article/details/70143365,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/xgjianstart/article/details/70143365,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="elasticsearch源码分析之Rest/RPC 接口解析(八)">
                      elasticsearch
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      分析之Rest/RPC 接口
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                      (八)
                    </a>
                    <p>
                      
                一些基础知识

早先ES的
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      协议支持还是依赖Jetty的,现在不管是Rest还是RPC都是直接基于Netty了。

另外值得一提的是，ES 是使用Google的Guice 进行模块管理，所以了解Guice的基本使用方式有助于你了解ES的代码组织。

ES 的启动类是 org.elasticsearch.bootstrap.Bootstrap。在这里进行一些配置和环境初始化后会启动
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/flying_panda/article/details/45045881" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/flying_panda/article/details/45045881,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/flying_panda/article/details/45045881,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="zookeeper进阶（一）客户端建立连接及相应的源码分析">
                      zookeeper进阶（一）客户端建立
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      及相应的
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      分析
                    </a>
                    <p>
                      
                目录
zookeeper创建node 一个简单的实现 
对应
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      分析
zookeeper客户端建立
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      package zk;
import java.io.IOException;
import java.util.concurrent.CountDownLatch;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookee
              
                    </p>
                  </li>
                </ul>
              </div>
            </div>
          </div>
          <script type="text/javascript">
//<![CDATA[

  dp.SyntaxHighlighter.HighlightAll('code', true, true);

  $$('#main .blog_content pre[name=code]').each(function(pre, index){ // blog content
    var post_id = 1886237;
    var location = window.location;
    source_url = location.protocol + "//" + location.host + location.pathname + location.search;
    pre.writeAttribute('codeable_id', post_id);
    pre.writeAttribute('codeable_type', "Blog");
    pre.writeAttribute('source_url', source_url);
    pre.writeAttribute('pre_index', index);
    pre.writeAttribute('title', 'HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析');
  });

  fix_image_size($$('div.blog_content img'), 700);

  function processComment() {
    $$('#main .blog_comment > div').each(function(comment){// comment
      var post_id = comment.id.substr(2);
      $$("#"+comment.id+" pre[name=code]").each(function(pre, index){
        var location = window.location;
        source_url = location.protocol + "//" + location.host + location.pathname + location.search;
        source_url += "#" + comment.id;
        pre.writeAttribute('codeable_id', post_id);
        pre.writeAttribute('codeable_type', "BlogComment");
        pre.writeAttribute('source_url', source_url);
        pre.writeAttribute('pre_index', index);
        pre.writeAttribute('title', 'HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析');
      });
    });
  }

  function quote_comment(id) {
    new Ajax.Request('/editor/quote', {
      parameters: {'id':id, 'type':'BlogComment'},
      onSuccess:function(response){editor.bbcode_editor.textarea.insertAfterSelection(response.responseText);
        Element.scrollTo(editor.bbcode_editor.textarea.element);}
    });
  }

  code_favorites_init();
  processComment();
  new WeiboShare({share_buttons: $('share_weibo'), img_scope: $('blog_content')});

//]]>
          </script>
        </div>
        <div class="blog-sidebar">
          <div class="blog-sidebar-fixed">
            <div class="news-right-side">
            </div>
            <div class="persion_article">
              <div class="right_box footer_box csdn-tracking-statistics" data-mod="popu_475" data-dsm="post">
                <h3 class="feed_new_tit">
                  <span class="line">
                  </span>
                  <span class="txt">
                    联系我们
                  </span>
                </h3>
                <div class="contact-box" id="footer-contact-box">
                  <div class="img-box">
                    <a href="https://bbs.csdn.net/forums/Service?utm_source=csdn_footer" target="_blank">
                      <img src="https://csdnimg.cn/pubfooter/images/csdn_cs_qr.png" alt="微信客服" style="padding: 6px;"/>
                    </a>
                    <p class="app-text">
                      微信客服
                    </p>
                  </div>
                  <div class="img-box fr">
                    <a href="http://wpa.b.qq.com/cgi/wpa.php?ln=1&amp;key=XzgwMDE4MDEwNl80ODc3MzVfODAwMTgwMTA2XzJf" target="_blank">
                      <img style="padding:6px;" src="https://csdnimg.cn/pubfooter/images/csdn-kf.png" alt="QQ客服"/>
                    </a>
                    <p class="app-text">
                      QQ客服
                    </p>
                  </div>
                </div>
                <div class="contact-info">
                  <p>
                    <svg width="16" height="16" xmlns="http://www.w3.org/2000/svg">
                      <path d="M2.167 2h11.666C14.478 2 15 2.576 15 3.286v9.428c0 .71-.522 1.286-1.167 1.286H2.167C1.522 14 1 13.424 1 12.714V3.286C1 2.576 1.522 2 2.167 2zm-.164 3v1L8 10l6-4V5L8 9 2.003 5z" fill="#5c5c5c" fill-rule="evenodd"/>
                    </svg>
                    <a href="mailto:webmaster@csdn.net" target="_blank">
                      <span class="txt">
                        kefu@csdn.net
                      </span>
                    </a>
                    <em class="width126">
                      <svg t="1538013544186" width="17" height="17" style="" viewbox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="23556" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <defs>
                          <style type="text/css"/>
                        </defs>
                        <path d="M902.60033922 650.96445566c-18.0718526-100.84369837-94.08399771-166.87723736-94.08399771-166.87723737 10.87530062-91.53186599-28.94715402-107.78733693-28.94715401-107.78733691C771.20003413 93.08221664 517.34798062 98.02553561 511.98620441 98.16348824 506.65661791 98.02553561 252.75857992 93.08221664 244.43541101 376.29988138c0 0-39.79946279 16.25547094-28.947154 107.78733691 0 0-75.98915247 66.03353901-94.0839977 166.87723737 0 0-9.63372291 170.35365477 86.84146124 20.85850523 0 0 21.70461757 56.79068296 61.50407954 107.78733692 0 0-71.1607951 23.19910867-65.11385185 83.46161052 0 0-2.43717093 67.16015592 151.93232126 62.56172014 0 0 108.5460788-8.0932473 141.10300432-52.14626271H526.33792324c32.57991817 44.05301539 141.10300431 52.1462627 141.10300431 52.14626271 154.3235077 4.59843579 151.95071457-62.56172013 151.95071457-62.56172014 6.00095876-60.26250183-65.11385185-83.46161053-65.11385185-83.46161052 39.77647014-50.99665395 61.4810877-107.78733693 61.4810877-107.78733692 96.45219231 149.49514952 86.84146124-20.85850523 86.84146125-20.85850523" p-id="23557" fill="#5c5c5c"/>
                      </svg>
                      <a href="http://wpa.b.qq.com/cgi/wpa.php?ln=1&amp;key=XzgwMDE4MDEwNl80ODc3MzVfODAwMTgwMTA2XzJf" class="qqcustomer_s" target="_blank">
                        <span class="txt">
                          QQ客服
                        </span>
                      </a>
                    </em>
                  </p>
                  <p>
                    <em class="width126">
                      <svg t="1538012951761" width="17" height="17" style="" viewbox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="23083" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <defs>
                          <style type="text/css"/>
                        </defs>
                        <path d="M466.4934485 880.02006511C264.6019863 859.18313878 107.13744214 688.54706608 107.13744214 481.14947309 107.13744214 259.68965394 286.68049114 80.14660493 508.14031029 80.14660493s401.00286817 179.54304901 401.00286814 401.00286816v1.67343191C908.30646249 737.58941724 715.26799489 943.85339507 477.28978337 943.85339507c-31.71423369 0-62.61874229-3.67075386-92.38963569-10.60739903 30.09478346-11.01226158 56.84270313-29.63593923 81.5933008-53.22593095z m-205.13036267-398.87059202a246.77722444 246.77722444 0 0 0 493.5544489 0 30.85052691 30.85052691 0 0 0-61.70105383 0 185.07617062 185.07617062 0 0 1-370.15234125 0 30.85052691 30.85052691 0 0 0-61.70105382 0z" p-id="23084" fill="#5c5c5c"/>
                      </svg>
                      <a href="http://bbs.csdn.net/forums/Service" target="_blank">
                        <span class="txt">
                          客服论坛
                        </span>
                      </a>
                    </em>
                    <svg t="1538013874294" width="17" height="17" style="" viewbox="0 0 1194 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="23784" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <defs>
                        <style type="text/css"/>
                      </defs>
                      <path d="M1031.29689505 943.85339507h-863.70679012A71.98456279 71.98456279 0 0 1 95.60554212 871.86883228v-150.85178906c0-28.58329658 16.92325492-54.46750945 43.13135785-65.93861527l227.99160176-99.75813425c10.55341735-4.61543317 18.24580594-14.0082445 20.72896295-25.23643277l23.21211998-105.53417343a71.95757195 71.95757195 0 0 1 70.28414006-56.51881307h236.95255971c33.79252817 0 63.02360485 23.5090192 70.28414004 56.51881307l23.21211997 105.53417343c2.48315701 11.25517912 10.17554562 20.62099961 20.72896296 25.23643277l227.99160177 99.75813425a71.98456279 71.98456279 0 0 1 43.13135783 65.93861527v150.85178906A71.98456279 71.98456279 0 0 1 1031.26990421 943.85339507z m-431.85339506-143.94213475c143.94213474 0 143.94213474-48.34058941 143.94213474-107.96334876s-64.45411922-107.96334877-143.94213474-107.96334877c-79.51500637 0-143.94213474 48.34058941-143.94213475 107.96334877s0 107.96334877 143.94213475 107.96334876zM1103.254467 296.07330247v148.9894213a35.97878598 35.97878598 0 0 1-44.15700966 35.03410667l-143.94213473-33.57660146a36.0057768 36.0057768 0 0 1-27.80056231-35.03410668V296.1002933c-35.97878598-47.98970852-131.95820302-71.98456279-287.91126031-71.98456279S347.53801649 248.11058478 311.53223967 296.1002933v115.385829c0 16.73431906-11.52508749 31.25538946-27.80056233 35.03410668l-143.94213473 33.57660146A35.97878598 35.97878598 0 0 1 95.63253297 445.06272377V296.07330247C162.81272673 152.13116772 330.77670658 80.14660493 599.47049084 80.14660493s436.63077325 71.98456279 503.81096699 215.92669754z" p-id="23785" fill="#5c5c5c"/>
                    </svg>
                    400-660-0108 
                  </p>
                  <p style="text-align:center">
                    工作时间 8:30-22:00
                  </p>
                </div>
                <div class="bg-gray">
                  <div class="feed_copyright">
                    <p>
                      <a class="right-dotte" href="//www.csdn.net/company/index.html#about" target="_blank">
                        关于我们
                      </a>
                      <a href="//www.csdn.net/company/index.html#recruit" target="_blank" class="right-dotte">
                        招聘
                      </a>
                      <a href="//www.csdn.net/company/index.html#contact" target="_blank" class="right-dotte">
                        广告服务
                      </a>
                      <a href="https://www.csdn.net/gather/A" target="_blank" class="footer_baidu">
                                    网站地图
                      </a>
                    </p>
                    <p class="fz12_baidu">
                      <a href="https://zn.baidu.com/cse/home/index" target="_blank">
                        <svg width="13" height="14" xmlns="http://www.w3.org/2000/svg">
                          <path d="M8.392 7.013c1.014 1.454 2.753 2.8 2.753 2.8s1.303 1.017.47 2.98c-.833 1.962-3.876.942-3.876.942s-1.122-.36-2.424-.072c-1.303.291-2.426.181-2.426.181s-1.523.037-1.957-1.888c-.434-1.927 1.52-2.982 1.666-3.161.145-.183 1.159-.873 1.81-1.963.653-1.09 2.608-1.962 3.984.181zm1.23 5.706V9.346H8.64v2.534h-.937s-.3-.044-.356-.285V9.33l-.925.015v2.518s.042.627.925.855h2.277zm-3.685.013V7.951l-.896-.014v1.295H3.987s-1.054.086-1.422 1.28c-.129.798.114 1.266.156 1.368.043.099.383.682 1.238.852h1.978zm-2.433-1.45c-.087-.286.013-.613.057-.741.042-.128.228-.427.61-.54h.855v1.948h-.797s-.555-.029-.725-.668zm6.877-8.775c-.143.909-.865 2.108-1.99 1.962-1.121-.144-1.375-1.16-1.267-2.179C7.214 1.458 8.21.18 9.007.364c.796.18 1.52 1.235 1.374 2.143zm-4.09-.345c0 1.197-.68 2.164-1.52 2.164S3.25 3.36 3.25 2.162C3.25.967 3.932 0 4.77 0c.842 0 1.52.967 1.52 2.162zm4.854 2.09c1.34 0 1.701 1.309 1.701 1.743 0 .438.182 2.29-1.485 2.326-1.667.037-1.737-1.126-1.737-1.96 0-.874.179-2.11 1.52-2.11zm-7.93.581c.045.398.253 2.217-1.27 2.544C.427 7.704-.14 5.947.028 5.124c0 0 .18-1.78 1.412-1.89.98-.085 1.7.986 1.774 1.6z" fill="#999" fill-rule="evenodd"/>
                        </svg>
                        <em>
                          百度提供站内搜索
                        </em>
                      </a>
                       
                      <a href="http://www.miibeian.gov.cn/" target="_blank" class="ml14">
                        京ICP证19004658号
                      </a>
                    </p>
                    <p class="fz12_baidu">
                      ©1999-2019 北京创新乐知网络技术有限公司 
                    </p>
                  </div>
                </div>
                <div class="allow-info-box">
                  <p>
                    <a href="http://www.hd315.gov.cn/beian/view.asp?bianhao=010202001032100010" target="_blank">
                      <span>
                        经营性网站备案信息
                      </span>
                    </a>
                    <em class="width126">
                      <a href="http://www.cyberpolice.cn/" target="_blank">
                        <span>
                          网络110报警服务
                        </span>
                      </a>
                    </em>
                  </p>
                  <p>
                    <a href="http://www.bjjubao.org/" target="_blank">
                      <span>
                        北京互联网违法和不良信息举报中心
                      </span>
                    </a>
                  </p>
                  <p>
                    <a href="http://www.12377.cn/" target="_blank">
                      <span>
                        中国互联网举报中心
                      </span>
                    </a>
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
        <script>
//<![CDATA[

        setTimeout(function () {
          var naviga_offsetTop = 0;

          function onload_function() {
            naviga_offsetTop = jQuery("#nav_show_top_stop").position().top;
            jQuery(window).bind("scroll", naviga_stay_top);
            jQuery(window).bind("mousewheel", naviga_stay_top);
            jQuery(document).bind("scroll", naviga_stay_top);
            jQuery(document).bind("mousewheel", naviga_stay_top);
          }

          function naviga_stay_top() {

            var scrollTop = jQuery(document).scrollTop();
            if (scrollTop > (naviga_offsetTop + 250)) {
              jQuery("#nav_show_top_stop").css({
                "position": "fixed"
              });
              jQuery("#nav_show_top_stop").css({
                "top": "0px"
              });
            } else {
              jQuery("#nav_show_top_stop").css({
                "position": "fixed"
              });
              jQuery("#nav_show_top_stop").css({
                "top": naviga_offsetTop + 250 - scrollTop + "px"
              });
            }
          }
          jQuery(document).ready(onload_function());
        }, 200);
      
//]]>
        </script>
      </div>
      <script>
//<![CDATA[

          setTimeout(function () {
              not_loading = true;
              pageNum = 3;
              oList = jQuery("#album_detail_wrap");
              jQuery(window).scroll(function() {
                  var scrollTop = jQuery(this).scrollTop();
                  var scrollHeight = jQuery(document).height() ;
                  var windowHeight = jQuery(this).height();
                  if (scrollTop + windowHeight >= scrollHeight) {
                      if(not_loading){
                          refreshMore();
                          setTimeout(function(){
                              getMore();
                          },100);
                      }else{
                          jQuery(".dl_more").remove();
                      }
                  }
              });

              function getMore(){
                  not_loading = false;
                  console.log("getMore......");
                  jQuery.ajax({
                      type: 'get',
                      url: "/blog/ajax_get_blog_recommends/1886237",
                      data:{
                          page:pageNum
                      },
                      //async: false,
                      dataType: 'json',
                      success: function (resobj) {
                          var totalNum = resobj.total_pages;
                          if(pageNum <= totalNum && resobj.oHtml != '' ){
                              jQuery(".dl_more").remove();
                              oList.find('ul').append(resobj.oHtml);
                              refreshMore();
                              not_loading = true;
                              pageNum++;
                          }else{
                              not_loading = false;
                              noMore();
                          }
                      },
                      error: function (err) {
                          console.log(err);
                      }
                  });
              }

              function noMore(){
                  jQuery(".dl_more").remove();
                  if(oList.find(".dl_no_more").length ==0){
                      oList.append('<div class="dl_no_more" style="font-size:14px; color:#0F8AC6; text-align:center;padding-top:10px; ">我们是很有底线的</div>');
                  }
              }

              function refreshMore(){
                  if(oList.find(".dl_more").length ==0){
                      oList.append('<div class="dl_more" style="font-size:14px; color:#0F8AC6; text-align:center;padding-top:10px;">上滑加载更多</div>');
                  }
              }
          }, 200);
      
//]]>
      </script>
      <div id="footer" class="clearfix">
        <!-- <div id="copyright">
        <hr />
        声明：ITeye文章版权属于作者，受法律保护。没有作者书面许可不得转载。若作者同意转载，必须以超链接形式标明文章原始出处和作者。<br />
        &copy; 2003-
        2019 ITeye.com. All rights reserved. [ 京ICP证110151号 京公网安备110105010620 ]
      </div> -->        <div id="ad_pop">
          <div class="J_adv" data-view="true" data-mod="ad_popu_64" data-mtp="62" data-order="21" data-con="ad_content_2070">
            <script id="popuLayer_js_q" src="https://ads.csdn.net/js/popuLayer.js" defer="" type="text/javascript">
            </script>
            <!-- 广告位：PC端-iteye博客详情右侧弹窗-300*250 -->          </div>
        </div>
      </div>
    </div>
    <script type="text/javascript">
//<![CDATA[

  document.write("<img src='https://stat.iteye.com/?url="+ encodeURIComponent(document.location.href) + "&referrer=" + encodeURIComponent(document.referrer) + "&user_id=' width='0' height='0' />");

//]]>
    </script>
    <img src="https://stat.iteye.com/?url=https%3A%2F%2Fliuinsect.iteye.com%2Fblog%2F1886237&amp;referrer=&amp;user_id=" width="0" height="0"/>
    



   Global site tag (gtag.js) - Google Analytics
  
    <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-127895514-6">
    </script>
    <script>
//<![CDATA[

      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'UA-127895514-6');
  
//]]>
    </script>
    <link href="//csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css" rel="stylesheet"/>
    <script src="//csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js" type="text/javascript">
    </script>
    <script src="https://csdnimg.cn/pubfooter/js/publib_footer-1.0.3.js" data-isfootertrack="false" type="text/javascript">
    </script>
    <link rel="stylesheet" type="text/css" href="//csdnimg.cn/pubfooter/css/pub_footer_1.0.3.css?v=201810222345"/>
    <script id="csdn-toolbar-id" btnid="header_notice_num" wrapid="note1" count="5" subcount="5" type="text/javascript" src="//csdnimg.cn/public/common/toolbar/js/content_toolbar.js">
    </script>
    <script src="https://g.csdnimg.cn/notification/1.3.6/notify.js">
    </script>
    <script src="https://g.csdnimg.cn/notification/1.3.6/main.js">
    </script>
    <script src="//csdnimg.cn/asdf/tracking-1.0.1.js" type="text/javascript">
    </script>
    <script language="javascript" type="text/javascript" src="//csdnimg.cn/asdf/async-1.0.1.js">
    </script>
    <script type="text/javascript" charset="utf-8" src="https://g.csdnimg.cn/track/1.2.2/track.js">
    </script>
    <style>
      
  .userinfo {display: none !important;}
  .persion_article h3{
    background: none !important;
    border-bottom: none!important;
    padding: 0!important;
    margin-bottom: 0!important;
    line-height: 1!important;
  }
  .persion_article .right_box{
    margin-top: 0!important;
  }
  .persion_article .footer_box .feed_new_tit span{
    padding-left: 0!important;
  }

    </style>
    <script>
//<![CDATA[

(function($){
  var windowHeight = $(window).height(),
      contentHeight = $(".hide-main-content").height()
      windowHeight = windowHeight * 1.2 //获得可视区域高度
      if(contentHeight > windowHeight){
        $(".hide-article-box").show()
        $(".hide-main-content").css({'height': windowHeight,'overflow':'hidden'})
        $(".hide-article-box").find("#btn-readmore").click(function(){
          $(this).parents('.hide-main-content').removeAttr('style')
          $(this).parent().hide()
        })
      }
})(jQuery)

//]]>
    </script>
    <script type="text/javascript">
//<![CDATA[
var $csdn_iteye_jq = jQuery.noConflict();// 解决jq与prototype.js命名空间冲突的问题
//]]>
    </script>
    <script src="https://www.iteye.com/javascripts/web-storage-cache.min.js?1461122561" type="text/javascript">
    </script>
    <script src="https://www.iteye.com/javascripts/replace.min.js?1517971857" type="text/javascript">
    </script>
    <script>
//<![CDATA[

  var jQuery = jQuery.noConflict();
  setTimeout(function($){
    window.csdn.fixedSidebar({
        targetBox: $('.persion_article'), //判断到达底部的div,公共footer可选 $('.persion_article'),$('.public_pc_right_footer2018')
        mainBox: $("#main"), //侧边栏旁边的主体div,默认 $("main")
        sidebar: $(".blog-sidebar-fixed"), //侧边栏,默认 $("aside")
        direction: 'right', //侧边栏浮动方向,可选'right','left',
        position: 'fixed',//定位方式
        bottom: 0,
        zIndex: 99,
        sidebarRightMargin: 8,//direction为left,侧边栏距离mainbox的右边距
        sidebarLeftMargin: 37,//direction为right,侧边栏距离mainbox的左边距
    })
  },200,jQuery)
  
//]]>
    </script>
  </body>
</html>

[INFO] [2019-02-01 11:43:02][com.loris.soccer.net.App]Success to download: https://liuinsect.iteye.com/blog/1886237
[WARN] [2019-02-01 11:44:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:00][com.gargoylesoftware.htmlunit.javascript.host.dom.Document]Nothing done for execCommand(BackgroundImageCache, ...) (feature not implemented)
[WARN] [2019-02-01 11:44:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:01][com.gargoylesoftware.htmlunit.javascript.host.css.CSSStyleSheet]Unhandled CSS condition type 'PREFIX_ATTRIBUTE_CONDITION'. Accepting it silently.
[ERROR] [2019-02-01 11:44:01][com.gargoylesoftware.htmlunit.javascript.StrictErrorReporter]runtimeError: message=[An invalid or illegal selector was specified (selector: '*,:x' error: Invalid selector: *:x).] sourceName=[https://csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js] line=[2] lineSource=[null] lineOffset=[0]
[WARN] [2019-02-01 11:44:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:01][com.gargoylesoftware.htmlunit.html.HtmlScript]Script is not JavaScript (type: application/ld+json, language: ). Skipping execution.
[WARN] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.javascript.host.css.CSSStyleSheet]Unhandled CSS condition type 'PREFIX_ATTRIBUTE_CONDITION'. Accepting it silently.
[ERROR] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.javascript.StrictErrorReporter]runtimeError: message=[An invalid or illegal selector was specified (selector: '*,:x' error: Invalid selector: *:x).] sourceName=[https://csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js] line=[2] lineSource=[null] lineOffset=[0]
[WARN] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.NicelyResynchronizingAjaxController]Re-synchronized call to https://pv.csdn.net/csdnbi
[WARN] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine]Caught script exception
======= EXCEPTION START ========
EcmaError: lineNumber=[1] column=[0] lineSource=[<no source>] name=[TypeError] sourceName=[https://csdnimg.cn/search/baidu_opensug-1.0.0.js] message=[TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)]
com.gargoylesoftware.htmlunit.ScriptException: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:892)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:772)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:748)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.loadExternalJavaScriptFile(HtmlPage.java:995)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:371)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:46)
	at com.loris.soccer.net.App.main(App.java:24)
Caused by: net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.notFunctionError(ScriptRuntime.java:4369)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2597)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.exec(InterpretedFunction.java:123)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$2.doRun(JavaScriptEngine.java:763)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	... 34 more
Enclosed exception: 
net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.notFunctionError(ScriptRuntime.java:4369)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2597)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at script.i(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script.a(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.exec(InterpretedFunction.java:123)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$2.doRun(JavaScriptEngine.java:763)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:772)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:748)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.loadExternalJavaScriptFile(HtmlPage.java:995)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:371)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:46)
	at com.loris.soccer.net.App.main(App.java:24)
======= EXCEPTION END ========
[INFO] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine]Caught script exception
======= EXCEPTION START ========
EcmaError: lineNumber=[889] column=[0] lineSource=[null] name=[TypeError] sourceName=[https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js] message=[TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)]
com.gargoylesoftware.htmlunit.ScriptException: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:892)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.executeEventLocally(EventTarget.java:101)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeEvent(HtmlScript.java:412)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:378)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:46)
	at com.loris.soccer.net.App.main(App.java:24)
Caused by: net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.undefCallError(ScriptRuntime.java:4312)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2586)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$3.doRun(JavaScriptEngine.java:814)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	... 38 more
Enclosed exception: 
net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.undefCallError(ScriptRuntime.java:4312)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2586)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at script(https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js:889)
	at script(https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js:881)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$3.doRun(JavaScriptEngine.java:814)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.executeEventLocally(EventTarget.java:101)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeEvent(HtmlScript.java:412)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:378)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:46)
	at com.loris.soccer.net.App.main(App.java:24)
== CALLING JAVASCRIPT ==
  function () {
      callback();
  }
======= EXCEPTION END ========
[WARN] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:02][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 11:44:03][com.loris.soccer.net.App]<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-CN" dir="ltr">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <title>
      
    HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析 - 科技改变生活 - ITeye博客
  
    </title>
    <meta name="description" content="  为了更好的提供文章，我已经将博客迁移到了自建的博客网站上，我将更多的从源码分析的角度入手，为大家带来更多的深度文章，请大家继续关注我~！  博客地址：www.liuinsect.com      _______________________________________________________________________________     MultiThreadedHttp ..."/>
    <meta name="keywords" content=" HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析"/>
    <link rel="shortcut icon" href="/images/favicon.ico" type="image/x-icon"/>
    <link rel="search" type="application/opensearchdescription+xml" href="/open_search.xml" title="ITeye"/>
    <link href="/rss" rel="alternate" title="科技改变生活" type="application/rss+xml"/>
    <link href="https://www.iteye.com/stylesheets/blog.css?1543400233" media="screen" rel="stylesheet" type="text/css"/>
    <link href="https://www.iteye.com/stylesheets/themes/blog/orange.css?1543400233" media="screen" rel="stylesheet" type="text/css"/>
    <script src="https://hm.baidu.com/hm.js?6bcd52f51e9b3dce32bec4a3997715ac">
    </script>
    <script src="//hm.baidu.com/hm.js?e19a8b00cf63f716d774540875007664">
    </script>
    <script src="https://www.iteye.com/javascripts/application.js?1544695478" type="text/javascript">
    </script>
    <script>
//<![CDATA[

    var _hmt = _hmt || [];
    (function() {
        var hm = document.createElement("script");
        hm.src = "//hm.baidu.com/hm.js?e19a8b00cf63f716d774540875007664";
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(hm, s);
    })();

//]]>
    </script>
    <style>
      
/* 折叠效果 */
.hide-main-content{
    position: relative;
}
.hide-article-box {
    display: none;
    position: absolute;
    z-index: 9999;
    bottom: -1px;
    width: 100%;
    padding-top: 160px;
    background-image: -webkit-gradient(linear,left top, left bottom,from(rgba(255,255,255,0)),color-stop(70%, #fff));
    background-image: linear-gradient(-180deg,rgba(255,255,255,0) 0%,#fff 70%);
}
.hide-article-box #btn-readmore{
    color: #ca0c16;
    border: 1px solid #ca0c16;
    margin: 10px auto;
    padding: 0 8px;
    display: block;
    font-size: 14px;
    border-radius: 4px;
    text-align: center;
    background-color: transparent;
    height: 34px;
    width: 74px;
    line-height: 32px;
    min-width: 72px;
    cursor: pointer;
}
.hide-article-box #btn-readmore:hover{
    background: #ca0c16;
    color:#fff;
    text-decoration: none;
}

    </style>
    <!-- 因INS广告原因 需要提前引入jquery -->    <script src="//csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js" type="text/javascript">
    </script>
    <script type="text/javascript">
//<![CDATA[
var jQuery = jQuery.noConflict();// 解决jq与prototype.js命名空间冲突的问题
//]]>
    </script>
    <script src="https://g.csdnimg.cn/fixed-sidebar/1.1.1/fixed-sidebar.js" type="text/javascript">
    </script>
    <link href="https://www.iteye.com/javascripts/syntaxhighlighter/SyntaxHighlighter.css?1448702469" media="screen" rel="stylesheet" type="text/css"/>
    <script src="https://www.iteye.com/javascripts/syntaxhighlighter/shCoreCommon.js?1448702469" type="text/javascript">
    </script>
    <script src="https://www.iteye.com/javascripts/hotkey.js?1448702469" type="text/javascript">
    </script>
    <script src="https://www.iteye.com/javascripts/code_favorites.js?1448702469" type="text/javascript">
    </script>
    <script src="https://www.iteye.com/javascripts/weiboshare.js?1448702469" type="text/javascript">
    </script>
    <!-- 请置于所有广告位代码之前 -->    <script src="https://dup.baidustatic.com/js/ds.js">
    </script>
    <link ref="canonical" href="http://liuinsect.iteye.com/blog/1886237"/>
    <script src="//msite.baidu.com/sdk/c.js?appid=1563894916825412">
    </script>
    <style type="text/css">
      .dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }
    </style>
    <style type="text/css">
      .dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }
    </style>
    <style type="text/css">
      .dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }
    </style>
    <style type="text/css">
      .dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }
    </style>
    <style type="text/css">
      .dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }
    </style>
    <link rel="stylesheet" type="text/css" href="https://g.csdnimg.cn/recommend/1.3.0/css/recommend.css"/>
    <link rel="stylesheet" type="text/css" href="https://g.csdnimg.cn/recommend/1.3.0/css/iconfont.css"/>
    <script type="text/javascript" src="//csdnimg.cn/search/baidu_opensug-1.0.0.js">
    </script>
    <style type="text/css">
    </style>
  </head>
  <body>
    <div id="BAIDU_DUP_fp_wrapper" style="position: absolute; left: -1px; bottom: -1px; z-index: 0; width: 0px; height: 0px; overflow: hidden; visibility: hidden; display: none;">
      <iframe id="BAIDU_DUP_fp_iframe" src="https://pos.baidu.com/wh/o.htm?ltr=" style="width: 0px; height: 0px; visibility: hidden; display: none;">
      </iframe>
    </div>
    <svg aria-hidden="true" style="position: absolute; width: 0px; height: 0px; overflow: hidden;">
      <symbol id="fanyi" viewbox="0 0 1084 1024">
        <path d="M602.416429 647.439059v75.390494h120.470588v-120.470588h-75.029082l195.493647-193.939577V481.882353h180.597459c33.322165 0 60.289506 26.967341 60.289506 60.235294 0 0.722824-0.012047 1.439624-0.036141 2.1504v236.640377c0.024094 0.710776 0.036141 1.427576 0.036141 2.1504 0 33.261929-26.967341 60.235294-60.235294 60.235294H843.357606v120.470588c0 33.261929-26.967341 60.229271-60.235294 60.22927s-60.235294-26.967341-60.235295-60.235294v-120.470588H542.090782c-33.267953 0-60.235294-26.967341-60.235294-60.235294l0.006024-16.022588 120.554917-119.597177z m240.935153-45.080094v120.470588h120.380235v-120.470588h-120.380235z m-403.534306-46.585977l-27.732329-67.861082H186.479676l-70.716235 167.936c-12.9024 30.659765-48.224376 45.056-78.884141 32.141553-30.659765-12.908424-45.049976-48.2304-32.141553-78.890165l240.941176-572.223247A60.253365 60.253365 0 0 1 301.782076 0.006024a60.253365 60.253365 0 0 1 56.380236 37.466352l174.242635 426.429742 352.798117-350.033318c23.612235-23.431529 61.7472-23.280941 85.17873 0.331294 23.431529 23.612235 23.280941 61.753224-0.331294 85.184753L200.394029 963.029835c-23.612235 23.431529-61.753224 23.280941-85.184753-0.331294-23.431529-23.612235-23.280941-61.753224 0.337318-85.184753l324.270682-321.7408z m-138.842353-339.787294L237.209841 367.441318H362.860664L300.974923 215.979671z"/>
      </symbol>
      <symbol id="shouji" viewbox="0 0 1024 1024">
        <path d="M768 670.72V102.4H256v568.32h512z m0 51.2H256v199.68h512v-199.68z m102.4-619.52v819.2c0 56.55552-45.84448 102.4-102.4 102.4H256c-56.55552 0-102.4-45.84448-102.4-102.4V102.4C153.6 45.84448 199.44448 0 256 0h512c56.55552 0 102.4 45.84448 102.4 102.4zM512 870.4c-28.27776 0-51.2-22.92224-51.2-51.2s22.92224-51.2 51.2-51.2 51.2 22.92224 51.2 51.2-22.92224 51.2-51.2 51.2z"/>
      </symbol>
      <symbol id="yuedushu" viewbox="0 0 1462 1024">
        <path d="M731.428571 1024c-259.320686 0-495.879314-146.753829-709.668571-440.246857-29.015771-39.840914-29.015771-103.665371 0-143.506286C235.556571 146.761143 472.107886 0 731.428571 0c259.320686 0 495.879314 146.753829 709.668572 440.246857 29.015771 39.840914 29.015771 103.665371 0 143.506286C1227.300571 877.238857 990.749257 1024 731.428571 1024z m0-841.142857c-195.2256 0-375.632457 107.132343-545.865142 329.142857 170.232686 222.010514 350.639543 329.142857 545.865142 329.142857 195.2256 0 375.632457-107.132343 545.865143-329.142857C1107.053714 289.989486 926.646857 182.857143 731.428571 182.857143z m0 621.714286c-161.579886 0-292.571429-130.991543-292.571428-292.571429s130.991543-292.571429 292.571428-292.571429 292.571429 130.991543 292.571429 292.571429-130.991543 292.571429-292.571429 292.571429z m0-182.857143c60.591543 0 109.714286-49.122743 109.714286-109.714286 0-60.591543-49.122743-109.714286-109.714286-109.714286-60.591543 0-109.714286 49.122743-109.714285 109.714286 0 60.591543 49.122743 109.714286 109.714285 109.714286z"/>
      </symbol>
    </svg>
    <div id="csdn-toolbar" class="csdn-toolbar tb_disnone ">
      <div class="container row center-block ">
        <ul class="pull-left left-menu clearfix" id="nav-left-menu">
          <li>
            <a href="https://www.csdn.net" title="csdn-spring">
              <img src="//csdnimg.cn/cdn/content-toolbar/spring-logo.png"/>
            </a>
          </li>
          <li>
            <a href="//www.csdn.net/" class="toolbar_to_feed" title="首页" style="margin-left:8px">
              首页
            </a>
          </li>
          <li>
            <a href="//blog.csdn.net/" class="toolbar_to_feed" title="博客">
              博客
            </a>
          </li>
          <li>
            <a href="//edu.csdn.net" title="学院">
              学院
            </a>
          </li>
          <li>
            <a href="//download.csdn.net" title="下载">
              下载
            </a>
          </li>
          <li>
            <a href="https://gitchat.csdn.net/?utm_source=csdn_toolbar" title="图文课">
              图文课
            </a>
          </li>
          <li>
            <a href="//bbs.csdn.net" title="论坛">
              论坛
            </a>
          </li>
          <li class="app-btn">
            <a href="https://www.csdn.net/app/" title="APP">
              APP
            </a>
            <div class="appControl">
              <span>
                <img src="https://csdnimg.cn/public/common/toolbar/images/csdnqr@2x.png"/>
                <em>
                  CSDN
                </em>
              </span>
              <span class="eduwx">
                <img src="https://csdnimg.cn/public/common/toolbar/images/eduwxfix.png"/>
                <em>
                  CSDN学院
                </em>
              </span>
            </div>
          </li>
          <li>
            <a href="//ask.csdn.net" title="问答">
              问答
            </a>
          </li>
          <li>
            <a href="//mall.csdn.net" title="商城">
              商城
            </a>
          </li>
          <li class="vip-caise">
            <a href="https://mall.csdn.net/vip_code" title="VIP会员">
              VIP会员
            </a>
          </li>
          <li>
            <a href="//huiyi.csdn.net/" title="活动">
              活动
            </a>
          </li>
          <li>
            <a href="http://job.csdn.net" title="招聘">
              招聘
            </a>
          </li>
          <li>
            <a href="http://www.iteye.com" title="ITeye">
              ITeye
            </a>
          </li>
          <li>
            <a href="https://gitbook.cn/?ref=csdn" title="GitChat">
              GitChat
            </a>
          </li>
        </ul>
        <div class="pull-right login-wrap unlogin">
          <ul class="btns">
            <li class="toolbar-tracking csdn-tracking-statistics tracking-click" data-mod="popu_369">
              <a href="#" style="padding:0">
              </a>
            </li>
            <li>
              <div class="search_bar csdn-tracking-statistics tracking-click" data-mod="popu_366">
                <input type="text" class="input_search" name="" id="toolber-keyword" placeholder="搜CSDN"/>
                <a href="//so.csdn.net/so/" target="_blank" class="btn-nobg-noborder btn-search">
                  <svg class="toolbar-icon" aria-hidden="true">
                    <use xlink:href="#sousuo"/>
                  </svg>
                </a>
              </div>
            </li>
            <li class="write-bolg-btn csdn-tracking-statistics tracking-click gitChat" data-mod="popu_370">
              <a class="" href="//mp.csdn.net/postedit" target="_blank">
                <img src="https://csdnimg.cn/public/common/toolbar/images/spring/xieboke.png" alt="" class="money"/>
                <span>
                  写博客
                </span>
              </a>
            </li>
            <li class="gitChat">
              <a class="" href="//gitbook.cn/new/gitchat/activity?utm_source=csdnblog1" target="_blank">
                <img src="https://csdnimg.cn/public/common/toolbar/images/spring/money.png" alt="" class="money"/>
                <span>
                  赚零钱
                </span>
              </a>
            </li>
            <li class="gitChat upload">
              <a target="_blank" class="" href="//i.csdn.net/#/msg/index">
                <img src="https://csdnimg.cn/public/common/toolbar/images/spring/message-icon.png" alt="" class="message"/>
                <span>
                  消息
                </span>
                <div class="toolbar-circle" id="msg-circle">
                </div>
              </a>
            </li>
            <li class="userinfo">
              <a href="https://passport.csdn.net/account/login" target="_blank">
                登录
              </a>
              <span>
              </span>
              <a href="https://passport.csdn.net/account/login" target="_blank">
                注册
              </a>
            </li>
            <li class="userLogin">
              <div class="loginCenter">
                <a href="//i.csdn.net" target="_blank">
                  <img class="login_img" src="//csdnimg.cn/public/common/toolbar/images/100x100.jpg"/>
                </a>
              </div>
              <div class="userControl">
                <div class="bord">
                  <div>
                    <i class="pull_icon pull_icon1">
                    </i>
                    <a href="https://www.csdn.net/nav/watchers" target="_blank">
                      我的关注
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon2">
                    </i>
                    <a href="https://i.csdn.net/#/uc/favorite-list" target="_blank">
                      我的收藏
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon4">
                    </i>
                    <a href="https://i.csdn.net/#/uc/profile" target="_blank">
                      个人中心
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon7">
                    </i>
                    <a href="https://i.csdn.net/#/account/index" target="_blank">
                      帐号设置
                    </a>
                  </div>
                </div>
                <div class="bord">
                  <div>
                    <i class="pull_icon pull_icon5">
                    </i>
                    <a href="https://blog.csdn.net/" target="_blank">
                      我的博客
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon6">
                    </i>
                    <a href="https://mp.csdn.net/" target="_blank">
                      管理博客
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon12">
                    </i>
                    <a href="https://edu.csdn.net/mycollege" target="_blank">
                      我的学院
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon13">
                    </i>
                    <a href="https://download.csdn.net/my/downloads" target="_blank">
                      我的下载
                    </a>
                  </div>
                </div>
                <div class="bord">
                  <div>
                    <i class="pull_icon pull_icon8">
                    </i>
                    <a href="https://my.csdn.net/my/score" target="_blank">
                      我的C币
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon9">
                    </i>
                    <a href="https://order.csdn.net/myorder" target="_blank">
                      订单中心
                    </a>
                  </div>
                </div>
                <div class="bord">
                  <div>
                    <i class="pull_icon pull_icon10">
                    </i>
                    <a href="https://blog.csdn.net/home/help.html" target="_blank">
                      帮助
                    </a>
                  </div>
                  <div>
                    <i class="pull_icon pull_icon11">
                    </i>
                    <a href="javascript:void(0);" class="logout">
                      退出
                    </a>
                  </div>
                </div>
              </div>
              <div class="guo_tip_box" style="display: none;">
                关注和收藏在这里
              </div>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <script onload="window['cambrian_sync_loader_success15489926417525']()" onerror="window['cambrian_sync_loader_fail_15489926417525']()" src="https://ae.bdstatic.com/xz/msite/static/sdk/main.8b2bc869.js">
    </script>
    <script src="https://g.csdnimg.cn/recommend/1.3.0/recommend.js">
    </script>
    <script language="javascript" src="https://g.csdnimg.cn/recommend/1.3.0/iconfont.js">
    </script>
    <div id="header">
      <div id="blog_site_nav">
        <a href="https://www.iteye.com/" class="homepage">
          首页
        </a>
        <a href="https://www.iteye.com/news">
          资讯
        </a>
        <a href="https://www.iteye.com/magazines">
          精华
        </a>
        <a href="https://www.iteye.com/forums">
          论坛
        </a>
        <a href="https://www.iteye.com/ask">
          问答
        </a>
        <a href="https://www.iteye.com/blogs">
          博客
        </a>
        <a href="https://www.iteye.com/blogs/subjects">
          专栏
        </a>
        <a href="https://www.iteye.com/groups">
          群组
        </a>
        <!--  <a href="#" onclick="return false;" id="msna"><u>更多</u> <small>▼</small></a>-->        <!--  <div class="quick_menu" style="display:none;">-->        <!--    <a target="_blank" href="https://job.iteye.com/iteye">知识库</a>-->        <!--    <a href="https:///search">搜索</a>-->        <!--  </div>-->      </div>
      <div id="user_nav">
        <a href="/login" class="welcome" title="登录">
          您还未登录 !
        </a>
        <a href="/login">
          登录
        </a>
        <!--<a href="/signup" class="nobg">注册</a>-->        <!--<a href="https://passport.csdn.net/account/mobileregister?from=https://www.iteye.com">注册</a>-->      </div>
    </div>
    <div id="page">
      <!--    <div id="branding" class="clearfix">-->      <!--      <div id="blog_name">-->      <!--        <h1><a href="/">-->      <!--            </a></h1>-->      <!--      </div>-->      <!--      <div id='fd'></div>-->      <!--      <div id="blog_navbar">-->      <!--        <ul>-->      <!--        </ul>-->      <!--        <div class="search">-->      <!--          <form action="/blog/search" method="get">-->      <!--            <input class="search_text" id="query" name="query" style="margin-left: 10px;width: 110px;" type="text"-->      <!--              value="" />-->      <!--            <input class="submit_search" type="submit" value="" />-->      <!--          </form>-->      <!--        </div>-->      <!--        <div id="fd"></div>-->      <!--      </div>-->      <!--    </div>-->      
    `
    
      <div id="content" class="clearfix">
        <div id="local">
          <div class="local_top">
          </div>
          <div id="blog_owner">
            <div id="blog_owner_logo">
              <a href="https://liuinsect.iteye.com">
                <img alt="liuInsect的博客" class="logo" src="https://www.iteye.com/images/user-logo.gif?1448702469" title="liuInsect的博客: 科技改变生活" width=""/>
              </a>
            </div>
            <div id="blog_owner_name">
              liuInsect
            </div>
          </div>
          <div id="blog_actions">
            <ul>
              <li>
                浏览:
              112767 次
              </li>
              <li>
                性别:
              
                <img alt="Icon_minigender_1" src="https://www.iteye.com/images/icon_minigender_1.gif?1448702469" title="男"/>
              </li>
              <li>
                <img src="/images/status/offline.gif"/>
              </li>
            </ul>
          </div>
          <div id="user_visits" class="clearfix">
            <h5>
              最近访客 
              <span style="font-weight:normal;font-size:12px;padding-left:30px;">
                <a href="/blog/user_visits">
                  更多访客&gt;&gt;
                </a>
              </span>
            </h5>
            <div class="user_visit">
              <div class="logo">
                <a href="https://tweifeng.iteye.com" target="_blank">
                  <img alt="tweifeng的博客" class="logo" src="https://www.iteye.com/images/user-logo-thumb.gif?1448702469" title="tweifeng的博客: tweifeng" width="48px"/>
                </a>
              </div>
              <div class="left">
                <a href="https://tweifeng.iteye.com" target="_blank" title="tweifeng">
                  tweifeng
                </a>
              </div>
            </div>
            <div class="user_visit">
              <div class="logo">
                <a href="https://alock1.iteye.com" target="_blank">
                  <img alt="aLOCK1的博客" class="logo" src="https://www.iteye.com/images/user-logo-thumb.gif?1448702469" title="aLOCK1的博客: " width="48px"/>
                </a>
              </div>
              <div class="left">
                <a href="https://alock1.iteye.com" target="_blank" title="aLOCK1">
                  aLOCK1
                </a>
              </div>
            </div>
            <div class="user_visit">
              <div class="logo">
                <a href="https://zhouxf.iteye.com" target="_blank">
                  <img alt="zhouxf的博客" class="logo" src="https://www.iteye.com/images/user-logo-thumb.gif?1448702469" title="zhouxf的博客: " width="48px"/>
                </a>
              </div>
              <div class="left">
                <a href="https://zhouxf.iteye.com" target="_blank" title="zhouxf">
                  zhouxf
                </a>
              </div>
            </div>
            <div class="user_visit">
              <div class="logo">
                <a href="https://stayhome.iteye.com" target="_blank">
                  <img alt="StayHome的博客" class="logo" src="https://www.iteye.com/images/user-logo-thumb.gif?1448702469" title="StayHome的博客: " width="48px"/>
                </a>
              </div>
              <div class="left">
                <a href="https://stayhome.iteye.com" target="_blank" title="StayHome">
                  StayHome
                </a>
              </div>
            </div>
          </div>
          <div id="user_title_list" class="clearfix">
            <h5>
              博主相关
            </h5>
            <li>
              <a href="https://liuinsect.iteye.com">
                博客
              </a>
            </li>
            <li>
              <a href="/weibo">
                微博
              </a>
            </li>
            <li>
              <a href="/album">
                相册
              </a>
            </li>
            <li>
              <a href="/link">
                收藏
              </a>
            </li>
            <li>
              <a href="/blog/guest_book">
                留言
              </a>
            </li>
            <li>
              <a href="/blog/profile">
                关于我
              </a>
            </li>
          </div>
          <div id="blog_menu">
            <h5>
              文章分类
            </h5>
            <ul>
              <li>
                <a href="/">
                  全部博客 (25)
                </a>
              </li>
              <li>
                <a href="/category/202219">
                  struts2 (2)
                </a>
              </li>
              <li>
                <a href="/category/202576">
                  ubuntu (1)
                </a>
              </li>
              <li>
                <a href="/category/202577">
                  linux (1)
                </a>
              </li>
              <li>
                <a href="/category/202578">
                  os (1)
                </a>
              </li>
              <li>
                <a href="/category/205165">
                  lucene (2)
                </a>
              </li>
              <li>
                <a href="/category/211352">
                  代码管理 (1)
                </a>
              </li>
              <li>
                <a href="/category/212908">
                  spring (2)
                </a>
              </li>
              <li>
                <a href="/category/223162">
                  mysql (1)
                </a>
              </li>
              <li>
                <a href="/category/234735">
                  JIANG (0)
                </a>
              </li>
              <li>
                <a href="/category/239314">
                  java6道面试题 (0)
                </a>
              </li>
              <li>
                <a href="/category/243548">
                  synchronized (0)
                </a>
              </li>
              <li>
                <a href="/category/243840">
                  java Synchronized (1)
                </a>
              </li>
              <li>
                <a href="/category/247007">
                  二分匹配算法 (0)
                </a>
              </li>
              <li>
                <a href="/category/250625">
                  降级论 (0)
                </a>
              </li>
              <li>
                <a href="/category/252087">
                  380167616@qq.com (0)
                </a>
              </li>
              <li>
                <a href="/category/266729">
                  乱码 (0)
                </a>
              </li>
              <li>
                <a href="/category/266818">
                  java (4)
                </a>
              </li>
              <li>
                <a href="/category/266819">
                  static (1)
                </a>
              </li>
              <li>
                <a href="/category/266832">
                  乱码，DoGet (1)
                </a>
              </li>
              <li>
                <a href="/category/266836">
                  CXF (1)
                </a>
              </li>
              <li>
                <a href="/category/300247">
                  多线程 (2)
                </a>
              </li>
            </ul>
          </div>
          <div id="month_blogs">
            <h5>
              社区版块
            </h5>
            <ul>
              <li>
                <a href="/blog/news">
                  我的资讯
                </a>
                 (
              0)
              </li>
              <li>
                <a href="/blog/post">
                  我的论坛
                </a>
                 (
              2)
            
              </li>
              <li>
                <a href="/blog/answered_problems">
                  我的问答
                </a>
                 (
              0)
              </li>
            </ul>
          </div>
          <div id="month_blogs">
            <h5>
              存档分类
            </h5>
            <ul>
              <li>
                <a href="/blog/monthblog/2014-11">
                  2014-11
                </a>
                
              (
              1)
              </li>
              <li>
                <a href="/blog/monthblog/2013-12">
                  2013-12
                </a>
                
              (
              3)
              </li>
              <li>
                <a href="/blog/monthblog/2013-08">
                  2013-08
                </a>
                
              (
              2)
              </li>
              <li>
                <a href="/blog/monthblog_more">
                  更多存档...
                </a>
              </li>
            </ul>
          </div>
          <div id="guest_books">
            <h5>
              最新评论
            </h5>
            <ul>
              <li>
                <a href="https://panamera.iteye.com" target="_blank" title="panamera">
                  panamera
                </a>
                ：
              楼主有没有测试过，没有发你说什么锁不成功，都不知道你想表达什么 ...
                <br/>
                <a href="/blog/1662839#bc2399998">
                  JAVA Synchronized 关键字锁实例和锁CLASS对象的区别
                </a>
              </li>
              <li>
                <a href="https://ouchuquan.iteye.com" target="_blank" title="ouchuquan">
                  ouchuquan
                </a>
                ：
              Prototype creates a brand new i ...
                <br/>
                <a href="/blog/1462062#bc2389320">
                  spring 中prototype 和 reqeust的区别
                </a>
              </li>
              <li>
                <a href="https://ljn799498049.iteye.com" target="_blank" title="ljn799498049">
                  ljn799498049
                </a>
                ：
              请问倒数第2个线程栈的调用顺序的图是用什么画的啊 ，还是ecl ...
                <br/>
                <a href="/blog/1791958#bc2389115">
                  Spring编程式事务与声明式事务源码分析
                </a>
              </li>
              <li>
                <a href="https://hxwabc.iteye.com" target="_blank" title="hxwabc">
                  hxwabc
                </a>
                ：
              其实没有必要这么麻烦，只要ThreadLocal是static ...
                <br/>
                <a href="/blog/1827012#bc2385802">
                  ThreadLocal内存泄露分析
                </a>
              </li>
              <li>
                <a href="https://china2010pan.iteye.com" target="_blank" title="China2010pan">
                  China2010pan
                </a>
                ：
               ...
                <br/>
                <a href="/blog/1994831#bc2375610">
                  FutureTask 源码解析
                </a>
              </li>
            </ul>
          </div>
          <div class="local_bottom">
          </div>
          <div id="nav_show_top_stop">
            <div>
              <!-- 广告位：PC端-iteye博客详情页左侧Button1-200*200 -->              <!-- Ads ID 423 -->            </div>
            <div>
              <!-- 广告位：PC端-iteye博客详情页左侧Button2-200*200 -->              <!-- Ads ID 424 -->            </div>
          </div>
        </div>
        <div id="main" class="">
          <div class="h-entry" style="display:none">
            <a href="https://liuinsect.iteye.com" class="p-author" target="_blank">
              liuInsect
            </a>
          </div>
          <div class="blog_main">
            <script type="application/ld+json">
//<![CDATA[

    {
        "@context": "https://zhanzhang.baidu.com/contexts/cambrian.jsonld",
        "@id": "http://liuinsect.iteye.com/blog/1886237",
        "title": "HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析",
        "images": [],
        "description": "",
        "pubDate": "2013-06-13T16:35:10"
    }
  
//]]>
            </script>
            <div class="blog_title">
              <h3>
                <a href="/blog/1886237">
                  HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析
                </a>
                <em class="actions">
                </em>
              </h3>
              <div class="news_tag">
                 
              </div>
            </div>
            <div id="blog_content" class="hide-main-content" style="height: 726px; overflow: hidden;">
              <div class="hide-article-box text-center">
                <a class="btn" id="btn-readmore">
                  阅读更多
                </a>
              </div>
              <div style="font-size: 14px;" class="iteye-blog-content-contain">
                <div>
                  为了更好的提供文章，我已经将博客迁移到了自建的博客网站上，我将更多的从源码分析的角度入手，为大家带来更多的深度文章，请大家继续关注我~！  博客地址：
                  <a href="http://www.liuinsect.com/" target="_self" style="color: #e9650e; text-decoration: underline;">
                    www.liuinsect.com
                  </a>
                </div>
                <p class="MsoNormal">
                   
                </p>
                <div>
                  _______________________________________________________________________________
                </div>
                <p class="MsoNormal">
                   
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                      MultiThreadedHttpConnectionManager 
                    </span>
                    是
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                      HTTP Client
                    </span>
                    中用来复用连接的连接管理类
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                      ,
                    </span>
                    可以通过
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                         
                    </span>
                  </span>
                </p>
                <div class="dp-highlighter" id="">
                  <div class="bar">
                    <div class="tools">
                      Java代码 
                      <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=%20%20%20MultiThreadedHttpConnectionManager%20n%20%3D%20%20new%20MultiThreadedHttpConnectionManager()%3B%0A%20%20%20HttpClient%20client%20%3D%20new%20HttpClient(n)%3B" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"/>
                       
                      <a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;">
                        <img class="star" src="/images/icon_star.png" alt="收藏代码"/>
                        <img class="spinner" src="/images/spinner.gif" style="display:none"/>
                      </a>
                    </div>
                  </div>
                  <ol class="dp-j">
                    <li>
                      <span>
                        <span>
                          MultiThreadedHttpConnectionManager n =  
                        </span>
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           MultiThreadedHttpConnectionManager();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                        HttpClient client = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           HttpClient(n);  
                        </span>
                      </span>
                    </li>
                  </ol>
                </div>
                <pre name="code" class="java" style="display: none;">
                     MultiThreadedHttpConnectionManager n =  new MultiThreadedHttpConnectionManager();
   HttpClient client = new HttpClient(n);
                </pre>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                       
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    这样的方式去 创建一个
                    <span>
                      Client 
                    </span>
                    实例，
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    创建后，每当执行
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      int statusCode = client.executeMethod(postMethod);
                    </span>
                    时
                    <span>
                       
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      http client 
                    </span>
                    委托
                    <span>
                      ConnectionManager
                    </span>
                    创建连接，其实是先委托
                    <span>
                      HttpMethodDirector 
                    </span>
                    执行
                    <span>
                      excute
                    </span>
                    方法，
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    再通过它委托
                    <span>
                      ConnectionManager 
                    </span>
                    创建连接，
                    <span>
                      HttpMethodDirector 
                    </span>
                    中包含了一下
                    <span>
                      host,
                    </span>
                    请求参数等信息。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    在创建连接时，
                    <span>
                      HttpMethodDirector 
                    </span>
                    中有如下代码：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                               
                    </span>
                  </span>
                </p>
                <div class="dp-highlighter" id="">
                  <div class="bar">
                    <div class="tools">
                      Java代码 
                      <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=%20%20%20%20%20%20if%20(%20this.conn%20%3D%3D%20null)%20%7B%0A%20%20%20%20%20%20%20%20%20%20this.conn%20%3D%20connectionManager.getConnectionWithTimeout(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20hostConfiguration%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.params.getConnectionManagerTimeout()%0A%20%20%20%20%20%20%20%20%20%20%20)%3B%0A%20%20%20%20%20%20%20%20%20%20......%0A%20%20%20%20%20%20%20%7D" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"/>
                       
                      <a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;">
                        <img class="star" src="/images/icon_star.png" alt="收藏代码"/>
                        <img class="spinner" src="/images/spinner.gif" style="display:none"/>
                      </a>
                    </div>
                  </div>
                  <ol class="dp-j">
                    <li>
                      <span>
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           ( 
                        </span>
                        <span class="keyword">
                          this
                        </span>
                        <span>
                          .conn == 
                        </span>
                        <span class="keyword">
                          null
                        </span>
                        <span>
                          ) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                            
                        <span class="keyword">
                          this
                        </span>
                        <span>
                          .conn = connectionManager.getConnectionWithTimeout(  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                hostConfiguration,  
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="keyword">
                          this
                        </span>
                        <span>
                          .params.getConnectionManagerTimeout()  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                             );  
                      </span>
                    </li>
                    <li>
                      <span>
                            ......  
                      </span>
                    </li>
                    <li>
                      <span>
                         }  
                      </span>
                    </li>
                  </ol>
                </div>
                <pre name="code" class="java" style="display: none;">
                        if ( this.conn == null) {
          this.conn = connectionManager.getConnectionWithTimeout(
              hostConfiguration,
              this.params.getConnectionManagerTimeout()
           );
          ......
       }
                </pre>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                       
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      ConnectionManager 
                    </span>
                    使用了常用的多态的方式将连接的获取交给子类完成。 增强其扩展性。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      ConnectionManager 
                    </span>
                    有三个子类：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                    <img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7120/ab632cac-39f0-348a-a3be-0701a05b4d9b.png"/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    对应于：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      1. 
                    </span>
                    一次性的连接：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    <img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7122/9cfed9b5-26af-3018-a9ad-7d97c959a3ba.png"/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                       
                    </span>
                    <span>
                      2. 
                    </span>
                    <span>
                      线程池中获取连接：
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                    <br/>
                    <img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7124/69529ef4-dde5-3b2e-a3e9-aca64a25c49d.png"/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      3. 
                    </span>
                    复用当前
                    <span>
                      SimpleHttpConnectionManager
                    </span>
                    中的一个成员变量，策略是没有则创建，有则覆盖后返回
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                    <br/>
                    <img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7126/62ef3d88-d5b5-3b02-b04f-c1d8f3fef1ce.png"/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      重点说下
                      <span>
                        MultiThreadedHttpConnectionManager   
                      </span>
                      中连接的获取
                    </strong>
                    <strong>
                      ：
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    在使用
                    <span>
                       MultiThreadedHttpConnectionManager  
                    </span>
                    获取连接的时候，
                    <span>
                      MultiThreadedHttpConnectionManager  
                    </span>
                    使用了连接池的概念针对每个
                    <span>
                      <br/>
                       HostConfiguration 
                    </span>
                    做了连接的管理，即
                    <span>
                       HostConfiguration 
                    </span>
                    作为
                    <span>
                      Key 
                    </span>
                    ，连接池（
                    <span>
                      HostConnectionPool
                    </span>
                    ）作为
                    <span>
                      value
                    </span>
                    去管理当前
                    <span>
                      host
                    </span>
                    下的所有连接，
                    <span>
                      <br/>
                       HostConfiguration
                    </span>
                    的实例如下：
                    <span>
                       HostConfiguration[host=http://www.taobao.com]
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      HostConnectionPool 
                    </span>
                    中使用
                    <strong>
                      链表
                    </strong>
                    <span>
                       
                    </span>
                    管理了 空闲的连接和等待连接的线程队列。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    每次获取连接的时候 根据参数（后面会提到）决定是直接从池中获取一个空闲连接
                    <span>
                      ,
                    </span>
                    创建一个连接，还是计算出一个等待时间后 将当前线程沉睡这么久。而后再检查。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      <br/>
                       Http Client 
                    </span>
                    通过协议对应的
                    <span>
                      ProtocolSocketFactory
                    </span>
                    去创建一个
                    <span>
                      socket
                    </span>
                    连接来发送请求和接受响应
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    使用注意事项：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      1. MultiThreadedHttpConnectionManager  
                    </span>
                    中有以下两个变量，分别解释：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                           a. 
                    </span>
                    每个
                    <span>
                      host
                    </span>
                    最大同时可以获取的连接数， 大于这个数字后， （
                    <span>
                      1,2
                    </span>
                    号线程正在使用连接）
                    <span>
                      3
                    </span>
                    号线程会
                    <span>
                      wait 
                    </span>
                    沉睡住 直到到达时间或者被打断或者
                    <span>
                      1,2
                    </span>
                    号中有人
                    <span>
                      release
                    </span>
                    这个
                    <span>
                      connection
                    </span>
                    ，抛出异常。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                                
                    </span>
                    注意，如果是
                    <span>
                      HTTP client 
                    </span>
                    来调用接口的话 这个例如（
                    <span>
                      http://www.taobao.com 
                    </span>
                    那他的
                    <span>
                      host
                    </span>
                    是
                    <span>
                       www.taobao.com
                    </span>
                    ） 这个值应该设置大一点 否则很多线程调用这个接口的时候会阻塞住。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                           b. 
                    </span>
                    同一时间
                    <span>
                      MultiThreadedHttpConnectionManager  
                    </span>
                    允许的最大连接数，超过这个数字，连接的建立将会阻塞。直到有空闲连接释放。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                    <br/>
                    <img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7128/e9cd0779-310e-3bcd-83ae-61ab59c6387b.png"/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    使用注意事项测试代码：
                    <span>
                        
                    </span>
                    下划线的两个方法可以调整后观察结果
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <strong>
                      <span>
                         
                      </span>
                    </strong>
                  </span>
                </p>
                <div class="dp-highlighter" id="">
                  <div class="bar">
                    <div class="tools">
                      Java代码 
                      <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=public%20static%20void%20main(String%5B%5D%20sadfasd)%20throws%20HttpException%2C%20IOException%2C%20InterruptedException%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20final%20String%20url%3D%20%22http%3A%2F%2Fwww.taobao.com%22%20%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20final%20HttpClient%20client%20%3D%20new%20HttpClient()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20final%20MultiThreadedHttpConnectionManager%20connectionManager%20%3D%20new%20MultiThreadedHttpConnectionManager()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20connectionManager.setMaxTotalConnections%20(1)%3B%2F%2F%E6%80%BB%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%95%B0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20connectionManager.setMaxConnectionsPerHost%20(2)%3B%2F%2F%E6%AF%8F%E4%B8%AAhost%E7%9A%84%E6%9C%80%E5%A4%A7%E8%BF%9E%E6%8E%A5%E6%95%B0%0A%20%20%20%20%20%20%20%20%20%20%20%20client.setHttpConnectionManager(%20connectionManager%20)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20Runnable%20r%20%3D%20new%20Runnable()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20public%20%20void%20run()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20statusCode%3D0%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20PostMethod%20postMethod%20%3D%20new%20PostMethod(url)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20statusCode%20%3D%20client.executeMethod(postMethod)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.%20out.println(%20%22sleep%22%20%2B%20statusCode%20)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Thread.%20sleep(3000)%3B%2F%2F10s%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20postMethod.releaseConnection()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(HttpException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(InterruptedException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20Runnable%20r1%20%3D%20new%20Runnable()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20public%20%20void%20run()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20statusCode%3D0%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20PostMethod%20postMethod%20%3D%20new%20PostMethod(url)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20statusCode%20%3D%20client.executeMethod(postMethod)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(HttpException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.%20out.println(%20statusCode%20)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20postMethod.releaseConnection()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20Runnable%20r2%20%3D%20new%20Runnable()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20public%20%20void%20run()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20statusCode%3D0%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20PostMethod%20postMethod%20%3D%20new%20PostMethod(url)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20statusCode%20%3D%20client.executeMethod(postMethod)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(HttpException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.%20out.println(%20statusCode%20)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20postMethod.releaseConnection()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20Runnable%20r3%20%3D%20new%20Runnable()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20public%20%20void%20run()%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20int%20statusCode%3D0%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20PostMethod%20postMethod%20%3D%20new%20PostMethod(url)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20statusCode%20%3D%20client.executeMethod(postMethod)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(HttpException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(IOException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20e.printStackTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.%20out.println(%20statusCode%20)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20postMethod.releaseConnection()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20new%20Thread(r).start()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20Thread.%20sleep(1000)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20new%20Thread(r1).start()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20new%20Thread(r2).start()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20new%20Thread(r3).start()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%7D" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"/>
                       
                      <a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;">
                        <img class="star" src="/images/icon_star.png" alt="收藏代码"/>
                        <img class="spinner" src="/images/spinner.gif" style="display:none"/>
                      </a>
                    </div>
                  </div>
                  <ol class="dp-j">
                    <li>
                      <span>
                        <span class="keyword">
                          public
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          static
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          void
                        </span>
                        <span>
                           main(String[] sadfasd) 
                        </span>
                        <span class="keyword">
                          throws
                        </span>
                        <span>
                           HttpException, IOException, InterruptedException{  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          final
                        </span>
                        <span>
                           String url= 
                        </span>
                        <span class="string">
                          "http://www.taobao.com"
                        </span>
                        <span>
                           ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          final
                        </span>
                        <span>
                           HttpClient client = 
                        </span>
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           HttpClient();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          final
                        </span>
                        <span>
                           MultiThreadedHttpConnectionManager connectionManager = 
                        </span>
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           MultiThreadedHttpConnectionManager();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     connectionManager.setMaxTotalConnections (
                        <span class="number">
                          1
                        </span>
                        <span>
                          );
                        </span>
                        <span class="comment">
                          //总的连接数
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     connectionManager.setMaxConnectionsPerHost (
                        <span class="number">
                          2
                        </span>
                        <span>
                          );
                        </span>
                        <span class="comment">
                          //每个host的最大连接数
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                    client.setHttpConnectionManager( connectionManager );  
                      </span>
                    </li>
                    <li>
                      <span>
                                      
                      </span>
                    </li>
                    <li>
                      <span>
                                    Runnable r = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Runnable(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                           
                        <span class="keyword">
                          public
                        </span>
                        <span>
                            
                        </span>
                        <span class="keyword">
                          void
                        </span>
                        <span>
                           run(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          int
                        </span>
                        <span>
                           statusCode=
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                PostMethod postMethod = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           PostMethod(url);  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          try
                        </span>
                        <span>
                           {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      statusCode = client.executeMethod(postMethod);  
                      </span>
                    </li>
                    <li>
                      <span>
                                                      System. out.println( 
                        <span class="string">
                          "sleep"
                        </span>
                        <span>
                           + statusCode );  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      Thread. sleep(
                        <span class="number">
                          3000
                        </span>
                        <span>
                          );
                        </span>
                        <span class="comment">
                          //10s
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      postMethod.releaseConnection();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (HttpException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (IOException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (InterruptedException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                                          };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    Runnable r1 = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Runnable(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                           
                        <span class="keyword">
                          public
                        </span>
                        <span>
                            
                        </span>
                        <span class="keyword">
                          void
                        </span>
                        <span>
                           run(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          int
                        </span>
                        <span>
                           statusCode=
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                PostMethod postMethod = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           PostMethod(url);  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          try
                        </span>
                        <span>
                           {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      statusCode = client.executeMethod(postMethod);  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (HttpException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (IOException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                                                System. out.println( statusCode );  
                      </span>
                    </li>
                    <li>
                      <span>
                                                postMethod.releaseConnection();  
                      </span>
                    </li>
                    <li>
                      <span>
                                          };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    Runnable r2 = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Runnable(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                           
                        <span class="keyword">
                          public
                        </span>
                        <span>
                            
                        </span>
                        <span class="keyword">
                          void
                        </span>
                        <span>
                           run(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          int
                        </span>
                        <span>
                           statusCode=
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                PostMethod postMethod = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           PostMethod(url);  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          try
                        </span>
                        <span>
                           {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      statusCode = client.executeMethod(postMethod);  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (HttpException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (IOException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                                                System. out.println( statusCode );  
                      </span>
                    </li>
                    <li>
                      <span>
                                                postMethod.releaseConnection();  
                      </span>
                    </li>
                    <li>
                      <span>
                                          };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    Runnable r3 = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Runnable(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                           
                        <span class="keyword">
                          public
                        </span>
                        <span>
                            
                        </span>
                        <span class="keyword">
                          void
                        </span>
                        <span>
                           run(){  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          int
                        </span>
                        <span>
                           statusCode=
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                PostMethod postMethod = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           PostMethod(url);  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          try
                        </span>
                        <span>
                           {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      statusCode = client.executeMethod(postMethod);  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (HttpException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (IOException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                      e.printStackTrace();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                                                System. out.println( statusCode );  
                      </span>
                    </li>
                    <li>
                      <span>
                                                postMethod.releaseConnection();  
                      </span>
                    </li>
                    <li>
                      <span>
                                          };  
                      </span>
                    </li>
                    <li>
                      <span>
                                    };  
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Thread(r).start();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                    Thread. sleep(
                        <span class="number">
                          1000
                        </span>
                        <span>
                          );  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Thread(r1).start();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Thread(r2).start();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           Thread(r3).start();  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                      
                      </span>
                    </li>
                    <li>
                      <span>
                              }  
                      </span>
                    </li>
                  </ol>
                </div>
                <pre name="code" class="java" style="display: none;">
                  public static void main(String[] sadfasd) throws HttpException, IOException, InterruptedException{
             final String url= "http://www.taobao.com" ;
             final HttpClient client = new HttpClient();
             final MultiThreadedHttpConnectionManager connectionManager = new MultiThreadedHttpConnectionManager();
             connectionManager.setMaxTotalConnections (1);//总的连接数
             connectionManager.setMaxConnectionsPerHost (2);//每个host的最大连接数
            client.setHttpConnectionManager( connectionManager );
            
            Runnable r = new Runnable(){
                   public  void run(){
                         int statusCode=0;
                        PostMethod postMethod = new PostMethod(url);
                         try {
                              statusCode = client.executeMethod(postMethod);
                              System. out.println( "sleep" + statusCode );
                              Thread. sleep(3000);//10s
                              postMethod.releaseConnection();
                        } catch (HttpException e) {
                              e.printStackTrace();
                        } catch (IOException e) {
                              e.printStackTrace();
                        } catch (InterruptedException e) {
                              e.printStackTrace();
                        }
                  };
            };
            Runnable r1 = new Runnable(){
                   public  void run(){
                         int statusCode=0;
                        PostMethod postMethod = new PostMethod(url);
                         try {
                              statusCode = client.executeMethod(postMethod);
                        } catch (HttpException e) {
                              e.printStackTrace();
                        } catch (IOException e) {
                              e.printStackTrace();
                        }
                        System. out.println( statusCode );
                        postMethod.releaseConnection();
                  };
            };
            Runnable r2 = new Runnable(){
                   public  void run(){
                         int statusCode=0;
                        PostMethod postMethod = new PostMethod(url);
                         try {
                              statusCode = client.executeMethod(postMethod);
                        } catch (HttpException e) {
                              e.printStackTrace();
                        } catch (IOException e) {
                              e.printStackTrace();
                        }
                        System. out.println( statusCode );
                        postMethod.releaseConnection();
                  };
            };
            Runnable r3 = new Runnable(){
                   public  void run(){
                         int statusCode=0;
                        PostMethod postMethod = new PostMethod(url);
                         try {
                              statusCode = client.executeMethod(postMethod);
                        } catch (HttpException e) {
                              e.printStackTrace();
                        } catch (IOException e) {
                              e.printStackTrace();
                        }
                        System. out.println( statusCode );
                        postMethod.releaseConnection();
                  };
            };
             new Thread(r).start();
            Thread. sleep(1000);
             new Thread(r1).start();
             new Thread(r2).start();
             new Thread(r3).start();
            
      }
                </pre>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <strong>
                      <span>
                         
                      </span>
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      释放连接：
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    在我们调用
                    <span>
                      postMethod.releaseConnection()
                    </span>
                    时， 会调用
                    <span>
                      connectionManager
                    </span>
                    的
                    <span>
                      releaseConnection
                    </span>
                    方法。
                    <span>
                      <br/>
                    </span>
                    注意：进入这个方法后会首先同步整个
                    <span>
                      connectionPool
                    </span>
                    （连接池）对象，这意味着，在多连接复用的时候频繁的释放连接，也是会有性能损耗的，同步整个
                    <span>
                      connectionPool
                    </span>
                    后连接的创建都会受影响。
                    <span>
                      <br/>
                    </span>
                    然后开始归还连接，归还的方式很清晰：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      1. 
                    </span>
                    将
                    <span>
                      Connection
                    </span>
                    放到基于
                    <span>
                      host
                    </span>
                    的连接池的空闲链表中
                    <span>
                      <br/>
                           hostPool. freeConnections .add(conn);
                      <br/>
                       2.
                    </span>
                    将
                    <span>
                      Connection
                    </span>
                    放到整个全局的
                    <span>
                      connectionPool
                    </span>
                    的空闲链表中
                    <span>
                      <br/>
                       3. 
                    </span>
                    将
                    <span>
                      Connection
                    </span>
                    从
                    <span>
                      Reference Map
                    </span>
                    中移除（
                    <span>
                      Reference Map 
                    </span>
                    后面单独讲解）
                    <span>
                      <br/>
                       4. 
                    </span>
                    将
                    <span>
                      Connection
                    </span>
                    加入到超时管理中去。
                    <span>
                      <br/>
                       5. 
                    </span>
                    将
                    <span>
                      hostPool
                    </span>
                    （
                    <span>
                      host
                    </span>
                    连接池）里等待队列的头元素拿出来 发送
                    <span>
                      interrupt
                    </span>
                    的信号量。目的是 唤醒等待连接的线程。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    到目前为止，有两个点可以详细说下
                    <span>
                      <br/>
                       1. Reference Map
                    </span>
                    的作用。
                    <span>
                      <br/>
                       2.  
                    </span>
                    等待连接的线程的处理方式。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    首先说
                    <strong>
                      <span style="color: #ff0000;">
                        Reference Map
                      </span>
                    </strong>
                    <span>
                      ,
                    </span>
                    这个名字是我自己取的。它在
                    <span>
                      MultiThreadedHttpConnectionManager  
                    </span>
                    中的名字叫做：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    <img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7130/d20fbff5-c6a0-3a3c-8421-bb79be056176.png"/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    在每次获取连接和释放连接的时候会将
                    <span>
                      ”
                    </span>
                    连接
                    <span>
                      “
                    </span>
                    存入和移除。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    <strong>
                      <span style="color: #ff0000;">
                        注意： 这里的
                        <span>
                          ”
                        </span>
                        连接
                        <span>
                          “ 
                        </span>
                        已经不是
                        <span>
                          Connection 
                        </span>
                        而是用
                        <span>
                           WeakReference
                        </span>
                        包装过的
                        <span>
                          Connection
                        </span>
                        。
                      </span>
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    为什么用
                    <span>
                      WeakReference
                    </span>
                    ？
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    这里的概念和
                    <span>
                      ThreadLocal 
                    </span>
                    中用
                    <span>
                      WeakReference 
                    </span>
                    包装
                    <span>
                      ThreadLocalMap
                    </span>
                    中的
                    <span>
                      Key
                    </span>
                    一样。
                    <span>
                       
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    目的是为了 在连接丢失时，
                    <span>
                      HTTP client 
                    </span>
                    失去了对
                    <span>
                      “
                    </span>
                    连接
                    <span>
                      ”
                    </span>
                    （
                    <span>
                      Connection
                    </span>
                    ）的强引用，该连接对象变成了弱引用对象，可以被
                    <span>
                      GC
                    </span>
                    掉。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    所以，每次在获取连接的时候 要将连接用
                    <span>
                      WeakReference 
                    </span>
                    包装后放到
                    <em>
                      <span>
                        REFERENCE_TO_CONNECTION_SOURCE 
                      </span>
                    </em>
                    这个
                    <span>
                      Map
                    </span>
                    中
                    <span>
                      ,
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    每次释放连接时，将它从
                    <em>
                      <span>
                        REFERENCE_TO_CONNECTION_SOURCE 
                      </span>
                    </em>
                    中移除
                    <span>
                      ,
                    </span>
                    因为这个时候连接的管理由线程池使用强引用管理。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    再说，
                    <span style="color: #ff0000;">
                      <strong>
                        等待连接的线程的处理方式
                      </strong>
                    </span>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    先看
                    <span>
                       
                    </span>
                    <span style="color: #ff0000;">
                      <strong>
                        获取连接时的代码 和注释
                      </strong>
                    </span>
                    <span>
                        
                    </span>
                    大部分代码被精简了。 所以逻辑不通，看流程即可。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <div class="dp-highlighter" id="">
                  <div class="bar">
                    <div class="tools">
                      Java代码 
                      <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=%20%20synchronized%20(connectionPool)%20%7B%0A%20%20%20%20%20%20%20%20%20%20while%20(connection%20%3D%3D%20null)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(hostPool.freeConnections.size()%20%3E%200)%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%9C%89%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%AD%E6%9C%89%E7%A9%BA%E9%97%B2%E7%9A%84%E8%BF%9E%E6%8E%A5%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connection%20%3D%20connectionPool.getFreeConnection(hostConfiguration)%3B%0A%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if%20((hostPool.numConnections%20%3C%20maxHostConnections)%20%26%26%20(connectionPool.numConnections%20%3C%20maxTotalConnections))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%B2%A1%E6%9C%89%E7%A9%BA%E9%97%B2%E8%BF%9E%E6%8E%A5%EF%BC%8C%E4%BD%86%E6%98%AF%E6%BB%A1%E8%B6%B3%E5%89%8D%E6%96%87%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%9D%A1%E4%BB%B6%20%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E8%BF%9E%E6%8E%A5%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connection%20%3D%20connectionPool.createConnection(hostConfiguration)%3B%20%0A%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if%20((hostPool.numConnections%20%3C%20maxHostConnections)%20%26%26%20(connectionPool.freeConnections.size()%20%3E%200))%20%7B%0A%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%95%B4%E4%B8%AA%E8%BF%9E%E6%8E%A5%E6%95%B0%20%E6%B2%A1%E6%9C%89%E5%88%B0%E8%BE%BE%E6%9C%80%E5%A4%A7%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%9C%89%E7%A9%BA%E9%97%B2%E8%BF%9E%E6%8E%A5%EF%BC%88%E5%85%B6%E4%BB%96host%E6%B1%A0%E4%B8%AD%EF%BC%89%20%E5%88%99%E5%88%A0%E9%99%A4%E6%8E%89%E5%85%B6%E4%BB%96host%E4%B8%AD%E7%9A%84%E8%BF%9E%E6%8E%A5%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%9C%A8%E5%BD%93%E5%89%8Dhost%E6%B1%A0%E5%AD%90%E4%B8%AD%E5%88%9B%E5%BB%BA%E6%96%B0%E8%BF%9E%E6%8E%A5%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connectionPool.deleteLeastUsedConnection()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connection%20%3D%20connectionPool.createConnection(hostConfiguration)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E4%BB%A5%E4%B8%8A%E6%9D%A1%E4%BB%B6%E9%83%BD%E4%B8%8D%E6%BB%A1%E8%B6%B3%EF%BC%8C%20%E5%8F%AA%E8%83%BD%E5%B0%86%E5%BD%93%E5%89%8D%E7%BA%BF%E7%A8%8B%E7%9D%A1%E7%9C%A0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread%20%3D%20new%20WaitingThread()%3B%2F%2F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%8C%85%E8%A3%85%E7%B1%BB%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread.hostConnectionPool%20%3D%20hostPool%3B%2F%2F%E6%8C%87%E5%AE%9A%E6%89%80%E5%B1%9E%E7%9A%84host%E8%BF%9E%E6%8E%A5%E6%B1%A0%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread.thread%20%3D%20Thread.currentThread()%3B%2F%2F%E5%B0%86%E5%BD%93%E5%89%8D%E7%BA%BF%E7%A8%8B%E8%B5%8B%E5%80%BC%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20startWait%20%3D%20System.currentTimeMillis%20()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20hostPool.waitingThreads.addLast(waitingThread)%3B%2F%2F%E5%B0%86%E7%BA%BF%E7%A8%8B%E5%8C%85%E8%A3%85%E7%B1%BB%20%E6%B7%BB%E5%8A%A0%E5%88%B0host%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%20%E7%AD%89%E5%BE%85%E5%88%97%E8%A1%A8%E4%B8%AD%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connectionPool.waitingThreads.addLast(waitingThread)%3B%2F%2F%E5%B0%86%E7%BA%BF%E7%A8%8B%E5%8C%85%E8%A3%85%E7%B1%BB%20%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%85%A8%E5%B1%80%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%9A%84%20%E7%AD%89%E5%BE%85%E5%88%97%E8%A1%A8%E4%B8%AD%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connectionPool.wait(timeToWait)%3B%2F%2F%E6%B2%89%E7%9D%A1%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20catch%20(InterruptedException%20e)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%A2%AB%E6%89%93%E6%96%AD%E6%98%AF%E6%A3%80%E6%9F%A5%20%E5%B8%83%E5%B0%94%E5%8F%98%E9%87%8FinterruptedByConnectionPool%20%E7%A1%AE%E5%AE%9A%E6%98%AF%20HTTP%20%E9%87%8A%E6%94%BE%E8%BF%9E%E6%8E%A5%E5%90%8E%20%E4%B8%BB%E5%8A%A8%E6%89%93%E6%96%AD%E7%9A%84%EF%BC%8C%E8%BF%98%E6%98%AF%E5%85%B6%E4%BB%96%E5%BC%82%E5%B8%B8%E5%8E%9F%E5%9B%A0%E6%89%93%E6%96%AD%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%98%AF%E8%87%AA%E5%B7%B1%E6%89%93%E6%96%AD%E7%9A%84%20catch%E4%BD%8F%E5%BC%82%E5%B8%B8%E5%90%8E%E4%BB%80%E4%B9%88%E4%B9%9F%E4%B8%8D%E5%81%9A%EF%BC%8C%E9%87%8D%E6%96%B0%E8%BF%9B%E5%85%A5while%E5%BE%AA%E7%8E%AF%E4%B8%AD%EF%BC%8C%E5%B0%9D%E8%AF%95%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(!waitingThread.interruptedByConnectionPool)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20IllegalThreadStateException(%22Interrupted%20while%20waiting%20in%20MultiThreadedHttpConnectionManager%22)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20finally%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(!waitingThread.interruptedByConnectionPool)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20hostPool.waitingThreads.remove(waitingThread)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20connectionPool.waitingThreads.remove(waitingThread)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(useTimeout)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20endWait%20%3D%20System.currentTimeMillis%20()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20timeToWait%20-%3D%20(endWait%20-%20startWait)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"/>
                       
                      <a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;">
                        <img class="star" src="/images/icon_star.png" alt="收藏代码"/>
                        <img class="spinner" src="/images/spinner.gif" style="display:none"/>
                      </a>
                    </div>
                  </div>
                  <ol class="dp-j">
                    <li>
                      <span>
                        <span class="keyword">
                          synchronized
                        </span>
                        <span>
                           (connectionPool) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="keyword">
                          while
                        </span>
                        <span>
                           (connection == 
                        </span>
                        <span class="keyword">
                          null
                        </span>
                        <span>
                          ) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                    
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (hostPool.freeConnections.size() &gt; 
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ) {   
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                          
                        <span class="comment">
                          //有线程池中有空闲的连接
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                        connection = connectionPool.getFreeConnection(hostConfiguration);  
                      </span>
                    </li>
                    <li>
                      <span>
                          
                      </span>
                    </li>
                    <li>
                      <span>
                                    } 
                        <span class="keyword">
                          else
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           ((hostPool.numConnections &lt; maxHostConnections) &amp;&amp; (connectionPool.numConnections &lt; maxTotalConnections)) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                          
                        <span class="comment">
                          //没有空闲连接，但是满足前文的两个条件 可以创建新的连接
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                        connection = connectionPool.createConnection(hostConfiguration);   
                      </span>
                    </li>
                    <li>
                      <span>
                          
                      </span>
                    </li>
                    <li>
                      <span>
                                    } 
                        <span class="keyword">
                          else
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           ((hostPool.numConnections &lt; maxHostConnections) &amp;&amp; (connectionPool.freeConnections.size() &gt; 
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          )) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                          
                      </span>
                    </li>
                    <li>
                      <span>
                                          
                        <span class="comment">
                          //整个连接数 没有到达最大，并且有空闲连接（其他host池中） 则删除掉其他host中的连接，并且在当前host池子中创建新连接
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                        connectionPool.deleteLeastUsedConnection();  
                      </span>
                    </li>
                    <li>
                      <span>
                                        connection = connectionPool.createConnection(hostConfiguration);  
                      </span>
                    </li>
                    <li>
                      <span>
                                    } 
                        <span class="keyword">
                          else
                        </span>
                        <span>
                           {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                        
                        <span class="comment">
                          //以上条件都不满足， 只能将当前线程睡眠
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                        
                        <span class="keyword">
                          try
                        </span>
                        <span>
                           {   
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                          waitingThread = 
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           WaitingThread();
                        </span>
                        <span class="comment">
                          //创建一个线程包装类
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                          waitingThread.hostConnectionPool = hostPool;
                        <span class="comment">
                          //指定所属的host连接池
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                          waitingThread.thread = Thread.currentThread();
                        <span class="comment">
                          //将当前线程赋值           
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                          startWait = System.currentTimeMillis ();  
                      </span>
                    </li>
                    <li>
                      <span>
                                             
                      </span>
                    </li>
                    <li>
                      <span>
                                            hostPool.waitingThreads.addLast(waitingThread);
                        <span class="comment">
                          //将线程包装类 添加到host连接池的 等待列表中
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                            connectionPool.waitingThreads.addLast(waitingThread);
                        <span class="comment">
                          //将线程包装类 添加到全局连接池的 等待列表中
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                            connectionPool.wait(timeToWait);
                        <span class="comment">
                          //沉睡
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                        } 
                        <span class="keyword">
                          catch
                        </span>
                        <span>
                           (InterruptedException e) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                               
                        <span class="comment">
                          //被打断是检查 布尔变量interruptedByConnectionPool 确定是 HTTP 释放连接后 主动打断的，还是其他异常原因打断
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                               
                        <span class="comment">
                          //是自己打断的 catch住异常后什么也不做，重新进入while循环中，尝试获取连接
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (!waitingThread.interruptedByConnectionPool) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                     
                        <span class="keyword">
                          throw
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          new
                        </span>
                        <span>
                           IllegalThreadStateException(
                        </span>
                        <span class="string">
                          "Interrupted while waiting in MultiThreadedHttpConnectionManager"
                        </span>
                        <span>
                          );  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                 }  
                      </span>
                    </li>
                    <li>
                      <span>
                                        } 
                        <span class="keyword">
                          finally
                        </span>
                        <span>
                           {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                            
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (!waitingThread.interruptedByConnectionPool) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                hostPool.waitingThreads.remove(waitingThread);  
                      </span>
                    </li>
                    <li>
                      <span>
                                                connectionPool.waitingThreads.remove(waitingThread);  
                      </span>
                    </li>
                    <li>
                      <span>
                                            }  
                      </span>
                    </li>
                    <li>
                      <span>
                                            
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (useTimeout) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                                endWait = System.currentTimeMillis ();  
                      </span>
                    </li>
                    <li>
                      <span>
                                                timeToWait -= (endWait - startWait);  
                      </span>
                    </li>
                    <li>
                      <span>
                                            }  
                      </span>
                    </li>
                    <li>
                      <span>
                                        }  
                      </span>
                    </li>
                    <li>
                      <span>
                                    }  
                      </span>
                    </li>
                    <li>
                      <span>
                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                            }  
                      </span>
                    </li>
                  </ol>
                </div>
                <pre name="code" class="java" style="display: none;">
                    synchronized (connectionPool) {
          while (connection == null) {
              if (hostPool.freeConnections.size() &gt; 0) { 
                    //有线程池中有空闲的连接
                  connection = connectionPool.getFreeConnection(hostConfiguration);
 
              } else if ((hostPool.numConnections &lt; maxHostConnections) &amp;&amp; (connectionPool.numConnections &lt; maxTotalConnections)) {
                    //没有空闲连接，但是满足前文的两个条件 可以创建新的连接
                  connection = connectionPool.createConnection(hostConfiguration); 
 
              } else if ((hostPool.numConnections &lt; maxHostConnections) &amp;&amp; (connectionPool.freeConnections.size() &gt; 0)) {
 
                    //整个连接数 没有到达最大，并且有空闲连接（其他host池中） 则删除掉其他host中的连接，并且在当前host池子中创建新连接
                  connectionPool.deleteLeastUsedConnection();
                  connection = connectionPool.createConnection(hostConfiguration);
              } else {
                  //以上条件都不满足， 只能将当前线程睡眠
                  try { 
                    waitingThread = new WaitingThread();//创建一个线程包装类
                    waitingThread.hostConnectionPool = hostPool;//指定所属的host连接池
                    waitingThread.thread = Thread.currentThread();//将当前线程赋值           
                    startWait = System.currentTimeMillis ();
                     
                      hostPool.waitingThreads.addLast(waitingThread);//将线程包装类 添加到host连接池的 等待列表中
                      connectionPool.waitingThreads.addLast(waitingThread);//将线程包装类 添加到全局连接池的 等待列表中
                      connectionPool.wait(timeToWait);//沉睡
                  } catch (InterruptedException e) {
                         //被打断是检查 布尔变量interruptedByConnectionPool 确定是 HTTP 释放连接后 主动打断的，还是其他异常原因打断
                         //是自己打断的 catch住异常后什么也不做，重新进入while循环中，尝试获取连接
                           if (!waitingThread.interruptedByConnectionPool) {
                               throw new IllegalThreadStateException("Interrupted while waiting in MultiThreadedHttpConnectionManager");
                           }
                  } finally {
                      if (!waitingThread.interruptedByConnectionPool) {
                          hostPool.waitingThreads.remove(waitingThread);
                          connectionPool.waitingThreads.remove(waitingThread);
                      }
                      if (useTimeout) {
                          endWait = System.currentTimeMillis ();
                          timeToWait -= (endWait - startWait);
                      }
                  }
              }
          }
      }
                </pre>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      释放连接时
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    调用
                    <span>
                      notifyWaitingThread 
                    </span>
                    方法，结合上面的代码看：
                  </span>
                </p>
                <p class="MsoNormal">
                   
                </p>
                <div class="dp-highlighter" id="">
                  <div class="bar">
                    <div class="tools">
                      Java代码 
                      <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=%20public%20synchronized%20void%20notifyWaitingThread(HostConnectionPool%20hostPool)%20%7B%0A%20%0A%20%20%20%20%20%20%20%20%20%2F%2F%20find%20the%20thread%20we%20are%20going%20to%20notify%2C%20we%20want%20to%20ensure%20that%20each%0A%20%20%20%20%20%20%20%20%20%2F%2F%20waiting%20thread%20is%20only%20interrupted%20once%20so%20we%20will%20remove%20it%20from%0A%20%20%20%20%20%20%20%20%20%2F%2F%20all%20wait%20queues%20before%20interrupting%20it%0A%20%20%20%20%20%20%20%20%20WaitingThread%20waitingThread%20%3D%20null%3B%0A%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%96%E5%87%BA%20%E7%AD%89%E5%BE%85%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%90%8E%E5%8F%91%E9%80%81%20%20%20%20%20interrupt%20%E4%BF%A1%E5%8F%B7%E9%87%8F%EF%BC%8C%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20if%20(hostPool.waitingThreads.size()%20%3E%200)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread%20%3D%20(%20WaitingThread)%20hostPool.waitingThreads.removeFirst()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThreads.remove(waitingThread)%3B%0A%20%20%20%20%20%20%20%20%20%7D%20else%20if%20(waitingThreads%20.size()%20%3E%200)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread%20%3D%20(%20WaitingThread)%20waitingThreads.removeFirst()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread.hostConnectionPool.waitingThreads.remove(waitingThread)%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AF%BC%E8%87%B4%20%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%82%A3%E4%B8%AA%E6%96%B9%E6%B3%95%E4%B8%AD%20%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8%0A%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%B3%A8%EF%BC%9Ainterrupt%20%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%98%AF%E4%B8%80%E5%AE%9A%E4%BC%9A%E5%BC%95%E8%B5%B7%20interruptException%E7%9A%84%0A%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86interruptedByConnectionPool%20%E8%AE%BE%E7%BD%AE%E4%B8%BAtrue%20%E5%A5%BD%E6%A0%87%E6%98%8E%20%E6%98%AF%20HTTP%20client%20%E6%89%8B%E5%8A%A8%E6%89%93%E6%96%AD%E7%9A%84%E3%80%82%20%E8%BF%99%E6%98%AFHTTP%20client%E5%AF%B9%E4%BA%8E%E7%AD%89%E5%BE%85%E7%BA%BF%E7%A8%8B%E5%94%A4%E9%86%92%E6%96%B9%E5%BC%8F%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E8%B7%AF%0A%20%20%20%20%20%20%20%20%20if%20(waitingThread%20!%3D%20null)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread.interruptedByConnectionPool%20%3D%20true%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20waitingThread.thread.interrupt()%3B%0A%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%7D" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"/>
                       
                      <a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;">
                        <img class="star" src="/images/icon_star.png" alt="收藏代码"/>
                        <img class="spinner" src="/images/spinner.gif" style="display:none"/>
                      </a>
                    </div>
                  </div>
                  <ol class="dp-j">
                    <li>
                      <span>
                        <span class="keyword">
                          public
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          synchronized
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          void
                        </span>
                        <span>
                           notifyWaitingThread(HostConnectionPool hostPool) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                          
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // find the thread we are going to notify, we want to ensure that each
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // waiting thread is only interrupted once so we will remove it from
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // all wait queues before interrupting it
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                WaitingThread waitingThread = 
                        <span class="keyword">
                          null
                        </span>
                        <span>
                          ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // 取出 等待的线程后发送     interrupt 信号量，
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                 
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (hostPool.waitingThreads.size() &gt; 
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                      </span>
                    </li>
                    <li>
                      <span>
                                    waitingThread = ( WaitingThread) hostPool.waitingThreads.removeFirst();  
                      </span>
                    </li>
                    <li>
                      <span>
                                    waitingThreads.remove(waitingThread);  
                      </span>
                    </li>
                    <li>
                      <span>
                                } 
                        <span class="keyword">
                          else
                        </span>
                        <span>
                           
                        </span>
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (waitingThreads .size() &gt; 
                        </span>
                        <span class="number">
                          0
                        </span>
                        <span>
                          ) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                     
                      </span>
                    </li>
                    <li>
                      <span>
                                    waitingThread = ( WaitingThread) waitingThreads.removeFirst();  
                      </span>
                    </li>
                    <li>
                      <span>
                                    waitingThread.hostConnectionPool.waitingThreads.remove(waitingThread);  
                      </span>
                    </li>
                    <li>
                      <span>
                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // 导致 获取连接的那个方法中 捕获异常
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // 注：interrupt 信号量是一定会引起 interruptException的
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="comment">
                          // 将interruptedByConnectionPool 设置为true 好标明 是 HTTP client 手动打断的。 这是HTTP client对于等待线程唤醒方式的核心思路
                        </span>
                        <span>
                            
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                
                        <span class="keyword">
                          if
                        </span>
                        <span>
                           (waitingThread != 
                        </span>
                        <span class="keyword">
                          null
                        </span>
                        <span>
                          ) {  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                    waitingThread.interruptedByConnectionPool = 
                        <span class="keyword">
                          true
                        </span>
                        <span>
                          ;  
                        </span>
                      </span>
                    </li>
                    <li>
                      <span>
                                    waitingThread.thread.interrupt();  
                      </span>
                    </li>
                    <li>
                      <span>
                                }  
                      </span>
                    </li>
                    <li>
                      <span>
                            }  
                      </span>
                    </li>
                  </ol>
                </div>
                <pre name="code" class="java" style="display: none;">
                   public synchronized void notifyWaitingThread(HostConnectionPool hostPool) {
 
         // find the thread we are going to notify, we want to ensure that each
         // waiting thread is only interrupted once so we will remove it from
         // all wait queues before interrupting it
         WaitingThread waitingThread = null;
         // 取出 等待的线程后发送     interrupt 信号量，
        
         if (hostPool.waitingThreads.size() &gt; 0) {
            
             waitingThread = ( WaitingThread) hostPool.waitingThreads.removeFirst();
             waitingThreads.remove(waitingThread);
         } else if (waitingThreads .size() &gt; 0) {
            
             waitingThread = ( WaitingThread) waitingThreads.removeFirst();
             waitingThread.hostConnectionPool.waitingThreads.remove(waitingThread);
         }
         // 导致 获取连接的那个方法中 捕获异常
         // 注：interrupt 信号量是一定会引起 interruptException的
         // 将interruptedByConnectionPool 设置为true 好标明 是 HTTP client 手动打断的。 这是HTTP client对于等待线程唤醒方式的核心思路
         if (waitingThread != null) {
             waitingThread.interruptedByConnectionPool = true;
             waitingThread.thread.interrupt();
         }
     }
                </pre>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <strong>
                      <span>
                         
                        <br/>
                      </span>
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    上面两端代码主要思路就是
                    <span>
                      : 
                    </span>
                    有空连接就直接用，没有则沉睡等待唤醒。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    其实用
                    <span>
                      interrupt
                    </span>
                    信号量 会引起
                    <span>
                      interruptException
                    </span>
                    异常，通过
                    <span>
                      catch
                    </span>
                    住异常来处理，是比较粗暴的。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    优雅的用
                    <span>
                       wait and notify
                    </span>
                    的方式 就不需要
                    <span>
                      catch
                    </span>
                    异常，同样能达到唤醒线程效果，而且很优雅。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      <span>
                        MultiThreadedHttpConnectionManager  
                      </span>
                    </strong>
                    <strong>
                      中对弱引用的使用
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      MultiThreadedHttpConnectionManager  
                    </span>
                    类中 还有一个
                    <span>
                       ReferenceQueueThread
                    </span>
                    类 是用来配合
                    <span>
                      HttpConnectionWithReference
                    </span>
                    （将连接用弱引用包裹后的对象）使用的
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    <img alt="" src="http://dl2.iteye.com/upload/attachment/0085/7132/d18cec7b-bd12-3c3e-932a-ca98b0233a52.png"/>
                    <br/>
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    使用的方式是这样：
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      1. 
                    </span>
                    创建连接时，用弱引用包裹住
                    <span>
                      Connection
                    </span>
                    对象放到
                    <em>
                      <span>
                        REFERENCE_TO_CONNECTION_SOURCE  
                      </span>
                    </em>
                    中，目的是防止在连接丢失的时候
                    <span>
                      Map
                    </span>
                    中的这个
                    <span>
                      HttpConnectionWithReference 
                    </span>
                    对象变成弱引用，
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                           
                    </span>
                    在
                    <span>
                      GC
                    </span>
                    回收时会被回收掉，防止内存泄露。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      2. 
                    </span>
                    首先明确的是，
                    <span>
                      JVM
                    </span>
                    会在
                    <span>
                      HttpConnectionWithReference 
                    </span>
                    被回收的时候，将他加入到
                    <span>
                      REFERENCE_QUEUE 
                    </span>
                    中。这是
                    <span>
                      JAVA
                    </span>
                    对于弱引用的规则。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      3. 
                    </span>
                    同时，在将
                    <span>
                      HttpConnectionWithReference  
                    </span>
                    放入
                    <span>
                      Map
                    </span>
                    时，启动一个子线程
                    <span>
                       ReferenceQueueThread  
                    </span>
                    去监听 这个
                    <span>
                      REFERENCE_QUEUE 
                    </span>
                    ，只要这个
                    <span>
                      REFERENCE_QUEUE  
                    </span>
                    有值（被
                    <span>
                      GC
                    </span>
                    回收的时候）
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                           
                    </span>
                    立马被取出来，将线程池可用连接的大小
                    <span>
                       -1 
                    </span>
                    。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      MultiThreadedHttpConnectionManager  
                    </span>
                    使用弱引用 确保了
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      1. connection
                    </span>
                    对象丢失时 内存的及时回收。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      2. 
                    </span>
                    搭配队列和子线程确保，连接丢失后线程池中可用连接数的次数可以修改。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                    说到这里，
                    <span>
                      HTTP Client
                    </span>
                    的
                    <span>
                      MultiThreadedHttpConnectionManager  
                    </span>
                    类的绝大部分分方法已经解释完毕了。其中主要是省略掉了，发送和读取
                    <span>
                      HTTP 
                    </span>
                    报文的代码，没有太多技巧，以规则解析出来即可。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      总结：
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      1. 
                    </span>
                    在单纯的发送请求的场景下，使用
                    <span>
                      MultiThreadedHttpConnectionManager 
                    </span>
                    来代替
                    <span>
                      SimpleHTTPConnectionManger
                    </span>
                    是可行的，并且
                    <span>
                      MultiThreadedHttpConnectionManager 
                    </span>
                    的连接池机制也会提高发送请求的效率，
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                    <span>
                      2. 
                    </span>
                    但是觉得不符合分布式应用间的借口调用，原因很简单，对每个
                    <span>
                      host
                    </span>
                    做了连接池，在一定情况下，这个限制是致命的，直接影响了接口的调用效率。严重影响调用的并发数。所以，在分布式应用的调用中不适合使用
                    <span>
                      MultiThreadedHttpConnectionManager 
                    </span>
                    。
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      <span>
                        MultiThreadedHttpConnectionManager
                      </span>
                    </strong>
                    <strong>
                      类中几个值得注意的点：
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      <span>
                        1. 
                      </span>
                    </strong>
                    <strong>
                      连接的管理，特别是使用
                      <span>
                        WeakReference
                      </span>
                      包装
                      <span>
                        Connection
                      </span>
                      对象，然后结合一个子线程和
                      <span>
                        Queque
                      </span>
                      去确保对象被回收时，可以连接数的增加。
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; color: #ff0000; font-size: 14px;">
                    <strong>
                      <span>
                        2. 
                      </span>
                    </strong>
                    <strong>
                      对于没有连接可用时，使用使当前线程睡眠的，在释放连接时 使用
                      <span>
                         
                      </span>
                    </strong>
                    <strong>
                      <span>
                        interrupt
                      </span>
                    </strong>
                    <strong>
                      信号量 是等待线程恢复的处理方式
                    </strong>
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-size: 14px; font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif;">
                     
                  </span>
                </p>
                <p class="MsoNormal">
                  <span style="font-family: 'Microsoft YaHei', 微软雅黑, SimHei, tahoma, arial, helvetica, sans-serif; font-size: 14px;">
                     
                  </span>
                </p>
              </div>
              <div>
                <!-- 广告位：PC端-iteye博客详情页底部banner2-728*90 -->                <script>
//<![CDATA[

      (function() {
          var s = "_" + Math.random().toString(36).slice(2);
          document.write('<div id="' + s + '"></div>');
          (window.slotbydup=window.slotbydup || []).push({
              id: '4774193',
              container: s,
              size: '728,90',
              display: 'inlay-fix'
          });
      })();
      jQuery(function(){
        window.csdn.recommendSide({
          contentBox: "recommend",
          postBox: jQuery(".news-right-side"),
          query:'HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析',
          popu:'725'
        })
      });
    
//]]>
                </script>
                <div id="_k0xn2u9minc">
                </div>
                <script charset="utf-8" src="https://pos.baidu.com/qcmm?psi=9932d8391342780187e298fae58b3324&amp;di=4774193&amp;dri=0&amp;dis=0&amp;dai=0&amp;ps=2257x18&amp;enu=encoding&amp;dcb=___adblockplus&amp;dtm=SSP_JSONP&amp;dvi=0.0&amp;dci=-1&amp;dpt=none&amp;tsr=0&amp;tpr=1548992641969&amp;ti=HTTP%20Client%20MultiThreadedHttpConnectionManager%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86%E7%B1%BB%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%20&amp;ari=2&amp;dbv=2&amp;drs=1&amp;pcs=1256x605&amp;pss=1256x605&amp;cfv=0&amp;cpl=0&amp;chi=1&amp;cce=true&amp;cec=UTF-8&amp;tlm=1548992640&amp;prot=2&amp;rw=605&amp;ltu=https%3A%2F%2Fliuinsect.iteye.com%2Fblog%2F1886237&amp;ecd=1&amp;uc=1024x768&amp;pis=-1x-1&amp;sr=1024x768&amp;tcn=1548992642&amp;exps=110000">
                </script>
                <a href="http://www.baidu.com/cb.php?c=IgF_pyfqnHmkPjT4P160IZ0qnfK9ujYzrHn1PHTz0Aw-5Hnsn16YnjT0TAq15HfLP1fkrHn0T1YYujm1PWRdryFbPHfsrj040AwY5HDdPj64rHcvPjc0IgF_5y9YIZK1rBtEuywdQhP1uA38UhNYQLwETA-WQvG9IhDk5LNYUNq1ULNzmvRqmh78UhNz5LNYUNq1ULNzmvRqmhkEuv-Yug--0ZFb5Hn0mhYqnfKsTWYs0ZNGujYkPHTYn1mk0AqGujYknWb3rjDY0APGujYLn1bdn1n0ULI85H00TZbqnW0v0APzm1YkrjTdnf" target="_blank" style="text-decoration:none;">
                  <div style="font-size:17px;color:#f13d3d;font-family: SF Pro Display,Roboto,Noto,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,sans-serif;width:728px;height:25px;font-weight:bold;">
                    2019开年报告：Java坐稳榜首，彻底甩掉C++!
                  </div>
                  <div style="font-size:13px;color:#666;font-family: SF Pro Display,Roboto,Noto,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,sans-serif;height:35px;margin-top:10px;">
                    厉害了，我的java！
                  </div>
                </a>
              </div>
              <div id="bottoms" class="clearfix">
                <div id="share_weibo">
                  分享到：
      
                  <a data-type="sina" href="javascript:;" title="分享到新浪微博">
                    <img src="/images/sina.jpg"/>
                  </a>
                  <a data-type="qq" href="javascript:;" title="分享到腾讯微博">
                    <img src="/images/tec.jpg"/>
                  </a>
                </div>
              </div>
              <div class="blog_nav">
                <div class="pre_next">
                  <a href="/blog/1917545" class="next" title="Mysql主从同步配置">
                    Mysql主从同步配置
                  </a>
                  
      |
      
                  <a href="/blog/1662857" class="pre" title="java中wait 信号量和notify信号量的使用">
                    java中wait 信号量和notify信号量的使用
                  </a>
                </div>
              </div>
              <div class="blog_bottom">
                <ul>
                  <li>
                    2013-06-13 16:35
                  </li>
                  <li>
                    浏览 29531
                  </li>
                  <li>
                    <a href="#comments">
                      评论(4)
                    </a>
                  </li>
                  <li>
                    分类:
                    <a href="https://www.iteye.com/blogs/category/opensource">
                      开源软件
                    </a>
                  </li>
                  <li class="last">
                    <a href="https://www.iteye.com/wiki/blog/1886237" target="_blank" class="more">
                      查看更多
                    </a>
                  </li>
                </ul>
              </div>
              <div class="blog_comment">
                <h5>
                  评论
                </h5>
                <a id="comments" name="comments">
                </a>
                <div id="bc2315317">
                  <div class="comment_title">
                    
    4 楼
    
                    <a href="https://liuinsect.iteye.com" target="_blank" title="liuInsect">
                      liuInsect
                    </a>
                    
    2013-06-15  
    
    
  
                  </div>
                  <div class="comment_content">
                    <div class="quote_title">
                      ziwuzu 写道
                    </div>
                    <div class="quote_div">
                      <div class="quote_title">
                        liuInsect 写道
                      </div>
                      <div class="quote_div">
                        <div class="quote_title">
                          ziwuzu 写道
                        </div>
                        <div class="quote_div">
                          为什么不适合分布式应用？有什么效率问题？
                        </div>
                        <br/>
                        <br/>
                        在没有一个统一的 远程调用框架的时候 用HTTP Client 是可以的，或者说只能用HTTP Client
                        <br/>
                        <br/>
                        但是使用这种连接池的Manager 不合适的原因是 它的连接池 是基于Host的。同一个Host的最大请求量受连接池大小限制。 你说适合分布式环境么？
                        <br/>
                        <br/>
                        <br/>
                      </div>
                      <br/>
                      如果是连接池大小的问题，可以修改连接池的大小。
                    </div>
                    <br/>
                    <br/>
                    <br/>
                    但是它低连接数的时候几十个，高并发的时候 峰值成百上千个，怎么搞？
                    <br/>
                    是不是都因为设置的这个值阻塞在这里了~？
                    <br/>
                  </div>
                </div>
                <div id="bc2315302">
                  <div class="comment_title">
                    
    3 楼
    
                    <a href="https://ziwuzu.iteye.com" target="_blank" title="ziwuzu">
                      ziwuzu
                    </a>
                    
    2013-06-15  
    
    
  
                  </div>
                  <div class="comment_content">
                    <div class="quote_title">
                      liuInsect 写道
                    </div>
                    <div class="quote_div">
                      <div class="quote_title">
                        ziwuzu 写道
                      </div>
                      <div class="quote_div">
                        为什么不适合分布式应用？有什么效率问题？
                      </div>
                      <br/>
                      <br/>
                      在没有一个统一的 远程调用框架的时候 用HTTP Client 是可以的，或者说只能用HTTP Client

                      <br/>
                      <br/>
                      但是使用这种连接池的Manager 不合适的原因是 它的连接池 是基于Host的。同一个Host的最大请求量受连接池大小限制。 你说适合分布式环境么？

                      <br/>
                      <br/>
                      <br/>
                    </div>
                    <br/>
                    如果是连接池大小的问题，可以修改连接池的大小。
                  </div>
                </div>
                <div id="bc2315161">
                  <div class="comment_title">
                    
    2 楼
    
                    <a href="https://liuinsect.iteye.com" target="_blank" title="liuInsect">
                      liuInsect
                    </a>
                    
    2013-06-14  
    
    
  
                  </div>
                  <div class="comment_content">
                    <div class="quote_title">
                      ziwuzu 写道
                    </div>
                    <div class="quote_div">
                      为什么不适合分布式应用？有什么效率问题？
                    </div>
                    <br/>
                    <br/>
                    在没有一个统一的 远程调用框架的时候 用HTTP Client 是可以的，或者说只能用HTTP Client
                    <br/>
                    <br/>
                    但是使用这种连接池的Manager 不合适的原因是 它的连接池 是基于Host的。同一个Host的最大请求量受连接池大小限制。 你说适合分布式环境么？
                    <br/>
                    <br/>
                    <br/>
                  </div>
                </div>
                <div id="bc2315157">
                  <div class="comment_title">
                    
    1 楼
    
                    <a href="https://ziwuzu.iteye.com" target="_blank" title="ziwuzu">
                      ziwuzu
                    </a>
                    
    2013-06-14  
    
    
  
                  </div>
                  <div class="comment_content">
                    为什么不适合分布式应用？有什么效率问题？
                  </div>
                </div>
              </div>
              <div class="blog_comment">
                <h5>
                  发表评论
                </h5>
                <p style="text-align:center; margin-top:30px;margin-bottom:0px;">
                  <a href="/login" style="background-color:white;">
                    <img src="/images/login_icon.png" style="vertical-align:middle; margin-right: 10px;"/>
                  </a>
                  <a href="/login">
                      您还没有登录,请您登录后再发表评论 
                  </a>
                </p>
              </div>
            </div>
            <div class="boutique-curr-box blog_comment">
              <div class="boutique-curr clearfix" id="album_detail_wrap">
                <h5 class="h3titles">
                  相关资源推荐
                </h5>
                <ul style="margin-top: 8px" class="clearfix">
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/kobejayandy/article/details/16921265" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/kobejayandy/article/details/16921265,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/kobejayandy/article/details/16921265,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient多线程并发问题">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      多线程并发问题
                    </a>
                    <p>
                      
                这篇文章概括了怎样在多线程环境下安全的使用
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      。
建立
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      

在
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      中使用多线程的一个主要原因是可以一次执行多个方法。在执行期间，每一个方法都使用一个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      Connection实例。由于在同一时间多个
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      只能安全地用于单一线程和方法和有限的资源，我们就必须确保
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      分配给正确的方法。而
                      <em class="related_suggestion_highlight">
                        MultiThreadedHttpConnectionManager
                      </em>
                      完全可以
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/hitustc/article/details/4843670" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/hitustc/article/details/4843670,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/hitustc/article/details/4843670,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="[转载]HTTPCLIENT性能调优">
                      [转载]
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      <em class="related_suggestion_highlight">
                        CLIENT
                      </em>
                      性能调优
                    </a>
                    <p>
                      
                 
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      的默认配置提供了最大的可靠性和标准的遵守，而不是性能。（哪个标准？难道是指
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      协议规范？）有几个配置选项和优化技术，可以显着提高
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                       的性能表现。 本文档给出了对
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      如何调优的大纲。1.重用
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      <em class="related_suggestion_highlight">
                        CLIENT
                      </em>
                      实例。          一般说来，建议一个通讯组件，甚至说一个应用软件就始终维持一个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      对象实例存在。
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/u011402596/article/details/44619443" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/u011402596/article/details/44619443,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/u011402596/article/details/44619443,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient 多线程处理">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                       多线程处理
                    </a>
                    <p>
                      
                为什么要使用单例
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      ？在发出
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      请求前，我们先创建了一个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      对象。那么，在实际项目中，我们很可能在多处需要进行
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      通信，这时候我们不需要为每个请求都创建一个新的
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      。因为
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      就像一个小型的浏览器，对于整个应用，我们只需要一个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      就够了。看到这里，一定有人心里想，这有什么难的，用单例啊！！那么，哪里不对劲呢？或者说
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/genius5200/article/details/7875334" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/genius5200/article/details/7875334,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/genius5200/article/details/7875334,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="Httpclient默认连接数导致性能瓶颈问题">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      默认
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      数导致性能瓶颈问题
                    </a>
                    <p>
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      ConnectionManager 
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      ConnectionManager = new 
                      <em class="related_suggestion_highlight">
                        MultiThreadedHttpConnectionManager
                      </em>
                      ();
        
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      ConnectionManagerParams params = 
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      ConnectionManager.getParams();
        params.setConnectionTi
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/chuchus/article/details/50594664" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/chuchus/article/details/50594664,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/chuchus/article/details/50594664,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpComponents 之客户端连接池">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      Components 之客户端
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      池
                    </a>
                    <p>
                      
                1.配置参数
org.apache.
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      .impl.conn.Pooling
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      ConnectionManager
类。用于管理
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      池。调用默认构造函数即可得到。
org.apache.
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      .impl.conn.Pooling
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      ConnectionManager.setMaxTotal(int max)

设置最大的
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      数，即
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/qq_30366667/article/details/81675644" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_30366667/article/details/81675644,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_30366667/article/details/81675644,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="SparkSession 内部原理就简单解析">
                      SparkSession 内部原理就简单
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                    </a>
                    <p>
                      
                自己下一个
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      看到导的包就知道里面包含了很多内容

import java.io.Closeable
import java.util.concurrent.atomic.AtomicReference

import scala.collection.JavaConverters._
import scala.reflect.runtime.universe.TypeTag
import sca...
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/qijiqiguai/article/details/76034847" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76034847,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76034847,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient源码解析系列：第二篇：极简版实现">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                      系列：第二篇：极简版实现
                    </a>
                    <p>
                      
                从Minimal
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      从名字可以看出，是一个极简可以用的版本，是核心设计的原初模型。所以我们就从最精简的开始分析。
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/dwater/article/details/1811414" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/dwater/article/details/1811414,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/dwater/article/details/1811414,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="解读开源软件的七种盈利模式">
                      解读
                      <em class="related_suggestion_highlight">
                        开源软件
                      </em>
                      的七种盈利模式
                    </a>
                    <p>
                      
                法律条款都公开，但律师照样赚钱! 医学知识都公开，但医生照样赚钱! 软件行业由于其技术的特殊性，软件存在源代码与二进制代码之分，存在编译过程。导致源代码一直成为盈利的一个新卖点。但任何行业都一样，都存在一个发展和变迁的过程。软件行业也是如此。如今
                      <em class="related_suggestion_highlight">
                        开源软件
                      </em>
                      已经在全球范围内迅猛发展。开源产品已经完全可以替代现有商业软件。包括操作系统Linux，浏览器FireFox，开源ERP/CRM信息化方案，服
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/u012469740/article/details/59191309" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/u012469740/article/details/59191309,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/u012469740/article/details/59191309,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="CobarClient源码分析">
                      Cobar
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      分析
                    </a>
                    <p>
                      
                前言
Cobar 
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      是一个阿里开源的轻量级分布式数据访问层，基于Ibatis和Spring框架。
最近公司的项目在分表分库时使用此框架，起初不明白为什么使用这么老，没人维护的开源框架。后来想想是根据现有代码，迁移起来简单吧。

既然用了，就还是仔细看下，深入的了解一下Cobar
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      的原理吧。


正文
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/qijiqiguai/article/details/76213018" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76213018,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76213018,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient源码解析系列：第三篇：发送-接收的底层过程">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                      系列：第三篇：发送-接收的底层过程
                    </a>
                    <p>
                      
                DefaultB
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      Connection，而它又是继承自B
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      ConnectionBase 来看 
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                       的Socket交互流程
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      。
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/aiqing0119/article/details/48468215" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/aiqing0119/article/details/48468215,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/aiqing0119/article/details/48468215,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="﻿﻿http连接池使用">
                      ﻿﻿
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      池使用
                    </a>
                    <p>
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      4.X 升级 入门 + 
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      池使用




                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      ://blog.csdn.net/shootyou/article/details/6415248






在一次服务器异常的排查过程当中（服务器异常排查的过程我会另起文章），我们决定使用
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      4.X替代
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      3.X或者
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      Connection。
为什么使用Ht
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/phantom_111/article/details/76688252" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/phantom_111/article/details/76688252,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/phantom_111/article/details/76688252,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="gRPC-transport包源码分析">
                      gRPC-transport包
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      分析
                    </a>
                    <p>
                      
                gRPC是基于
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      /2标准和proto协议开发的，gRPC的很多特性都依赖于
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      /2标准提供。gRPC设计的四种模式是基于底层
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      /2的流的概念。transport包是基于
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      /2标准的实现，提供了流控等特性。流控transport提供基于connection和stream的两级流控。-------------------------------------gRPC流控默认值----
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/qijiqiguai/article/details/76034767" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76034767,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qijiqiguai/article/details/76034767,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="HttpClient源码解析系列：第一篇：总览">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                      系列：第一篇：总览
                    </a>
                    <p>
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                      系列：第一篇：总览。
最最核心的
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      接口。
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/cpzhong/article/details/7417336" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/cpzhong/article/details/7417336,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/cpzhong/article/details/7417336,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="Httpclient的会话保持引起的线程安全问题">
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      的会话保持引起的
                      <em class="related_suggestion_highlight">
                        线程安全
                      </em>
                      问题
                    </a>
                    <p>
                      
                这两天线上出现一个问题，通过
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      来抓取页面，服务端在页面渲染的时候出现了串号现象。
首先看下代码，controller中代码如下：
request.getSession().setAttribute("sid", id);
vm页面再通过$!request.session.getAttribute("sid")获取参数值，这代码很常见，看起来单线程和多线程并发都不会有问题，因
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/yi_master/article/details/80511767" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/yi_master/article/details/80511767,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/yi_master/article/details/80511767,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="彻底掌握网络通信（四）Android源码中HttpClient的发送框架解析">
                      彻底掌握网络通信（四）Android
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      中
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      的发送框架
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                    </a>
                    <p>
                      
                前面简单说了下
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      在不同android版本的配置，这篇主要介绍下Android中
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      的执行全流程
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/fishmai/article/details/51786291" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/fishmai/article/details/51786291,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/fishmai/article/details/51786291,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="开源软件架构－GDB">
                      <em class="related_suggestion_highlight">
                        开源软件
                      </em>
                      架构－GDB
                    </a>
                    <p>
                      
                GDB，即GNU调试器(GNU Debugger)。它诞生自
                      <em class="related_suggestion_highlight">
                        开源软件
                      </em>
                      基金会 (Free Software Foundation)成立之初的第一批程序，并一直是免费和
                      <em class="related_suggestion_highlight">
                        开源软件
                      </em>
                      系统中的主要成员。最初GDB只是 Unix 系统上一个简单的
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      层次的调试器，代码量不过数千行 C 代码，后来逐步发展壮大，拓展到包括嵌入式系统在内多个平台，代码量也达到了上百万行。


原文地址：
                      <em class="related_suggestion_highlight">
                        http
                      </em>
                      ://aosab
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/yan8024/article/details/46456375" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/yan8024/article/details/46456375,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/yan8024/article/details/46456375,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="使用线程安全的单例模式HttpClient，及HttpClient和Application的融合">
                      使用
                      <em class="related_suggestion_highlight">
                        线程安全
                      </em>
                      的单例模式
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      ，及
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      和Application的融合
                    </a>
                    <p>
                      
                上文简单介绍了
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      和Tomcat服务器的交互，主角是
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      ,然后它跟服务器交互有两种方式即get和post。所以这个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      就类似于电脑上用的浏览器。当我打开多个网页的时候，并不需要开一个网页就开一个浏览器，而是一个浏览器上面开了好几个网页。对应于
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      ，即无需
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      一次就new一个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      <em class="related_suggestion_highlight">
                        Client
                      </em>
                      。一般，我们希望一个应用里就一个
                      <em class="related_suggestion_highlight">
                        Http
                      </em>
                      C
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/kifile/article/details/57572258" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/kifile/article/details/57572258,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/kifile/article/details/57572258,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="ZooKeeper源码学习笔记(1)--client端解析">
                      ZooKeeper
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      学习笔记(1)--
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                      端
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                    </a>
                    <p>
                      
                ZooKeeper 
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      学习笔记(1)  
                      <em class="related_suggestion_highlight">
                        client
                      </em>
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/xgjianstart/article/details/70143365" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/xgjianstart/article/details/70143365,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/xgjianstart/article/details/70143365,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="elasticsearch源码分析之Rest/RPC 接口解析(八)">
                      elasticsearch
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      分析之Rest/RPC 接口
                      <em class="related_suggestion_highlight">
                        解析
                      </em>
                      (八)
                    </a>
                    <p>
                      
                一些基础知识

早先ES的
                      <em class="related_suggestion_highlight">
                        HTTP
                      </em>
                      协议支持还是依赖Jetty的,现在不管是Rest还是RPC都是直接基于Netty了。

另外值得一提的是，ES 是使用Google的Guice 进行模块管理，所以了解Guice的基本使用方式有助于你了解ES的代码组织。

ES 的启动类是 org.elasticsearch.bootstrap.Bootstrap。在这里进行一些配置和环境初始化后会启动
              
                    </p>
                  </li>
                  <li class="news-recommends-ajax">
                    <a href="https://blog.csdn.net/flying_panda/article/details/45045881" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/flying_panda/article/details/45045881,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/flying_panda/article/details/45045881,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="zookeeper进阶（一）客户端建立连接及相应的源码分析">
                      zookeeper进阶（一）客户端建立
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      及相应的
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      分析
                    </a>
                    <p>
                      
                目录
zookeeper创建node 一个简单的实现 
对应
                      <em class="related_suggestion_highlight">
                        源码
                      </em>
                      分析
zookeeper客户端建立
                      <em class="related_suggestion_highlight">
                        连接
                      </em>
                      package zk;
import java.io.IOException;
import java.util.concurrent.CountDownLatch;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookee
              
                    </p>
                  </li>
                </ul>
              </div>
            </div>
          </div>
          <script type="text/javascript">
//<![CDATA[

  dp.SyntaxHighlighter.HighlightAll('code', true, true);

  $$('#main .blog_content pre[name=code]').each(function(pre, index){ // blog content
    var post_id = 1886237;
    var location = window.location;
    source_url = location.protocol + "//" + location.host + location.pathname + location.search;
    pre.writeAttribute('codeable_id', post_id);
    pre.writeAttribute('codeable_type', "Blog");
    pre.writeAttribute('source_url', source_url);
    pre.writeAttribute('pre_index', index);
    pre.writeAttribute('title', 'HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析');
  });

  fix_image_size($$('div.blog_content img'), 700);

  function processComment() {
    $$('#main .blog_comment > div').each(function(comment){// comment
      var post_id = comment.id.substr(2);
      $$("#"+comment.id+" pre[name=code]").each(function(pre, index){
        var location = window.location;
        source_url = location.protocol + "//" + location.host + location.pathname + location.search;
        source_url += "#" + comment.id;
        pre.writeAttribute('codeable_id', post_id);
        pre.writeAttribute('codeable_type', "BlogComment");
        pre.writeAttribute('source_url', source_url);
        pre.writeAttribute('pre_index', index);
        pre.writeAttribute('title', 'HTTP Client  MultiThreadedHttpConnectionManager线程安全连接管理类源码解析');
      });
    });
  }

  function quote_comment(id) {
    new Ajax.Request('/editor/quote', {
      parameters: {'id':id, 'type':'BlogComment'},
      onSuccess:function(response){editor.bbcode_editor.textarea.insertAfterSelection(response.responseText);
        Element.scrollTo(editor.bbcode_editor.textarea.element);}
    });
  }

  code_favorites_init();
  processComment();
  new WeiboShare({share_buttons: $('share_weibo'), img_scope: $('blog_content')});

//]]>
          </script>
        </div>
        <div class="blog-sidebar">
          <div class="blog-sidebar-fixed">
            <div class="news-right-side">
            </div>
            <div class="persion_article">
              <div class="right_box footer_box csdn-tracking-statistics" data-mod="popu_475" data-dsm="post">
                <h3 class="feed_new_tit">
                  <span class="line">
                  </span>
                  <span class="txt">
                    联系我们
                  </span>
                </h3>
                <div class="contact-box" id="footer-contact-box">
                  <div class="img-box">
                    <a href="https://bbs.csdn.net/forums/Service?utm_source=csdn_footer" target="_blank">
                      <img src="https://csdnimg.cn/pubfooter/images/csdn_cs_qr.png" alt="微信客服" style="padding: 6px;"/>
                    </a>
                    <p class="app-text">
                      微信客服
                    </p>
                  </div>
                  <div class="img-box fr">
                    <a href="http://wpa.b.qq.com/cgi/wpa.php?ln=1&amp;key=XzgwMDE4MDEwNl80ODc3MzVfODAwMTgwMTA2XzJf" target="_blank">
                      <img style="padding:6px;" src="https://csdnimg.cn/pubfooter/images/csdn-kf.png" alt="QQ客服"/>
                    </a>
                    <p class="app-text">
                      QQ客服
                    </p>
                  </div>
                </div>
                <div class="contact-info">
                  <p>
                    <svg width="16" height="16" xmlns="http://www.w3.org/2000/svg">
                      <path d="M2.167 2h11.666C14.478 2 15 2.576 15 3.286v9.428c0 .71-.522 1.286-1.167 1.286H2.167C1.522 14 1 13.424 1 12.714V3.286C1 2.576 1.522 2 2.167 2zm-.164 3v1L8 10l6-4V5L8 9 2.003 5z" fill="#5c5c5c" fill-rule="evenodd"/>
                    </svg>
                    <a href="mailto:webmaster@csdn.net" target="_blank">
                      <span class="txt">
                        kefu@csdn.net
                      </span>
                    </a>
                    <em class="width126">
                      <svg t="1538013544186" width="17" height="17" style="" viewbox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="23556" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <defs>
                          <style type="text/css"/>
                        </defs>
                        <path d="M902.60033922 650.96445566c-18.0718526-100.84369837-94.08399771-166.87723736-94.08399771-166.87723737 10.87530062-91.53186599-28.94715402-107.78733693-28.94715401-107.78733691C771.20003413 93.08221664 517.34798062 98.02553561 511.98620441 98.16348824 506.65661791 98.02553561 252.75857992 93.08221664 244.43541101 376.29988138c0 0-39.79946279 16.25547094-28.947154 107.78733691 0 0-75.98915247 66.03353901-94.0839977 166.87723737 0 0-9.63372291 170.35365477 86.84146124 20.85850523 0 0 21.70461757 56.79068296 61.50407954 107.78733692 0 0-71.1607951 23.19910867-65.11385185 83.46161052 0 0-2.43717093 67.16015592 151.93232126 62.56172014 0 0 108.5460788-8.0932473 141.10300432-52.14626271H526.33792324c32.57991817 44.05301539 141.10300431 52.1462627 141.10300431 52.14626271 154.3235077 4.59843579 151.95071457-62.56172013 151.95071457-62.56172014 6.00095876-60.26250183-65.11385185-83.46161053-65.11385185-83.46161052 39.77647014-50.99665395 61.4810877-107.78733693 61.4810877-107.78733692 96.45219231 149.49514952 86.84146124-20.85850523 86.84146125-20.85850523" p-id="23557" fill="#5c5c5c"/>
                      </svg>
                      <a href="http://wpa.b.qq.com/cgi/wpa.php?ln=1&amp;key=XzgwMDE4MDEwNl80ODc3MzVfODAwMTgwMTA2XzJf" class="qqcustomer_s" target="_blank">
                        <span class="txt">
                          QQ客服
                        </span>
                      </a>
                    </em>
                  </p>
                  <p>
                    <em class="width126">
                      <svg t="1538012951761" width="17" height="17" style="" viewbox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="23083" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <defs>
                          <style type="text/css"/>
                        </defs>
                        <path d="M466.4934485 880.02006511C264.6019863 859.18313878 107.13744214 688.54706608 107.13744214 481.14947309 107.13744214 259.68965394 286.68049114 80.14660493 508.14031029 80.14660493s401.00286817 179.54304901 401.00286814 401.00286816v1.67343191C908.30646249 737.58941724 715.26799489 943.85339507 477.28978337 943.85339507c-31.71423369 0-62.61874229-3.67075386-92.38963569-10.60739903 30.09478346-11.01226158 56.84270313-29.63593923 81.5933008-53.22593095z m-205.13036267-398.87059202a246.77722444 246.77722444 0 0 0 493.5544489 0 30.85052691 30.85052691 0 0 0-61.70105383 0 185.07617062 185.07617062 0 0 1-370.15234125 0 30.85052691 30.85052691 0 0 0-61.70105382 0z" p-id="23084" fill="#5c5c5c"/>
                      </svg>
                      <a href="http://bbs.csdn.net/forums/Service" target="_blank">
                        <span class="txt">
                          客服论坛
                        </span>
                      </a>
                    </em>
                    <svg t="1538013874294" width="17" height="17" style="" viewbox="0 0 1194 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="23784" xmlns:xlink="http://www.w3.org/1999/xlink">
                      <defs>
                        <style type="text/css"/>
                      </defs>
                      <path d="M1031.29689505 943.85339507h-863.70679012A71.98456279 71.98456279 0 0 1 95.60554212 871.86883228v-150.85178906c0-28.58329658 16.92325492-54.46750945 43.13135785-65.93861527l227.99160176-99.75813425c10.55341735-4.61543317 18.24580594-14.0082445 20.72896295-25.23643277l23.21211998-105.53417343a71.95757195 71.95757195 0 0 1 70.28414006-56.51881307h236.95255971c33.79252817 0 63.02360485 23.5090192 70.28414004 56.51881307l23.21211997 105.53417343c2.48315701 11.25517912 10.17554562 20.62099961 20.72896296 25.23643277l227.99160177 99.75813425a71.98456279 71.98456279 0 0 1 43.13135783 65.93861527v150.85178906A71.98456279 71.98456279 0 0 1 1031.26990421 943.85339507z m-431.85339506-143.94213475c143.94213474 0 143.94213474-48.34058941 143.94213474-107.96334876s-64.45411922-107.96334877-143.94213474-107.96334877c-79.51500637 0-143.94213474 48.34058941-143.94213475 107.96334877s0 107.96334877 143.94213475 107.96334876zM1103.254467 296.07330247v148.9894213a35.97878598 35.97878598 0 0 1-44.15700966 35.03410667l-143.94213473-33.57660146a36.0057768 36.0057768 0 0 1-27.80056231-35.03410668V296.1002933c-35.97878598-47.98970852-131.95820302-71.98456279-287.91126031-71.98456279S347.53801649 248.11058478 311.53223967 296.1002933v115.385829c0 16.73431906-11.52508749 31.25538946-27.80056233 35.03410668l-143.94213473 33.57660146A35.97878598 35.97878598 0 0 1 95.63253297 445.06272377V296.07330247C162.81272673 152.13116772 330.77670658 80.14660493 599.47049084 80.14660493s436.63077325 71.98456279 503.81096699 215.92669754z" p-id="23785" fill="#5c5c5c"/>
                    </svg>
                    400-660-0108 
                  </p>
                  <p style="text-align:center">
                    工作时间 8:30-22:00
                  </p>
                </div>
                <div class="bg-gray">
                  <div class="feed_copyright">
                    <p>
                      <a class="right-dotte" href="//www.csdn.net/company/index.html#about" target="_blank">
                        关于我们
                      </a>
                      <a href="//www.csdn.net/company/index.html#recruit" target="_blank" class="right-dotte">
                        招聘
                      </a>
                      <a href="//www.csdn.net/company/index.html#contact" target="_blank" class="right-dotte">
                        广告服务
                      </a>
                      <a href="https://www.csdn.net/gather/A" target="_blank" class="footer_baidu">
                                    网站地图
                      </a>
                    </p>
                    <p class="fz12_baidu">
                      <a href="https://zn.baidu.com/cse/home/index" target="_blank">
                        <svg width="13" height="14" xmlns="http://www.w3.org/2000/svg">
                          <path d="M8.392 7.013c1.014 1.454 2.753 2.8 2.753 2.8s1.303 1.017.47 2.98c-.833 1.962-3.876.942-3.876.942s-1.122-.36-2.424-.072c-1.303.291-2.426.181-2.426.181s-1.523.037-1.957-1.888c-.434-1.927 1.52-2.982 1.666-3.161.145-.183 1.159-.873 1.81-1.963.653-1.09 2.608-1.962 3.984.181zm1.23 5.706V9.346H8.64v2.534h-.937s-.3-.044-.356-.285V9.33l-.925.015v2.518s.042.627.925.855h2.277zm-3.685.013V7.951l-.896-.014v1.295H3.987s-1.054.086-1.422 1.28c-.129.798.114 1.266.156 1.368.043.099.383.682 1.238.852h1.978zm-2.433-1.45c-.087-.286.013-.613.057-.741.042-.128.228-.427.61-.54h.855v1.948h-.797s-.555-.029-.725-.668zm6.877-8.775c-.143.909-.865 2.108-1.99 1.962-1.121-.144-1.375-1.16-1.267-2.179C7.214 1.458 8.21.18 9.007.364c.796.18 1.52 1.235 1.374 2.143zm-4.09-.345c0 1.197-.68 2.164-1.52 2.164S3.25 3.36 3.25 2.162C3.25.967 3.932 0 4.77 0c.842 0 1.52.967 1.52 2.162zm4.854 2.09c1.34 0 1.701 1.309 1.701 1.743 0 .438.182 2.29-1.485 2.326-1.667.037-1.737-1.126-1.737-1.96 0-.874.179-2.11 1.52-2.11zm-7.93.581c.045.398.253 2.217-1.27 2.544C.427 7.704-.14 5.947.028 5.124c0 0 .18-1.78 1.412-1.89.98-.085 1.7.986 1.774 1.6z" fill="#999" fill-rule="evenodd"/>
                        </svg>
                        <em>
                          百度提供站内搜索
                        </em>
                      </a>
                       
                      <a href="http://www.miibeian.gov.cn/" target="_blank" class="ml14">
                        京ICP证19004658号
                      </a>
                    </p>
                    <p class="fz12_baidu">
                      ©1999-2019 北京创新乐知网络技术有限公司 
                    </p>
                  </div>
                </div>
                <div class="allow-info-box">
                  <p>
                    <a href="http://www.hd315.gov.cn/beian/view.asp?bianhao=010202001032100010" target="_blank">
                      <span>
                        经营性网站备案信息
                      </span>
                    </a>
                    <em class="width126">
                      <a href="http://www.cyberpolice.cn/" target="_blank">
                        <span>
                          网络110报警服务
                        </span>
                      </a>
                    </em>
                  </p>
                  <p>
                    <a href="http://www.bjjubao.org/" target="_blank">
                      <span>
                        北京互联网违法和不良信息举报中心
                      </span>
                    </a>
                  </p>
                  <p>
                    <a href="http://www.12377.cn/" target="_blank">
                      <span>
                        中国互联网举报中心
                      </span>
                    </a>
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
        <script>
//<![CDATA[

        setTimeout(function () {
          var naviga_offsetTop = 0;

          function onload_function() {
            naviga_offsetTop = jQuery("#nav_show_top_stop").position().top;
            jQuery(window).bind("scroll", naviga_stay_top);
            jQuery(window).bind("mousewheel", naviga_stay_top);
            jQuery(document).bind("scroll", naviga_stay_top);
            jQuery(document).bind("mousewheel", naviga_stay_top);
          }

          function naviga_stay_top() {

            var scrollTop = jQuery(document).scrollTop();
            if (scrollTop > (naviga_offsetTop + 250)) {
              jQuery("#nav_show_top_stop").css({
                "position": "fixed"
              });
              jQuery("#nav_show_top_stop").css({
                "top": "0px"
              });
            } else {
              jQuery("#nav_show_top_stop").css({
                "position": "fixed"
              });
              jQuery("#nav_show_top_stop").css({
                "top": naviga_offsetTop + 250 - scrollTop + "px"
              });
            }
          }
          jQuery(document).ready(onload_function());
        }, 200);
      
//]]>
        </script>
      </div>
      <script>
//<![CDATA[

          setTimeout(function () {
              not_loading = true;
              pageNum = 3;
              oList = jQuery("#album_detail_wrap");
              jQuery(window).scroll(function() {
                  var scrollTop = jQuery(this).scrollTop();
                  var scrollHeight = jQuery(document).height() ;
                  var windowHeight = jQuery(this).height();
                  if (scrollTop + windowHeight >= scrollHeight) {
                      if(not_loading){
                          refreshMore();
                          setTimeout(function(){
                              getMore();
                          },100);
                      }else{
                          jQuery(".dl_more").remove();
                      }
                  }
              });

              function getMore(){
                  not_loading = false;
                  console.log("getMore......");
                  jQuery.ajax({
                      type: 'get',
                      url: "/blog/ajax_get_blog_recommends/1886237",
                      data:{
                          page:pageNum
                      },
                      //async: false,
                      dataType: 'json',
                      success: function (resobj) {
                          var totalNum = resobj.total_pages;
                          if(pageNum <= totalNum && resobj.oHtml != '' ){
                              jQuery(".dl_more").remove();
                              oList.find('ul').append(resobj.oHtml);
                              refreshMore();
                              not_loading = true;
                              pageNum++;
                          }else{
                              not_loading = false;
                              noMore();
                          }
                      },
                      error: function (err) {
                          console.log(err);
                      }
                  });
              }

              function noMore(){
                  jQuery(".dl_more").remove();
                  if(oList.find(".dl_no_more").length ==0){
                      oList.append('<div class="dl_no_more" style="font-size:14px; color:#0F8AC6; text-align:center;padding-top:10px; ">我们是很有底线的</div>');
                  }
              }

              function refreshMore(){
                  if(oList.find(".dl_more").length ==0){
                      oList.append('<div class="dl_more" style="font-size:14px; color:#0F8AC6; text-align:center;padding-top:10px;">上滑加载更多</div>');
                  }
              }
          }, 200);
      
//]]>
      </script>
      <div id="footer" class="clearfix">
        <!-- <div id="copyright">
        <hr />
        声明：ITeye文章版权属于作者，受法律保护。没有作者书面许可不得转载。若作者同意转载，必须以超链接形式标明文章原始出处和作者。<br />
        &copy; 2003-
        2019 ITeye.com. All rights reserved. [ 京ICP证110151号 京公网安备110105010620 ]
      </div> -->        <div id="ad_pop">
          <div class="J_adv" data-view="true" data-mod="ad_popu_64" data-mtp="62" data-order="21" data-con="ad_content_2070">
            <script id="popuLayer_js_q" src="https://ads.csdn.net/js/popuLayer.js" defer="" type="text/javascript">
            </script>
            <!-- 广告位：PC端-iteye博客详情右侧弹窗-300*250 -->          </div>
        </div>
      </div>
    </div>
    <script type="text/javascript">
//<![CDATA[

  document.write("<img src='https://stat.iteye.com/?url="+ encodeURIComponent(document.location.href) + "&referrer=" + encodeURIComponent(document.referrer) + "&user_id=' width='0' height='0' />");

//]]>
    </script>
    <img src="https://stat.iteye.com/?url=https%3A%2F%2Fliuinsect.iteye.com%2Fblog%2F1886237&amp;referrer=&amp;user_id=" width="0" height="0"/>
    



   Global site tag (gtag.js) - Google Analytics
  
    <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-127895514-6">
    </script>
    <script>
//<![CDATA[

      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'UA-127895514-6');
  
//]]>
    </script>
    <link href="//csdnimg.cn/public/common/toolbar/content_toolbar_css/content_toolbar.css" rel="stylesheet"/>
    <script src="//csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js" type="text/javascript">
    </script>
    <script src="https://csdnimg.cn/pubfooter/js/publib_footer-1.0.3.js" data-isfootertrack="false" type="text/javascript">
    </script>
    <link rel="stylesheet" type="text/css" href="//csdnimg.cn/pubfooter/css/pub_footer_1.0.3.css?v=201810222345"/>
    <script id="csdn-toolbar-id" btnid="header_notice_num" wrapid="note1" count="5" subcount="5" type="text/javascript" src="//csdnimg.cn/public/common/toolbar/js/content_toolbar.js">
    </script>
    <script src="https://g.csdnimg.cn/notification/1.3.6/notify.js">
    </script>
    <script src="https://g.csdnimg.cn/notification/1.3.6/main.js">
    </script>
    <script src="//csdnimg.cn/asdf/tracking-1.0.1.js" type="text/javascript">
    </script>
    <script language="javascript" type="text/javascript" src="//csdnimg.cn/asdf/async-1.0.1.js">
    </script>
    <script type="text/javascript" charset="utf-8" src="https://g.csdnimg.cn/track/1.2.2/track.js">
    </script>
    <style>
      
  .userinfo {display: none !important;}
  .persion_article h3{
    background: none !important;
    border-bottom: none!important;
    padding: 0!important;
    margin-bottom: 0!important;
    line-height: 1!important;
  }
  .persion_article .right_box{
    margin-top: 0!important;
  }
  .persion_article .footer_box .feed_new_tit span{
    padding-left: 0!important;
  }

    </style>
    <script>
//<![CDATA[

(function($){
  var windowHeight = $(window).height(),
      contentHeight = $(".hide-main-content").height()
      windowHeight = windowHeight * 1.2 //获得可视区域高度
      if(contentHeight > windowHeight){
        $(".hide-article-box").show()
        $(".hide-main-content").css({'height': windowHeight,'overflow':'hidden'})
        $(".hide-article-box").find("#btn-readmore").click(function(){
          $(this).parents('.hide-main-content').removeAttr('style')
          $(this).parent().hide()
        })
      }
})(jQuery)

//]]>
    </script>
    <script type="text/javascript">
//<![CDATA[
var $csdn_iteye_jq = jQuery.noConflict();// 解决jq与prototype.js命名空间冲突的问题
//]]>
    </script>
    <script src="https://www.iteye.com/javascripts/web-storage-cache.min.js?1461122670" type="text/javascript">
    </script>
    <script src="https://www.iteye.com/javascripts/replace.min.js?1517972556" type="text/javascript">
    </script>
    <script>
//<![CDATA[

  var jQuery = jQuery.noConflict();
  setTimeout(function($){
    window.csdn.fixedSidebar({
        targetBox: $('.persion_article'), //判断到达底部的div,公共footer可选 $('.persion_article'),$('.public_pc_right_footer2018')
        mainBox: $("#main"), //侧边栏旁边的主体div,默认 $("main")
        sidebar: $(".blog-sidebar-fixed"), //侧边栏,默认 $("aside")
        direction: 'right', //侧边栏浮动方向,可选'right','left',
        position: 'fixed',//定位方式
        bottom: 0,
        zIndex: 99,
        sidebarRightMargin: 8,//direction为left,侧边栏距离mainbox的右边距
        sidebarLeftMargin: 37,//direction为right,侧边栏距离mainbox的左边距
    })
  },200,jQuery)
  
//]]>
    </script>
  </body>
</html>

[INFO] [2019-02-01 11:44:03][com.loris.soccer.net.App]Success to download: https://liuinsect.iteye.com/blog/1886237
[WARN] [2019-02-01 11:44:14][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:14][com.gargoylesoftware.htmlunit.javascript.host.dom.Document]Nothing done for execCommand(BackgroundImageCache, ...) (feature not implemented)
[WARN] [2019-02-01 11:44:14][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:15][com.gargoylesoftware.htmlunit.javascript.host.css.CSSStyleSheet]Unhandled CSS condition type 'PREFIX_ATTRIBUTE_CONDITION'. Accepting it silently.
[ERROR] [2019-02-01 11:44:15][com.gargoylesoftware.htmlunit.javascript.StrictErrorReporter]runtimeError: message=[An invalid or illegal selector was specified (selector: '*,:x' error: Invalid selector: *:x).] sourceName=[https://csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js] line=[2] lineSource=[null] lineOffset=[0]
[WARN] [2019-02-01 11:44:15][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:15][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:15][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:15][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:15][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:15][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:15][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:15][com.gargoylesoftware.htmlunit.html.HtmlScript]Script is not JavaScript (type: application/ld+json, language: ). Skipping execution.
[WARN] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.javascript.host.css.CSSStyleSheet]Unhandled CSS condition type 'PREFIX_ATTRIBUTE_CONDITION'. Accepting it silently.
[ERROR] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.javascript.StrictErrorReporter]runtimeError: message=[An invalid or illegal selector was specified (selector: '*,:x' error: Invalid selector: *:x).] sourceName=[https://csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js] line=[2] lineSource=[null] lineOffset=[0]
[WARN] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.NicelyResynchronizingAjaxController]Re-synchronized call to https://pv.csdn.net/csdnbi
[WARN] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine]Caught script exception
======= EXCEPTION START ========
EcmaError: lineNumber=[1] column=[0] lineSource=[<no source>] name=[TypeError] sourceName=[https://csdnimg.cn/search/baidu_opensug-1.0.0.js] message=[TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)]
com.gargoylesoftware.htmlunit.ScriptException: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:892)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:772)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:748)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.loadExternalJavaScriptFile(HtmlPage.java:995)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:371)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:46)
	at com.loris.soccer.net.App.main(App.java:24)
Caused by: net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.notFunctionError(ScriptRuntime.java:4369)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2597)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.exec(InterpretedFunction.java:123)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$2.doRun(JavaScriptEngine.java:763)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	... 34 more
Enclosed exception: 
net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.notFunctionError(ScriptRuntime.java:4369)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2597)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at script.i(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script.a(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.exec(InterpretedFunction.java:123)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$2.doRun(JavaScriptEngine.java:763)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:772)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:748)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.loadExternalJavaScriptFile(HtmlPage.java:995)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:371)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:46)
	at com.loris.soccer.net.App.main(App.java:24)
======= EXCEPTION END ========
[INFO] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine]Caught script exception
======= EXCEPTION START ========
EcmaError: lineNumber=[889] column=[0] lineSource=[null] name=[TypeError] sourceName=[https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js] message=[TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)]
com.gargoylesoftware.htmlunit.ScriptException: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:892)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.executeEventLocally(EventTarget.java:101)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeEvent(HtmlScript.java:412)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:378)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:46)
	at com.loris.soccer.net.App.main(App.java:24)
Caused by: net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.undefCallError(ScriptRuntime.java:4312)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2586)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$3.doRun(JavaScriptEngine.java:814)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	... 38 more
Enclosed exception: 
net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.undefCallError(ScriptRuntime.java:4312)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2586)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at script(https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js:889)
	at script(https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js:881)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$3.doRun(JavaScriptEngine.java:814)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.executeEventLocally(EventTarget.java:101)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeEvent(HtmlScript.java:412)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:378)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:46)
	at com.loris.soccer.net.App.main(App.java:24)
== CALLING JAVASCRIPT ==
  function () {
      callback();
  }
======= EXCEPTION END ========
[WARN] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 11:44:16][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 11:44:17][com.loris.soccer.net.App]Success to download: https://liuinsect.iteye.com/blog/1886237
[WARN] [2019-02-01 13:13:31][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:13:31][com.gargoylesoftware.htmlunit.javascript.host.dom.Document]Nothing done for execCommand(BackgroundImageCache, ...) (feature not implemented)
[WARN] [2019-02-01 13:13:31][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:13:32][com.gargoylesoftware.htmlunit.javascript.host.css.CSSStyleSheet]Unhandled CSS condition type 'PREFIX_ATTRIBUTE_CONDITION'. Accepting it silently.
[ERROR] [2019-02-01 13:13:32][com.gargoylesoftware.htmlunit.javascript.StrictErrorReporter]runtimeError: message=[An invalid or illegal selector was specified (selector: '*,:x' error: Invalid selector: *:x).] sourceName=[https://csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js] line=[2] lineSource=[null] lineOffset=[0]
[WARN] [2019-02-01 13:13:32][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:13:32][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:13:32][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:13:32][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:13:32][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:13:32][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:13:32][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:13:32][com.gargoylesoftware.htmlunit.html.HtmlScript]Script is not JavaScript (type: application/ld+json, language: ). Skipping execution.
[WARN] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.javascript.host.css.CSSStyleSheet]Unhandled CSS condition type 'PREFIX_ATTRIBUTE_CONDITION'. Accepting it silently.
[ERROR] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.javascript.StrictErrorReporter]runtimeError: message=[An invalid or illegal selector was specified (selector: '*,:x' error: Invalid selector: *:x).] sourceName=[https://csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js] line=[2] lineSource=[null] lineOffset=[0]
[WARN] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.NicelyResynchronizingAjaxController]Re-synchronized call to https://pv.csdn.net/csdnbi
[WARN] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine]Caught script exception
======= EXCEPTION START ========
EcmaError: lineNumber=[1] column=[0] lineSource=[<no source>] name=[TypeError] sourceName=[https://csdnimg.cn/search/baidu_opensug-1.0.0.js] message=[TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)]
com.gargoylesoftware.htmlunit.ScriptException: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:892)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:772)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:748)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.loadExternalJavaScriptFile(HtmlPage.java:995)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:371)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:45)
	at com.loris.soccer.net.App.main(App.java:24)
Caused by: net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.notFunctionError(ScriptRuntime.java:4369)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2597)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.exec(InterpretedFunction.java:123)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$2.doRun(JavaScriptEngine.java:763)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	... 34 more
Enclosed exception: 
net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.notFunctionError(ScriptRuntime.java:4369)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2597)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at script.i(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script.a(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.exec(InterpretedFunction.java:123)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$2.doRun(JavaScriptEngine.java:763)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:772)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:748)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.loadExternalJavaScriptFile(HtmlPage.java:995)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:371)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:45)
	at com.loris.soccer.net.App.main(App.java:24)
======= EXCEPTION END ========
[INFO] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine]Caught script exception
======= EXCEPTION START ========
EcmaError: lineNumber=[889] column=[0] lineSource=[null] name=[TypeError] sourceName=[https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js] message=[TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)]
com.gargoylesoftware.htmlunit.ScriptException: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:892)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.executeEventLocally(EventTarget.java:101)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeEvent(HtmlScript.java:412)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:378)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:45)
	at com.loris.soccer.net.App.main(App.java:24)
Caused by: net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.undefCallError(ScriptRuntime.java:4312)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2586)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$3.doRun(JavaScriptEngine.java:814)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	... 38 more
Enclosed exception: 
net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.undefCallError(ScriptRuntime.java:4312)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2586)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at script(https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js:889)
	at script(https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js:881)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$3.doRun(JavaScriptEngine.java:814)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.executeEventLocally(EventTarget.java:101)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeEvent(HtmlScript.java:412)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:378)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:165)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:202)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:117)
	at com.loris.soccer.net.App.testSetting(App.java:45)
	at com.loris.soccer.net.App.main(App.java:24)
== CALLING JAVASCRIPT ==
  function () {
      callback();
  }
======= EXCEPTION END ========
[WARN] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:13:33][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 13:13:34][com.loris.soccer.net.App]Success to download: https://liuinsect.iteye.com/blog/1886237
[INFO] [2019-02-01 13:13:34][com.loris.soccer.net.App] Time: 4645 URL: https://liuinsect.iteye.com/blog/1886237

[WARN] [2019-02-01 13:51:58][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:51:59][com.gargoylesoftware.htmlunit.javascript.host.dom.Document]Nothing done for execCommand(BackgroundImageCache, ...) (feature not implemented)
[WARN] [2019-02-01 13:51:59][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:51:59][com.gargoylesoftware.htmlunit.javascript.host.css.CSSStyleSheet]Unhandled CSS condition type 'PREFIX_ATTRIBUTE_CONDITION'. Accepting it silently.
[ERROR] [2019-02-01 13:51:59][com.gargoylesoftware.htmlunit.javascript.StrictErrorReporter]runtimeError: message=[An invalid or illegal selector was specified (selector: '*,:x' error: Invalid selector: *:x).] sourceName=[https://csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js] line=[2] lineSource=[null] lineOffset=[0]
[WARN] [2019-02-01 13:51:59][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:51:59][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:51:59][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:51:59][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:51:59][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:51:59][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:51:59][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.html.HtmlScript]Script is not JavaScript (type: application/ld+json, language: ). Skipping execution.
[WARN] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.javascript.host.css.CSSStyleSheet]Unhandled CSS condition type 'PREFIX_ATTRIBUTE_CONDITION'. Accepting it silently.
[ERROR] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.javascript.StrictErrorReporter]runtimeError: message=[An invalid or illegal selector was specified (selector: '*,:x' error: Invalid selector: *:x).] sourceName=[https://csdnimg.cn/public/common/libs/jquery/jquery-1.11.1.min.js] line=[2] lineSource=[null] lineOffset=[0]
[WARN] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.NicelyResynchronizingAjaxController]Re-synchronized call to https://pv.csdn.net/csdnbi
[WARN] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'text/javascript'.
[WARN] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 13:52:00][com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine]Caught script exception
======= EXCEPTION START ========
EcmaError: lineNumber=[1] column=[0] lineSource=[<no source>] name=[TypeError] sourceName=[https://csdnimg.cn/search/baidu_opensug-1.0.0.js] message=[TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)]
com.gargoylesoftware.htmlunit.ScriptException: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:892)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:772)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:748)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.loadExternalJavaScriptFile(HtmlPage.java:995)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:371)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:163)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:200)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:115)
	at com.loris.soccer.net.App.testSetting(App.java:45)
	at com.loris.soccer.net.App.main(App.java:24)
Caused by: net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.notFunctionError(ScriptRuntime.java:4369)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2597)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.exec(InterpretedFunction.java:123)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$2.doRun(JavaScriptEngine.java:763)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	... 34 more
Enclosed exception: 
net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot find function insertRule in object [object StyleSheetList]. (https://csdnimg.cn/search/baidu_opensug-1.0.0.js#1)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.notFunctionError(ScriptRuntime.java:4369)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2597)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at script.i(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script.a(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at script(https://csdnimg.cn/search/baidu_opensug-1.0.0.js:1)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.exec(InterpretedFunction.java:123)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$2.doRun(JavaScriptEngine.java:763)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:772)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:748)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.execute(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.loadExternalJavaScriptFile(HtmlPage.java:995)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:371)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:163)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:200)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:115)
	at com.loris.soccer.net.App.testSetting(App.java:45)
	at com.loris.soccer.net.App.main(App.java:24)
======= EXCEPTION END ========
[INFO] [2019-02-01 13:52:01][com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine]Caught script exception
======= EXCEPTION START ========
EcmaError: lineNumber=[889] column=[0] lineSource=[null] name=[TypeError] sourceName=[https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js] message=[TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)]
com.gargoylesoftware.htmlunit.ScriptException: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:892)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.executeEventLocally(EventTarget.java:101)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeEvent(HtmlScript.java:412)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:378)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:163)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:200)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:115)
	at com.loris.soccer.net.App.testSetting(App.java:45)
	at com.loris.soccer.net.App.main(App.java:24)
Caused by: net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.undefCallError(ScriptRuntime.java:4312)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2586)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$3.doRun(JavaScriptEngine.java:814)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	... 38 more
Enclosed exception: 
net.sourceforge.htmlunit.corejs.javascript.EcmaError: TypeError: Cannot call method "bind" of undefined (https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js#889)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4263)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.constructError(ScriptRuntime.java:4241)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError(ScriptRuntime.java:4274)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.typeError2(ScriptRuntime.java:4293)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.undefCallError(ScriptRuntime.java:4312)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThisHelper(ScriptRuntime.java:2586)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.getPropFunctionAndThis(ScriptRuntime.java:2579)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpretLoop(Interpreter.java:1519)
	at script(https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js:889)
	at script(https://csdnimg.cn/public/common/toolbar/js/content_toolbar.js:881)
	at net.sourceforge.htmlunit.corejs.javascript.Interpreter.interpret(Interpreter.java:1009)
	at net.sourceforge.htmlunit.corejs.javascript.InterpretedFunction.call(InterpretedFunction.java:111)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.doTopCall(ContextFactory.java:424)
	at com.gargoylesoftware.htmlunit.javascript.HtmlUnitContextFactory.doTopCall(HtmlUnitContextFactory.java:330)
	at net.sourceforge.htmlunit.corejs.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3557)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$3.doRun(JavaScriptEngine.java:814)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:877)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.executeEventLocally(EventTarget.java:101)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeEvent(HtmlScript.java:412)
	at com.gargoylesoftware.htmlunit.html.HtmlScript.executeScriptIfNeeded(HtmlScript.java:378)
	at com.gargoylesoftware.htmlunit.html.HtmlScript$2.execute(HtmlScript.java:246)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.doProcessPostponedActions(JavaScriptEngine.java:943)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.access$200(JavaScriptEngine.java:104)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine$HtmlUnitContextAction.run(JavaScriptEngine.java:887)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:821)
	at com.gargoylesoftware.htmlunit.javascript.JavaScriptEngine.callFunction(JavaScriptEngine.java:793)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2518)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeJavaScriptFunction(HtmlPage.java:2511)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeEventListeners(EventListenersContainer.java:344)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventListenersContainer.executeAtTargetListeners(EventListenersContainer.java:381)
	at com.gargoylesoftware.htmlunit.javascript.host.event.EventTarget.fireEvent(EventTarget.java:174)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.lambda$executeEventHandlersIfNeeded$0(HtmlPage.java:1236)
	at net.sourceforge.htmlunit.corejs.javascript.Context.call(Context.java:616)
	at net.sourceforge.htmlunit.corejs.javascript.ContextFactory.call(ContextFactory.java:534)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.executeEventHandlersIfNeeded(HtmlPage.java:1236)
	at com.gargoylesoftware.htmlunit.html.HtmlPage.initialize(HtmlPage.java:249)
	at com.gargoylesoftware.htmlunit.WebClient.loadWebResponseInto(WebClient.java:538)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:398)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:315)
	at com.gargoylesoftware.htmlunit.WebClient.getPage(WebClient.java:482)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.excuteWebRequest(HtmlUnitFetcher.java:163)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.fetch(HtmlUnitFetcher.java:200)
	at com.loris.client.fetcher.impl.HtmlUnitFetcher.download(HtmlUnitFetcher.java:115)
	at com.loris.soccer.net.App.testSetting(App.java:45)
	at com.loris.soccer.net.App.main(App.java:24)
== CALLING JAVASCRIPT ==
  function () {
      callback();
  }
======= EXCEPTION END ========
[WARN] [2019-02-01 13:52:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[WARN] [2019-02-01 13:52:01][com.gargoylesoftware.htmlunit.IncorrectnessListenerImpl]Obsolete content type encountered: 'application/x-javascript'.
[INFO] [2019-02-01 13:52:01][com.loris.soccer.net.App]Success to download: https://liuinsect.iteye.com/blog/1886237
[INFO] [2019-02-01 13:52:01][com.loris.soccer.net.App] Time: 3872 URL: https://liuinsect.iteye.com/blog/1886237

[INFO] [2019-02-01 14:12:10][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:12:10 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:12:10][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:12:27][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:12:27 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:12:27][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:12:27][com.loris.soccer.net.App]Bean has been initialized false
[INFO] [2019-02-01 14:12:50][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:12:50 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:12:50][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:12:51][com.loris.soccer.net.App]Bean has been initialized false
[INFO] [2019-02-01 14:13:15][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:13:15 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:13:15][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:13:15][com.loris.soccer.net.App]Bean has been initialized false
[INFO] [2019-02-01 14:13:15][com.loris.soccer.net.App]com.loris.client.fetcher.setting.FetcherSetting@10db82ae
[INFO] [2019-02-01 14:13:58][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:13:58 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:13:58][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:17:32][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:17:32 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:17:32][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:18:45][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:18:45 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:18:45][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:23:49][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:23:49 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:23:49][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[WARN] [2019-02-01 14:23:49][org.springframework.context.support.ClassPathXmlApplicationContext]Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'settingFactory' defined in URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'settings' of bean class [com.loris.client.fetcher.setting.SettingFactory]: Bean property 'settings' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
[INFO] [2019-02-01 14:24:34][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:24:34 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:24:34][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:24:34][com.loris.soccer.net.App]Bean has been initialized false
[INFO] [2019-02-01 14:24:34][com.loris.soccer.net.App]
[INFO] [2019-02-01 14:25:41][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:25:41 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:25:41][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[WARN] [2019-02-01 14:25:41][org.springframework.context.support.ClassPathXmlApplicationContext]Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'settingFactory' defined in URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.loris.client.fetcher.setting.SettingFactory]: Constructor threw exception; nested exception is java.lang.NullPointerException
[INFO] [2019-02-01 14:27:48][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:27:48 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:27:48][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:27:48][com.loris.soccer.net.App]Bean has been initialized false
[INFO] [2019-02-01 14:27:48][com.loris.soccer.net.App]
[INFO] [2019-02-01 14:32:25][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:32:25 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:32:25][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:34:34][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:34:34 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:34:34][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:35:04][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:35:04 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:35:04][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[WARN] [2019-02-01 14:35:05][org.springframework.context.support.ClassPathXmlApplicationContext]Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'settingFactory' defined in URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]: Initialization of bean failed; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert property value of type 'java.util.LinkedHashMap' to required type 'java.util.Map' for property 'settings'; nested exception is java.lang.IllegalStateException: Cannot convert value of type 'java.lang.String' to required type 'com.loris.client.fetcher.setting.FetcherSetting' for property 'settings[default]': no matching editors or conversion strategy found
[INFO] [2019-02-01 14:38:20][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:38:20 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:38:20][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:38:20][com.loris.soccer.net.App]Bean has been initialized false
[INFO] [2019-02-01 14:38:20][com.loris.soccer.net.App]com.loris.client.fetcher.setting.FetcherSetting@5ccddd20
[INFO] [2019-02-01 14:40:21][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:40:21 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:40:21][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:40:21][com.loris.soccer.net.App]Bean has been initialized false
[INFO] [2019-02-01 14:40:21][com.loris.soccer.net.App]400000
[INFO] [2019-02-01 14:45:23][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:45:23 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:45:23][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:45:24][com.loris.soccer.net.App]Bean has been initialized false
[INFO] [2019-02-01 14:45:24][com.loris.soccer.net.App]Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0
[INFO] [2019-02-01 14:46:32][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:46:32 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:46:32][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:46:32][com.loris.soccer.net.App]Bean has been initialized false
[INFO] [2019-02-01 14:47:16][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:47:16 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:47:16][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:47:17][com.loris.soccer.net.App]Bean has been initialized true
[INFO] [2019-02-01 14:47:17][com.loris.soccer.net.App]Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko
[INFO] [2019-02-01 14:49:21][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:49:21 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:49:22][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:49:22][com.loris.soccer.net.App]Bean has been initialized true
[INFO] [2019-02-01 14:49:22][com.loris.soccer.net.App]Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko
[INFO] [2019-02-01 14:49:22][com.loris.soccer.net.App]{Accept=test}
[INFO] [2019-02-01 14:49:50][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:49:50 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:49:50][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:49:50][com.loris.soccer.net.App]Bean has been initialized true
[INFO] [2019-02-01 14:49:50][com.loris.soccer.net.App]Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko
[INFO] [2019-02-01 14:49:50][com.loris.soccer.net.App]{Accept=test, User-agent=Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko}
[INFO] [2019-02-01 14:51:14][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:51:14 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:51:14][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:51:14][com.loris.soccer.net.App]Bean has been initialized true
[INFO] [2019-02-01 14:51:14][com.loris.soccer.net.App]Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko
[INFO] [2019-02-01 14:51:14][com.loris.soccer.net.App]{Accept=test, User-agent=Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko}
[INFO] [2019-02-01 14:52:31][org.springframework.context.support.ClassPathXmlApplicationContext]Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@39ed3c8d: startup date [Fri Feb 01 14:52:31 CST 2019]; root of context hierarchy
[INFO] [2019-02-01 14:52:31][org.springframework.beans.factory.xml.XmlBeanDefinitionReader]Loading XML bean definitions from URL [file:/D:/Workspace/Soccer/soccer-client/target/classes/spring-settings.xml]
[INFO] [2019-02-01 14:52:32][com.loris.soccer.net.App]Bean has been initialized true
[INFO] [2019-02-01 14:52:32][com.loris.soccer.net.App]Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko
[INFO] [2019-02-01 14:52:32][com.loris.soccer.net.App]{Accept=test, User-agent=Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko}
